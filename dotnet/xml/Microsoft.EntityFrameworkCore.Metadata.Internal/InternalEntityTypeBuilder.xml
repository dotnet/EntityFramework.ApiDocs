<Type Name="InternalEntityTypeBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder">
  <TypeSignature Language="C#" Value="public class InternalEntityTypeBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataItemBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalEntityTypeBuilder extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataItemBuilder`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalEntityTypeBuilder&#xA;Inherits InternalMetadataItemBuilder(Of EntityType)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type InternalEntityTypeBuilder = class&#xA;    inherit InternalMetadataItemBuilder&lt;EntityType&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public class InternalEntityTypeBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelItemBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalEntityTypeBuilder extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelItemBuilder`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalEntityTypeBuilder&#xA;Inherits InternalModelItemBuilder(Of EntityType)&#xA;Implements IConventionEntityTypeBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="F#" Value="type InternalEntityTypeBuilder = class&#xA;    inherit InternalModelItemBuilder&lt;EntityType&gt;&#xA;    interface IConventionEntityTypeBuilder&#xA;    interface IConventionAnnotatableBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="C#" Value="public class InternalEntityTypeBuilder : Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalEntityTypeBuilder extends Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBuilder`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt; implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalEntityTypeBuilder&#xA;Inherits AnnotatableBuilder(Of EntityType, InternalModelBuilder)&#xA;Implements IConventionEntityTypeBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="F#" Value="type InternalEntityTypeBuilder = class&#xA;    inherit AnnotatableBuilder&lt;EntityType, InternalModelBuilder&gt;&#xA;    interface IConventionEntityTypeBuilder&#xA;    interface IConventionAnnotatableBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="C#" Value="public class InternalEntityTypeBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalTypeBaseBuilder, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalEntityTypeBuilder extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalTypeBaseBuilder implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTypeBaseBuilder" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalEntityTypeBuilder&#xA;Inherits InternalTypeBaseBuilder&#xA;Implements IConventionEntityTypeBuilder" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="F#" Value="type InternalEntityTypeBuilder = class&#xA;    inherit InternalTypeBaseBuilder&#xA;    interface IConventionEntityTypeBuilder&#xA;    interface IConventionTypeBaseBuilder&#xA;    interface IConventionAnnotatableBuilder" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataItemBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;</BaseTypeName>
    <BaseTypeName FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelItemBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;</BaseTypeName>
    <BaseTypeName FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TMetadata">Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TModelBuilder">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder</BaseTypeArgument>
    </BaseTypeArguments>
    <BaseTypeName FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalTypeBaseBuilder</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTypeBaseBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{Metadata,nq}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{Metadata,nq}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalEntityTypeBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType metadata, Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder modelBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType metadata, class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder modelBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (metadata As EntityType, modelBuilder As InternalModelBuilder)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder (metadata, modelBuilder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="metadata" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <param name="modelBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddComplexProperty">
      <MemberSignature Language="C#" Value="public override bool CanAddComplexProperty (string propertyName, Type? propertyType, Type? targetType, bool? collection, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool checkClrProperty = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanAddComplexProperty(string propertyName, class System.Type propertyType, class System.Type targetType, valuetype System.Nullable`1&lt;bool&gt; collection, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool checkClrProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanAddComplexProperty(System.String,System.Type,System.Type,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanAddComplexProperty (propertyName As String, propertyType As Type, targetType As Type, collection As Nullable(Of Boolean), configurationSource As ConfigurationSource, Optional checkClrProperty As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="override this.CanAddComplexProperty : string * Type * Type * Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; bool" Usage="internalEntityTypeBuilder.CanAddComplexProperty (propertyName, propertyType, targetType, collection, configurationSource, checkClrProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyType" Type="System.Type" Index="1" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="targetType" Type="System.Type" Index="2" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="collection" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="4" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="checkClrProperty" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="propertyType">To be added.</param>
        <param name="targetType">To be added.</param>
        <param name="collection">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="checkClrProperty">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanAddNavigation (string navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAddNavigation(string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanAddNavigation(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanAddNavigation (navigationName As String, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanAddNavigation : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanAddNavigation : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanAddNavigation (navigationName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanAddNavigation (string navigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAddNavigation(string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanAddNavigation(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanAddNavigation (navigationName As String, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanAddNavigation : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.CanAddNavigation : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanAddNavigation (navigationName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanAddNavigation (string navigationName, Type? type, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAddNavigation(string navigationName, class System.Type type, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanAddNavigation(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanAddNavigation (navigationName As String, type As Type, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanAddNavigation : string * Type * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanAddNavigation : string * Type * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanAddNavigation (navigationName, type, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="type">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddOrReplaceNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanAddOrReplaceNavigation (string navigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAddOrReplaceNavigation(string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanAddOrReplaceNavigation(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanAddOrReplaceNavigation (navigationName As String, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanAddOrReplaceNavigation : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.CanAddOrReplaceNavigation : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanAddOrReplaceNavigation (navigationName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddProperty">
      <MemberSignature Language="C#" Value="public virtual bool CanAddProperty (Type propertyType, string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? typeConfigurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAddProperty(class System.Type propertyType, string name, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; typeConfigurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanAddProperty(System.Type,System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanAddProperty (propertyType As Type, name As String, typeConfigurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanAddProperty : Type * string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanAddProperty : Type * string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalEntityTypeBuilder.CanAddProperty (propertyType, name, typeConfigurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="typeConfigurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="name">To be added.</param>
        <param name="typeConfigurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddProperty">
      <MemberSignature Language="C#" Value="protected override bool CanAddProperty (Type? propertyType, string propertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool checkClrProperty, bool skipTypeCheck);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool CanAddProperty(class System.Type propertyType, string propertyName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool checkClrProperty, bool skipTypeCheck) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanAddProperty(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CanAddProperty (propertyType As Type, propertyName As String, configurationSource As ConfigurationSource, checkClrProperty As Boolean, skipTypeCheck As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="override this.CanAddProperty : Type * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool * bool -&gt; bool" Usage="internalEntityTypeBuilder.CanAddProperty (propertyType, propertyName, configurationSource, checkClrProperty, skipTypeCheck)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="checkClrProperty" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="skipTypeCheck" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="checkClrProperty">To be added.</param>
        <param name="skipTypeCheck">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveIndex">
      <MemberSignature Language="C#" Value="public virtual bool CanHaveIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanHaveIndex(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanHaveIndex(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanHaveIndex (propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanHaveIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanHaveIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanHaveIndex (propertyNames, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanHaveNavigation (string navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanHaveNavigation(string navigationName, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanHaveNavigation(System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanHaveNavigation (navigationName As String, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanHaveNavigation : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanHaveNavigation : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalEntityTypeBuilder.CanHaveNavigation (navigationName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanHaveNavigation (string navigationName, Type? type, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanHaveNavigation(string navigationName, class System.Type type, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanHaveNavigation(System.String,System.Type,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanHaveNavigation (navigationName As String, type As Type, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanHaveNavigation : string * Type * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanHaveNavigation : string * Type * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalEntityTypeBuilder.CanHaveNavigation (navigationName, type, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="type">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveProperty">
      <MemberSignature Language="C#" Value="public virtual bool CanHaveProperty (Type? propertyType, string propertyName, System.Reflection.MemberInfo? memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? typeConfigurationSource, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanHaveProperty(class System.Type propertyType, string propertyName, class System.Reflection.MemberInfo memberInfo, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; typeConfigurationSource, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanHaveProperty(System.Type,System.String,System.Reflection.MemberInfo,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanHaveProperty (propertyType As Type, propertyName As String, memberInfo As MemberInfo, typeConfigurationSource As Nullable(Of ConfigurationSource), configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanHaveProperty : Type * string * System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanHaveProperty : Type * string * System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalEntityTypeBuilder.CanHaveProperty (propertyType, propertyName, memberInfo, typeConfigurationSource, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="typeConfigurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="3" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="4" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="memberInfo">To be added.</param>
        <param name="typeConfigurationSource">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveProperty">
      <MemberSignature Language="C#" Value="public virtual bool CanHaveProperty (Type? propertyType, string propertyName, System.Reflection.MemberInfo? memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? typeConfigurationSource, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource, bool checkClrProperty = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanHaveProperty(class System.Type propertyType, string propertyName, class System.Reflection.MemberInfo memberInfo, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; typeConfigurationSource, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource, bool checkClrProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanHaveProperty(System.Type,System.String,System.Reflection.MemberInfo,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanHaveProperty (propertyType As Type, propertyName As String, memberInfo As MemberInfo, typeConfigurationSource As Nullable(Of ConfigurationSource), configurationSource As Nullable(Of ConfigurationSource), Optional checkClrProperty As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanHaveProperty : Type * string * System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * bool -&gt; bool&#xA;override this.CanHaveProperty : Type * string * System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * bool -&gt; bool" Usage="internalEntityTypeBuilder.CanHaveProperty (propertyType, propertyName, memberInfo, typeConfigurationSource, configurationSource, checkClrProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="typeConfigurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="3" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="4" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="checkClrProperty" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="memberInfo">To be added.</param>
        <param name="typeConfigurationSource">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="checkClrProperty">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveServiceProperty">
      <MemberSignature Language="C#" Value="public virtual bool CanHaveServiceProperty (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanHaveServiceProperty(class System.Reflection.MemberInfo memberInfo, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanHaveServiceProperty(System.Reflection.MemberInfo,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanHaveServiceProperty (memberInfo As MemberInfo, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanHaveServiceProperty : System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanHaveServiceProperty : System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalEntityTypeBuilder.CanHaveServiceProperty (memberInfo, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanHaveSkipNavigation (string skipNavigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanHaveSkipNavigation(string skipNavigationName, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanHaveSkipNavigation(System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanHaveSkipNavigation (skipNavigationName As String, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanHaveSkipNavigation : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanHaveSkipNavigation : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalEntityTypeBuilder.CanHaveSkipNavigation (skipNavigationName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanHaveSkipNavigation (string skipNavigationName, Type? type, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanHaveSkipNavigation(string skipNavigationName, class System.Type type, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanHaveSkipNavigation(System.String,System.Type,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanHaveSkipNavigation (skipNavigationName As String, type As Type, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanHaveSkipNavigation : string * Type * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanHaveSkipNavigation : string * Type * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalEntityTypeBuilder.CanHaveSkipNavigation (skipNavigationName, type, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigationName">To be added.</param>
        <param name="type">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanIgnore">
      <MemberSignature Language="C#" Value="public virtual bool CanIgnore (string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanIgnore(string name, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanIgnore(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanIgnore (name As String, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanIgnore : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanIgnore : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanIgnore (name, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanIgnore">
      <MemberSignature Language="C#" Value="protected override bool CanIgnore (string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool shouldThrow);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool CanIgnore(string name, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool shouldThrow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanIgnore(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CanIgnore (name As String, configurationSource As ConfigurationSource, shouldThrow As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="override this.CanIgnore : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; bool" Usage="internalEntityTypeBuilder.CanIgnore (name, configurationSource, shouldThrow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="shouldThrow" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="shouldThrow">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemoveForeignKey">
      <MemberSignature Language="C#" Value="public virtual bool CanRemoveForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanRemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanRemoveForeignKey (foreignKey As ForeignKey, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanRemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanRemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanRemoveForeignKey (foreignKey, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemoveForeignKey">
      <MemberSignature Language="C#" Value="public virtual bool CanRemoveForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanRemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanRemoveForeignKey (foreignKey As ForeignKey, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanRemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.CanRemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanRemoveForeignKey (foreignKey, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemoveIndex">
      <MemberSignature Language="C#" Value="public virtual bool CanRemoveIndex (Microsoft.EntityFrameworkCore.Metadata.Internal.Index index, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRemoveIndex(class Microsoft.EntityFrameworkCore.Metadata.Internal.Index index, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanRemoveIndex(Microsoft.EntityFrameworkCore.Metadata.Internal.Index,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanRemoveIndex (index As Index, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanRemoveIndex : Microsoft.EntityFrameworkCore.Metadata.Internal.Index * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanRemoveIndex : Microsoft.EntityFrameworkCore.Metadata.Internal.Index * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanRemoveIndex (index, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Index" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemoveKey">
      <MemberSignature Language="C#" Value="public virtual bool CanRemoveKey (Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRemoveKey(valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanRemoveKey(Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanRemoveKey (configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanRemoveKey : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanRemoveKey : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanRemoveKey configurationSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemoveKey">
      <MemberSignature Language="C#" Value="public virtual bool CanRemoveKey (Microsoft.EntityFrameworkCore.Metadata.Internal.Key key, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRemoveKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.Key key, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanRemoveKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanRemoveKey (key As Key, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanRemoveKey : Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanRemoveKey : Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanRemoveKey (key, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemoveNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanRemoveNavigation (Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation navigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRemoveNavigation(class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation navigation, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanRemoveNavigation(Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanRemoveNavigation (navigation As Navigation, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanRemoveNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanRemoveNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanRemoveNavigation (navigation, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemoveServiceProperty">
      <MemberSignature Language="C#" Value="public virtual bool CanRemoveServiceProperty (Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty serviceProperty, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRemoveServiceProperty(class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty serviceProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanRemoveServiceProperty(Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanRemoveServiceProperty (serviceProperty As ServiceProperty, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanRemoveServiceProperty : Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanRemoveServiceProperty : Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanRemoveServiceProperty (serviceProperty, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProperty" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="serviceProperty">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemoveSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanRemoveSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation skipNavigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRemoveSkipNavigation(class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation skipNavigation, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanRemoveSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanRemoveSkipNavigation (skipNavigation As SkipNavigation, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanRemoveSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanRemoveSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanRemoveSkipNavigation (skipNavigation, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemoveSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual bool CanRemoveSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation skipNavigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRemoveSkipNavigation(class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation skipNavigation, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanRemoveSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanRemoveSkipNavigation (skipNavigation As SkipNavigation, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanRemoveSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanRemoveSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalEntityTypeBuilder.CanRemoveSkipNavigation (skipNavigation, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetBaseType">
      <MemberSignature Language="C#" Value="public virtual bool CanSetBaseType (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType baseEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetBaseType(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType baseEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetBaseType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetBaseType (baseEntityType As EntityType, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetBaseType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetBaseType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetBaseType (baseEntityType, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual bool CanSetBaseType (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType? baseEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="baseEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual bool CanSetChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetChangeTrackingStrategy(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetChangeTrackingStrategy(System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetChangeTrackingStrategy (changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy), configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetChangeTrackingStrategy : Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetChangeTrackingStrategy : Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetChangeTrackingStrategy (changeTrackingStrategy, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetConstructorBinding">
      <MemberSignature Language="C#" Value="public virtual bool CanSetConstructorBinding (Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? constructorBinding, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetConstructorBinding(class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetConstructorBinding(Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetConstructorBinding (constructorBinding As InstantiationBinding, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetConstructorBinding : Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetConstructorBinding : Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetConstructorBinding (constructorBinding, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="constructorBinding">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetDefiningQuery">
      <MemberSignature Language="C#" Value="public virtual bool CanSetDefiningQuery (System.Linq.Expressions.LambdaExpression query, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetDefiningQuery(class System.Linq.Expressions.LambdaExpression query, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetDefiningQuery(System.Linq.Expressions.LambdaExpression,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetDefiningQuery (query As LambdaExpression, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetDefiningQuery : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetDefiningQuery : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetDefiningQuery (query, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual bool CanSetDefiningQuery (System.Linq.Expressions.LambdaExpression? query, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetDiscriminator">
      <MemberSignature Language="C#" Value="public virtual bool CanSetDiscriminator (string name, Type type, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetDiscriminator(string name, class System.Type type, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetDiscriminator(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetDiscriminator (name As String, type As Type, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetDiscriminator : string * Type * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetDiscriminator : string * Type * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetDiscriminator (name, type, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual bool CanSetDiscriminator (string? name, Type? type, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsOwned">
      <MemberSignature Language="C#" Value="public virtual bool CanSetIsOwned (bool owned, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsOwned(bool owned, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetIsOwned(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetIsOwned (owned As Boolean, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsOwned : bool * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetIsOwned : bool * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetIsOwned (owned, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owned" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="owned">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetPrimaryKey">
      <MemberSignature Language="C#" Value="public virtual bool CanSetPrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetPrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetPrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetPrimaryKey (properties As IReadOnlyList(Of IConventionProperty), configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetPrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetPrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetPrimaryKey (properties, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual bool CanSetPrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;? properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetPrimaryKey">
      <MemberSignature Language="C#" Value="public virtual bool CanSetPrimaryKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetPrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetPrimaryKey(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetPrimaryKey (propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetPrimaryKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetPrimaryKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetPrimaryKey (propertyNames, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual bool CanSetPropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetPropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetPropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetPropertyAccessMode (propertyAccessMode, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetQueryFilter">
      <MemberSignature Language="C#" Value="public virtual bool CanSetQueryFilter (System.Linq.Expressions.LambdaExpression filter, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetQueryFilter(class System.Linq.Expressions.LambdaExpression filter, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetQueryFilter(System.Linq.Expressions.LambdaExpression,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetQueryFilter (filter As LambdaExpression, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetQueryFilter : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetQueryFilter : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetQueryFilter (filter, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual bool CanSetQueryFilter (System.Linq.Expressions.LambdaExpression? filter, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetServiceOnlyConstructorBinding">
      <MemberSignature Language="C#" Value="public virtual bool CanSetServiceOnlyConstructorBinding (Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? constructorBinding, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetServiceOnlyConstructorBinding(class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CanSetServiceOnlyConstructorBinding(Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetServiceOnlyConstructorBinding (constructorBinding As InstantiationBinding, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetServiceOnlyConstructorBinding : Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetServiceOnlyConstructorBinding : Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.CanSetServiceOnlyConstructorBinding (constructorBinding, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="constructorBinding">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder CreateForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string navigationToPrincipalName, bool? isRequired, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder CreateForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string navigationToPrincipalName, valuetype System.Nullable`1&lt;bool&gt; isRequired, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CreateForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,System.String,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateForeignKey (principalEntityTypeBuilder As InternalEntityTypeBuilder, dependentProperties As IReadOnlyList(Of Property), principalKey As Key, navigationToPrincipalName As String, isRequired As Nullable(Of Boolean), configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member CreateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.CreateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.CreateForeignKey (principalEntityTypeBuilder, dependentProperties, principalKey, navigationToPrincipalName, isRequired, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="dependentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="navigationToPrincipalName" Type="System.String" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="isRequired" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="5" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeBuilder">To be added.</param>
        <param name="dependentProperties">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="navigationToPrincipalName">To be added.</param>
        <param name="isRequired">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder CreateForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string navigationToPrincipalName, bool? isRequired, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder CreateForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string navigationToPrincipalName, valuetype System.Nullable`1&lt;bool&gt; isRequired, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CreateForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,System.String,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateForeignKey (principalEntityTypeBuilder As InternalEntityTypeBuilder, dependentProperties As IReadOnlyList(Of Property), principalKey As Key, navigationToPrincipalName As String, isRequired As Nullable(Of Boolean), configurationSource As ConfigurationSource, runConventions As Boolean) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member CreateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.CreateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.CreateForeignKey (principalEntityTypeBuilder, dependentProperties, principalKey, navigationToPrincipalName, isRequired, configurationSource, runConventions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="dependentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="navigationToPrincipalName" Type="System.String" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="isRequired" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="5" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="runConventions" Type="System.Boolean" Index="6" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeBuilder">To be added.</param>
        <param name="dependentProperties">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="navigationToPrincipalName">To be added.</param>
        <param name="isRequired">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="runConventions">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder CreateForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string navigationToPrincipalName, bool? isRequired, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder CreateForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string navigationToPrincipalName, valuetype System.Nullable`1&lt;bool&gt; isRequired, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CreateForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,System.String,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateForeignKey (principalEntityTypeBuilder As InternalEntityTypeBuilder, dependentProperties As IReadOnlyList(Of Property), principalKey As Key, navigationToPrincipalName As String, isRequired As Nullable(Of Boolean), configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member CreateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.CreateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.CreateForeignKey (principalEntityTypeBuilder, dependentProperties, principalKey, navigationToPrincipalName, isRequired, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder CreateForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string propertyBaseName, bool? required, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder CreateForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string propertyBaseName, valuetype System.Nullable`1&lt;bool&gt; required, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateForeignKey (principalEntityTypeBuilder As InternalEntityTypeBuilder, dependentProperties As IReadOnlyList(Of Property), principalKey As Key, propertyBaseName As String, required As Nullable(Of Boolean), configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member CreateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.CreateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.CreateForeignKey (principalEntityTypeBuilder, dependentProperties, principalKey, propertyBaseName, required, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? CreateForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key? principalKey, string? propertyBaseName, bool? required, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="dependentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToPrincipalName" Type="System.String" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="propertyBaseName" Type="System.String" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="isRequired" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="5" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeBuilder">To be added.</param>
        <param name="dependentProperties">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="navigationToPrincipalName">To be added.</param>
        <param name="propertyBaseName">To be added.</param>
        <param name="isRequired">To be added.</param>
        <param name="required">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUniqueProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; CreateUniqueProperties (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, System.Collections.Generic.IReadOnlyList&lt;Type&gt; propertyTypes, bool isRequired);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; CreateUniqueProperties(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Type&gt; propertyTypes, bool isRequired) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CreateUniqueProperties(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.Type},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateUniqueProperties (propertyNames As IReadOnlyList(Of String), propertyTypes As IReadOnlyList(Of Type), isRequired As Boolean) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member CreateUniqueProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; * System.Collections.Generic.IReadOnlyList&lt;Type&gt; * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.CreateUniqueProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; * System.Collections.Generic.IReadOnlyList&lt;Type&gt; * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.CreateUniqueProperties (propertyNames, propertyTypes, isRequired)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="propertyTypes" Type="System.Collections.Generic.IReadOnlyList&lt;System.Type&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="isRequired" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="propertyTypes">To be added.</param>
        <param name="isRequired">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUniqueProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; CreateUniqueProperties (System.Collections.Generic.IReadOnlyList&lt;Type&gt; propertyTypes, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool isRequired);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; CreateUniqueProperties(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Type&gt; propertyTypes, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool isRequired) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CreateUniqueProperties(System.Collections.Generic.IReadOnlyList{System.Type},System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateUniqueProperties (propertyTypes As IReadOnlyList(Of Type), propertyNames As IReadOnlyList(Of String), isRequired As Boolean) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member CreateUniqueProperties : System.Collections.Generic.IReadOnlyList&lt;Type&gt; * System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.CreateUniqueProperties : System.Collections.Generic.IReadOnlyList&lt;Type&gt; * System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.CreateUniqueProperties (propertyTypes, propertyNames, isRequired)" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? CreateUniqueProperties (System.Collections.Generic.IReadOnlyList&lt;Type&gt; propertyTypes, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool isRequired);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyTypes" Type="System.Collections.Generic.IReadOnlyList&lt;System.Type&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="isRequired" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyTypes">To be added.</param>
        <param name="propertyNames">To be added.</param>
        <param name="isRequired">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUniqueProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.Property CreateUniqueProperty (string propertyName, Type propertyType, bool isRequired);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.Property CreateUniqueProperty(string propertyName, class System.Type propertyType, bool isRequired) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CreateUniqueProperty(System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateUniqueProperty (propertyName As String, propertyType As Type, isRequired As Boolean) As Property" />
      <MemberSignature Language="F#" Value="abstract member CreateUniqueProperty : string * Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Property&#xA;override this.CreateUniqueProperty : string * Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Property" Usage="internalEntityTypeBuilder.CreateUniqueProperty (propertyName, propertyType, isRequired)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Property</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="propertyType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="isRequired" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="propertyType">To be added.</param>
        <param name="isRequired">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUniqueProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder CreateUniqueProperty (Type propertyType, string propertyName, bool required);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder CreateUniqueProperty(class System.Type propertyType, string propertyName, bool required) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.CreateUniqueProperty(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateUniqueProperty (propertyType As Type, propertyName As String, required As Boolean) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member CreateUniqueProperty : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.CreateUniqueProperty : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.CreateUniqueProperty (propertyType, propertyName, required)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder? CreateUniqueProperty (Type propertyType, string propertyName, bool required);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="required" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="required">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachAllMembers">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Snapshot DetachAllMembers (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType/Snapshot DetachAllMembers(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachAllMembers(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DetachAllMembers (entityType As EntityType) As EntityType.Snapshot" />
      <MemberSignature Language="F#" Value="static member DetachAllMembers : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Snapshot" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachAllMembers entityType" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType.Snapshot? DetachAllMembers (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType entityType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType+Snapshot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachIndex">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder DetachIndex (Microsoft.EntityFrameworkCore.Metadata.Internal.Index indexToDetach);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder DetachIndex(class Microsoft.EntityFrameworkCore.Metadata.Internal.Index indexToDetach) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachIndex(Microsoft.EntityFrameworkCore.Metadata.Internal.Index)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DetachIndex (indexToDetach As Index) As InternalIndexBuilder" />
      <MemberSignature Language="F#" Value="static member DetachIndex : Microsoft.EntityFrameworkCore.Metadata.Internal.Index -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachIndex indexToDetach" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexToDetach" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Index" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="indexToDetach">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachIndexes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&gt; DetachIndexes (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Index&gt; indexesToDetach);" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&gt; DetachIndexes(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Index&gt; indexesToDetach) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachIndexes(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.Internal.Index})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DetachIndexes (indexesToDetach As IEnumerable(Of Index)) As List(Of InternalIndexBuilder)" />
      <MemberSignature Language="F#" Value="static member DetachIndexes : seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Index&gt; -&gt; System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachIndexes indexesToDetach" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&gt;? DetachIndexes (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Index&gt; indexesToDetach);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexesToDetach" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Index&gt;" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="indexesToDetach">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachKey">
      <MemberSignature Language="C#" Value="public static (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource?) DetachKey (Microsoft.EntityFrameworkCore.Metadata.Internal.Key keyToDetach);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;&gt; DetachKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.Key keyToDetach) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Key)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DetachKey (keyToDetach As Key) As ValueTuple(Of InternalKeyBuilder, Nullable(Of ConfigurationSource))" />
      <MemberSignature Language="F#" Value="static member DetachKey : Microsoft.EntityFrameworkCore.Metadata.Internal.Key -&gt; ValueTuple&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachKey keyToDetach" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyToDetach" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keyToDetach">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource?)&gt; DetachKeys (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Key&gt; keysToDetach);" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&gt;&gt; DetachKeys(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Key&gt; keysToDetach) cil managed" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachKeys(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.Internal.Key})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DetachKeys (keysToDetach As IEnumerable(Of Key)) As List(Of ValueTuple(Of InternalKeyBuilder, Nullable(Of ConfigurationSource)))" />
      <MemberSignature Language="F#" Value="static member DetachKeys : seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Key&gt; -&gt; System.Collections.Generic.List&lt;ValueTuple&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachKeys keysToDetach" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource?)&gt; DetachKeys (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Key&gt; keysToDetach);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;&gt;&gt; DetachKeys(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Key&gt; keysToDetach) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="static member DetachKeys : seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Key&gt; -&gt; System.Collections.Generic.List&lt;ValueTuple&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachKeys keysToDetach" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource?)&gt;? DetachKeys (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Key&gt; keysToDetach);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.2">System.Collections.Generic.List&lt;System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&gt;&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Collections.Generic.List&lt;System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder,System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keysToDetach" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Key&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-2.2;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keysToDetach">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachProperties">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot DetachProperties (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; propertiesToDetach);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot DetachProperties(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; propertiesToDetach) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DetachProperties (propertiesToDetach As IReadOnlyList(Of Property)) As PropertiesSnapshot" />
      <MemberSignature Language="F#" Value="static member DetachProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachProperties propertiesToDetach" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot? DetachProperties (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; propertiesToDetach);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertiesToDetach" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertiesToDetach">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachRelationship">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot DetachRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot DetachRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DetachRelationship (foreignKey As ForeignKey) As RelationshipSnapshot" />
      <MemberSignature Language="F#" Value="static member DetachRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachRelationship foreignKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachRelationship">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot DetachRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, bool includeDefinedType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot DetachRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, bool includeDefinedType) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DetachRelationship (foreignKey As ForeignKey, includeDefinedType As Boolean) As RelationshipSnapshot" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member DetachRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachRelationship (foreignKey, includeDefinedType)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot DetachRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, bool includeOwnedSharedType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot DetachRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, bool includeOwnedSharedType) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DetachRelationship (foreignKey As ForeignKey, includeOwnedSharedType As Boolean) As RelationshipSnapshot" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="static member DetachRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DetachRelationship (foreignKey, includeOwnedSharedType)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="includeDefinedType" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="includeOwnedSharedType" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="includeDefinedType">To be added.</param>
        <param name="includeOwnedSharedType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscriminatorBuilder">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder DiscriminatorBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder discriminatorPropertyBuilder, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder DiscriminatorBuilder(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder discriminatorPropertyBuilder, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.DiscriminatorBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DiscriminatorBuilder (discriminatorPropertyBuilder As InternalPropertyBuilder, configurationSource As ConfigurationSource) As DiscriminatorBuilder" />
      <MemberSignature Language="F#" Value="abstract member DiscriminatorBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&#xA;override this.DiscriminatorBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="internalEntityTypeBuilder.DiscriminatorBuilder (discriminatorPropertyBuilder, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="discriminatorPropertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="discriminatorPropertyBuilder">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActualProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetActualProperties (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetActualProperties(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetActualProperties(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActualProperties (properties As IEnumerable(Of Property), configurationSource As Nullable(Of ConfigurationSource)) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member GetActualProperties : seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.GetActualProperties : seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.GetActualProperties (properties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActualProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetActualProperties (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetActualProperties(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetActualProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActualProperties (properties As IReadOnlyList(Of Property), configurationSource As Nullable(Of ConfigurationSource)) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member GetActualProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.GetActualProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.GetActualProperties (properties, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? GetActualProperties (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActualProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetActualProperties (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetActualProperties(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetActualProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActualProperties (properties As IReadOnlyList(Of Property), configurationSource As Nullable(Of ConfigurationSource)) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member GetActualProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.GetActualProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.GetActualProperties (properties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateDiscriminatorProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder GetOrCreateDiscriminatorProperty (Type type, string name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder GetOrCreateDiscriminatorProperty(class System.Type type, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetOrCreateDiscriminatorProperty(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateDiscriminatorProperty (type As Type, name As String, fromDataAnnotation As Boolean) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateDiscriminatorProperty : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.GetOrCreateDiscriminatorProperty : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.GetOrCreateDiscriminatorProperty (type, name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties (System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; clrProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; clrProperties, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateProperties (clrProperties As IEnumerable(Of MemberInfo), configurationSource As ConfigurationSource) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateProperties : seq&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.GetOrCreateProperties : seq&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.GetOrCreateProperties (clrProperties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrProperties" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="clrProperties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties (System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; clrMembers, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateProperties (clrMembers As IEnumerable(Of MemberInfo), configurationSource As Nullable(Of ConfigurationSource)) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateProperties : seq&lt;System.Reflection.MemberInfo&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.GetOrCreateProperties : seq&lt;System.Reflection.MemberInfo&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.GetOrCreateProperties (clrMembers, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? GetOrCreateProperties (System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;? clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrMembers" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="clrMembers">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties (System.Collections.Generic.IEnumerable&lt;System.Reflection.PropertyInfo&gt; clrProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.PropertyInfo&gt; clrProperties, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateProperties (clrProperties As IEnumerable(Of PropertyInfo), configurationSource As ConfigurationSource) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateProperties : seq&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.GetOrCreateProperties : seq&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.GetOrCreateProperties (clrProperties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrProperties" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.PropertyInfo&gt;" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="clrProperties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties (System.Collections.Generic.IEnumerable&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; referencedProperties = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties(class System.Collections.Generic.IEnumerable`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; referencedProperties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IEnumerable{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateProperties (propertyNames As IEnumerable(Of String), configurationSource As ConfigurationSource, Optional referencedProperties As IEnumerable(Of Property) = Nothing) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateProperties : seq&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.GetOrCreateProperties : seq&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.GetOrCreateProperties (propertyNames, configurationSource, referencedProperties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="referencedProperties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="referencedProperties">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; referencedProperties = default, bool required = false, bool useDefaultType = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; referencedProperties, bool required, bool useDefaultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateProperties (propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource, Optional referencedProperties As IReadOnlyList(Of Property) = Nothing, Optional required As Boolean = false, Optional useDefaultType As Boolean = false) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.GetOrCreateProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.GetOrCreateProperties (propertyNames, configurationSource, referencedProperties, required, useDefaultType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1" />
        <Parameter Name="referencedProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1" />
        <Parameter Name="required" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1" />
        <Parameter Name="useDefaultType" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-2.0;efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="referencedProperties">To be added.</param>
        <param name="required">To be added.</param>
        <param name="useDefaultType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; referencedProperties = default, bool required = false, bool useDefaultType = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; referencedProperties, bool required, bool useDefaultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IReadOnlyList{System.String},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateProperties (propertyNames As IReadOnlyList(Of String), configurationSource As Nullable(Of ConfigurationSource), Optional referencedProperties As IReadOnlyList(Of Property) = Nothing, Optional required As Boolean = false, Optional useDefaultType As Boolean = false) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.GetOrCreateProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.GetOrCreateProperties (propertyNames, configurationSource, referencedProperties, required, useDefaultType)" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? GetOrCreateProperties (System.Collections.Generic.IReadOnlyList&lt;string&gt;? propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? referencedProperties = default, bool required = false, bool useDefaultType = false);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="referencedProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="required" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="useDefaultType" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="referencedProperties">To be added.</param>
        <param name="required">To be added.</param>
        <param name="useDefaultType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? configurationSource, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; referencedProperties = default, bool required = false, bool useDefaultType = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; GetOrCreateProperties(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; configurationSource, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; referencedProperties, bool required, bool useDefaultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IReadOnlyList{System.String},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateProperties (propertyNames As IReadOnlyList(Of String), configurationSource As Nullable(Of ConfigurationSource), Optional referencedProperties As IReadOnlyList(Of Property) = Nothing, Optional required As Boolean = false, Optional useDefaultType As Boolean = false) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.GetOrCreateProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * bool * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.GetOrCreateProperties (propertyNames, configurationSource, referencedProperties, required, useDefaultType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="referencedProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="2" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="required" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="useDefaultType" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="referencedProperties">To be added.</param>
        <param name="required">To be added.</param>
        <param name="useDefaultType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetEntityTypeBuilder">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder GetTargetEntityTypeBuilder (Type targetClrType, System.Reflection.MemberInfo navigationInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder GetTargetEntityTypeBuilder(class System.Type targetClrType, class System.Reflection.MemberInfo navigationInfo, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetTargetEntityTypeBuilder(System.Type,System.Reflection.MemberInfo,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTargetEntityTypeBuilder (targetClrType As Type, navigationInfo As MemberInfo, configurationSource As Nullable(Of ConfigurationSource)) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member GetTargetEntityTypeBuilder : Type * System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.GetTargetEntityTypeBuilder : Type * System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.GetTargetEntityTypeBuilder (targetClrType, navigationInfo, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetClrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="navigationInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="targetClrType">To be added.</param>
        <param name="navigationInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetEntityTypeBuilder">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? GetTargetEntityTypeBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity targetEntityType, Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource, bool? targetShouldBeOwned = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder GetTargetEntityTypeBuilder(valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity targetEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource, valuetype System.Nullable`1&lt;bool&gt; targetShouldBeOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetTargetEntityTypeBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity,Microsoft.EntityFrameworkCore.Metadata.MemberIdentity,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTargetEntityTypeBuilder (targetEntityType As TypeIdentity, navigation As MemberIdentity, configurationSource As Nullable(Of ConfigurationSource), Optional targetShouldBeOwned As Nullable(Of Boolean) = Nothing) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member GetTargetEntityTypeBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity * Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.GetTargetEntityTypeBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity * Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.GetTargetEntityTypeBuilder (targetEntityType, navigation, configurationSource, targetShouldBeOwned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.MemberIdentity" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="targetShouldBeOwned" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="targetShouldBeOwned">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetEntityTypeBuilder">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? GetTargetEntityTypeBuilder (Type targetClrType, System.Reflection.MemberInfo navigationInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource, bool? targetShouldBeOwned = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder GetTargetEntityTypeBuilder(class System.Type targetClrType, class System.Reflection.MemberInfo navigationInfo, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource, valuetype System.Nullable`1&lt;bool&gt; targetShouldBeOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.GetTargetEntityTypeBuilder(System.Type,System.Reflection.MemberInfo,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTargetEntityTypeBuilder (targetClrType As Type, navigationInfo As MemberInfo, configurationSource As Nullable(Of ConfigurationSource), Optional targetShouldBeOwned As Nullable(Of Boolean) = Nothing) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member GetTargetEntityTypeBuilder : Type * System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.GetTargetEntityTypeBuilder : Type * System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.GetTargetEntityTypeBuilder (targetClrType, navigationInfo, configurationSource, targetShouldBeOwned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetClrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="navigationInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="targetShouldBeOwned" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetClrType">To be added.</param>
        <param name="navigationInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="targetShouldBeOwned">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType baseEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType baseEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasBaseType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType (baseEntityType As EntityType, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasBaseType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasBaseType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasBaseType (baseEntityType, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasBaseType (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType? baseEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="baseEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType baseEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType baseEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasBaseType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType (baseEntityType As EntityType, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasBaseType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasBaseType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasBaseType (baseEntityType, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="baseEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType (string baseEntityTypeName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType(string baseEntityTypeName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasBaseType(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType (baseEntityTypeName As String, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasBaseType : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasBaseType : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasBaseType (baseEntityTypeName, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasBaseType (string? baseEntityTypeName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseEntityTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="baseEntityTypeName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType (string baseEntityTypeName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType(string baseEntityTypeName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasBaseType(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType (baseEntityTypeName As String, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasBaseType : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasBaseType : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasBaseType (baseEntityTypeName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseEntityTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="baseEntityTypeName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType (Type baseEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType(class System.Type baseEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasBaseType(System.Type,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType (baseEntityType As Type, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasBaseType : Type * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasBaseType : Type * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasBaseType (baseEntityType, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasBaseType (Type? baseEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="baseEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType (Type baseEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasBaseType(class System.Type baseEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasBaseType(System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType (baseEntityType As Type, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasBaseType : Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasBaseType : Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasBaseType (baseEntityType, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="baseEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasChangeTrackingStrategy(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasChangeTrackingStrategy(System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasChangeTrackingStrategy (changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy), configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasChangeTrackingStrategy : Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasChangeTrackingStrategy : Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasChangeTrackingStrategy (changeTrackingStrategy, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConstructorBinding">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? HasConstructorBinding (Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? constructorBinding, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder HasConstructorBinding(class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasConstructorBinding(Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasConstructorBinding (constructorBinding As InstantiationBinding, configurationSource As ConfigurationSource) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConstructorBinding : Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.HasConstructorBinding : Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasConstructorBinding (constructorBinding, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="constructorBinding">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasData (System.Collections.Generic.IEnumerable&lt;object&gt; data, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasData(class System.Collections.Generic.IEnumerable`1&lt;object&gt; data, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasData(System.Collections.Generic.IEnumerable{System.Object},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasData (data As IEnumerable(Of Object), configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasData : seq&lt;obj&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasData : seq&lt;obj&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasData (data, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDefiningQuery">
      <MemberSignature Language="C#" Value="public virtual void HasDefiningQuery (System.Linq.Expressions.LambdaExpression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HasDefiningQuery(class System.Linq.Expressions.LambdaExpression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasDefiningQuery(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub HasDefiningQuery (query As LambdaExpression)" />
      <MemberSignature Language="F#" Value="abstract member HasDefiningQuery : System.Linq.Expressions.LambdaExpression -&gt; unit&#xA;override this.HasDefiningQuery : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="internalEntityTypeBuilder.HasDefiningQuery query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDefiningQuery">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasDefiningQuery (System.Linq.Expressions.LambdaExpression query, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasDefiningQuery(class System.Linq.Expressions.LambdaExpression query, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasDefiningQuery(System.Linq.Expressions.LambdaExpression,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasDefiningQuery (query As LambdaExpression, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasDefiningQuery : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasDefiningQuery : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasDefiningQuery (query, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasDefiningQuery (System.Linq.Expressions.LambdaExpression? query, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasDiscriminator (configurationSource As ConfigurationSource) As DiscriminatorBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&#xA;override this.HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="internalEntityTypeBuilder.HasDiscriminator configurationSource" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder? HasDiscriminator (Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(class System.Reflection.MemberInfo memberInfo, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasDiscriminator(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasDiscriminator (memberInfo As MemberInfo, configurationSource As ConfigurationSource) As DiscriminatorBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasDiscriminator : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&#xA;override this.HasDiscriminator : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="internalEntityTypeBuilder.HasDiscriminator (memberInfo, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder? HasDiscriminator (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (string name, Type type, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(string name, class System.Type type, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasDiscriminator(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasDiscriminator (name As String, type As Type, configurationSource As ConfigurationSource) As DiscriminatorBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasDiscriminator : string * Type * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&#xA;override this.HasDiscriminator : string * Type * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="internalEntityTypeBuilder.HasDiscriminator (name, type, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder? HasDiscriminator (string? name, Type? type, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (principalEntityTypeBuilder As InternalEntityTypeBuilder, dependentProperties As IReadOnlyList(Of Property), configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasForeignKey (principalEntityTypeBuilder, dependentProperties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="dependentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeBuilder">To be added.</param>
        <param name="dependentProperties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey (string principalEntityTypeName, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey(string principalEntityTypeName, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(System.String,System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (principalEntityTypeName As String, propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKey : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasForeignKey : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasForeignKey (principalEntityTypeName, propertyNames, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeName">To be added.</param>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey (Type principalClrType, System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; clrProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey(class System.Type principalClrType, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; clrProperties, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(System.Type,System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (principalClrType As Type, clrProperties As IReadOnlyList(Of PropertyInfo), configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKey : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasForeignKey : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasForeignKey (principalClrType, clrProperties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalClrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="clrProperties" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalClrType">To be added.</param>
        <param name="clrProperties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (principalEntityTypeBuilder As InternalEntityTypeBuilder, dependentProperties As IReadOnlyList(Of Property), principalKey As Key, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasForeignKey (principalEntityTypeBuilder, dependentProperties, principalKey, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="dependentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeBuilder">To be added.</param>
        <param name="dependentProperties">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey (string principalEntityTypeName, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey(string principalEntityTypeName, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(System.String,System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (principalEntityTypeName As String, propertyNames As IReadOnlyList(Of String), principalKey As Key, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKey : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasForeignKey : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasForeignKey (principalEntityTypeName, propertyNames, principalKey, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeName">To be added.</param>
        <param name="propertyNames">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey (Type principalClrType, System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; clrProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasForeignKey(class System.Type principalClrType, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; clrProperties, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasForeignKey(System.Type,System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (principalClrType As Type, clrProperties As IReadOnlyList(Of PropertyInfo), principalKey As Key, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKey : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasForeignKey : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasForeignKey (principalClrType, clrProperties, principalKey, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalClrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="clrProperties" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalClrType">To be added.</param>
        <param name="clrProperties">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (properties As IReadOnlyList(Of Property), configurationSource As ConfigurationSource) As InternalIndexBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&#xA;override this.HasIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" Usage="internalEntityTypeBuilder.HasIndex (properties, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder? HasIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (properties As IReadOnlyList(Of Property), configurationSource As ConfigurationSource) As InternalIndexBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&#xA;override this.HasIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" Usage="internalEntityTypeBuilder.HasIndex (properties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.MemberInfo&gt; clrMembers, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{System.Reflection.MemberInfo},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (clrMembers As IReadOnlyList(Of MemberInfo), configurationSource As ConfigurationSource) As InternalIndexBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasIndex : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&#xA;override this.HasIndex : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" Usage="internalEntityTypeBuilder.HasIndex (clrMembers, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder? HasIndex (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrMembers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="clrMembers">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; clrProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; clrProperties, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (clrProperties As IReadOnlyList(Of PropertyInfo), configurationSource As ConfigurationSource) As InternalIndexBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasIndex : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&#xA;override this.HasIndex : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" Usage="internalEntityTypeBuilder.HasIndex (clrProperties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrProperties" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="clrProperties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As InternalIndexBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&#xA;override this.HasIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" Usage="internalEntityTypeBuilder.HasIndex (propertyNames, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder? HasIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As InternalIndexBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&#xA;override this.HasIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" Usage="internalEntityTypeBuilder.HasIndex (propertyNames, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, string name, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (properties As IReadOnlyList(Of Property), name As String, configurationSource As ConfigurationSource) As InternalIndexBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&#xA;override this.HasIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" Usage="internalEntityTypeBuilder.HasIndex (properties, name, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder? HasIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? properties, string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.MemberInfo&gt; clrMembers, string name, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{System.Reflection.MemberInfo},System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (clrMembers As IReadOnlyList(Of MemberInfo), name As String, configurationSource As ConfigurationSource) As InternalIndexBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasIndex : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&#xA;override this.HasIndex : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" Usage="internalEntityTypeBuilder.HasIndex (clrMembers, name, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder? HasIndex (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrMembers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="clrMembers">To be added.</param>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, string name, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{System.String},System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (propertyNames As IReadOnlyList(Of String), name As String, configurationSource As ConfigurationSource) As InternalIndexBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder&#xA;override this.HasIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder" Usage="internalEntityTypeBuilder.HasIndex (propertyNames, name, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder? HasIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasKey (properties As IReadOnlyList(Of Property), configurationSource As Nullable(Of ConfigurationSource)) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.HasKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.HasKey (properties, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder? HasKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasKey (properties As IReadOnlyList(Of Property), configurationSource As Nullable(Of ConfigurationSource)) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.HasKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.HasKey (properties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; clrProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; clrProperties, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasKey(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasKey (clrProperties As IReadOnlyList(Of PropertyInfo), configurationSource As ConfigurationSource) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasKey : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.HasKey : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.HasKey (clrProperties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrProperties" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="clrProperties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasKey(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasKey (propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.HasKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.HasKey (propertyNames, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder? HasKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasKey(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasKey (propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.HasKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.HasKey (propertyNames, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrProperties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.MemberInfo&gt; clrProperties, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasKey(System.Collections.Generic.IReadOnlyList{System.Reflection.MemberInfo},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasKey (clrProperties As IReadOnlyList(Of MemberInfo), configurationSource As ConfigurationSource) As InternalKeyBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasKey : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.HasKey : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.HasKey (clrProperties, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder HasKey(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.MemberInfo&gt; clrMembers, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasKey (clrMembers As IReadOnlyList(Of MemberInfo), configurationSource As ConfigurationSource) As InternalKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasKey : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.HasKey : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.HasKey (clrMembers, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder? HasKey (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrProperties" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="clrMembers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="clrProperties">To be added.</param>
        <param name="clrMembers">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoDeclaredDiscriminator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoDeclaredDiscriminator (Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoDeclaredDiscriminator(valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasNoDeclaredDiscriminator(Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoDeclaredDiscriminator (configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoDeclaredDiscriminator : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasNoDeclaredDiscriminator : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasNoDeclaredDiscriminator configurationSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="configurationSource">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoDiscriminator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoDiscriminator (Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoDiscriminator(valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasNoDiscriminator(Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoDiscriminator (configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoDiscriminator : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasNoDiscriminator : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasNoDiscriminator configurationSource" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasNoDiscriminator (Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoIndex (Microsoft.EntityFrameworkCore.Metadata.Internal.Index index, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoIndex(class Microsoft.EntityFrameworkCore.Metadata.Internal.Index index, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasNoIndex(Microsoft.EntityFrameworkCore.Metadata.Internal.Index,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoIndex (index As Index, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoIndex : Microsoft.EntityFrameworkCore.Metadata.Internal.Index * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasNoIndex : Microsoft.EntityFrameworkCore.Metadata.Internal.Index * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasNoIndex (index, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasNoIndex (Microsoft.EntityFrameworkCore.Metadata.Internal.Index index, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Index" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoKey (Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoKey(valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasNoKey(Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoKey (configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoKey : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasNoKey : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasNoKey configurationSource" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasNoKey (Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoKey (Microsoft.EntityFrameworkCore.Metadata.Internal.Key key, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.Key key, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasNoKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoKey (key As Key, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoKey : Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasNoKey : Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasNoKey (key, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasNoKey (Microsoft.EntityFrameworkCore.Metadata.Internal.Key key, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasNoNavigation (Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation navigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoNavigation(class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation navigation, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasNoNavigation(Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoNavigation (navigation As Navigation, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasNoNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasNoNavigation (navigation, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasNoRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoRelationship (foreignKey As ForeignKey, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasNoRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasNoRelationship (foreignKey, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasNoRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoServiceProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasNoServiceProperty (Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty serviceProperty, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoServiceProperty(class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty serviceProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasNoServiceProperty(Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoServiceProperty (serviceProperty As ServiceProperty, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoServiceProperty : Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasNoServiceProperty : Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasNoServiceProperty (serviceProperty, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProperty" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="serviceProperty">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation skipNavigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasNoSkipNavigation(class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation skipNavigation, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasNoSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoSkipNavigation (skipNavigation As SkipNavigation, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasNoSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasNoSkipNavigation (skipNavigation, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasNoSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation skipNavigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOwnership">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership (in Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity typeIdentity, Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership([in]valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity typeIdentity, valuetype Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasOwnership(Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity@|System.Runtime.InteropServices.InAttribute,Microsoft.EntityFrameworkCore.Metadata.MemberIdentity,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (typeIdentity As TypeIdentity, navigation As MemberIdentity, configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : TypeIdentity * Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasOwnership : TypeIdentity * Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasOwnership (typeIdentity, navigation, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasOwnership (in Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity? typeIdentity, Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentity" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.MemberIdentity" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="typeIdentity">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOwnership">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOwnership (string targetEntityTypeName, string navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOwnership(string targetEntityTypeName, string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasOwnership(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityTypeName As String, navigationName As String, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasOwnership : string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityTypeName, navigationName, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership (string targetEntityTypeName, string navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership(string targetEntityTypeName, string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityTypeName As String, navigationName As String, configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasOwnership : string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityTypeName, navigationName, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasOwnership (string targetEntityTypeName, string navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeName">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOwnership">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership (Type targetEntityType, Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership(class System.Type targetEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasOwnership(System.Type,Microsoft.EntityFrameworkCore.Metadata.MemberIdentity,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityType As Type, navigation As MemberIdentity, configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : Type * Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasOwnership : Type * Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityType, navigation, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasOwnership (Type targetEntityType, Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.MemberIdentity" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOwnership">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOwnership (Type targetEntityType, string navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOwnership(class System.Type targetEntityType, string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasOwnership(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityType As Type, navigationName As String, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : Type * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasOwnership : Type * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityType, navigationName, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership (Type targetEntityType, string navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership(class System.Type targetEntityType, string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityType As Type, navigationName As String, configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : Type * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasOwnership : Type * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityType, navigationName, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasOwnership (Type targetEntityType, string navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOwnership">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigationProperty, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOwnership(class System.Type targetEntityType, class System.Reflection.MemberInfo navigationProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasOwnership(System.Type,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityType As Type, navigationProperty As MemberInfo, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : Type * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasOwnership : Type * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityType, navigationProperty, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigationMember, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership(class System.Type targetEntityType, class System.Reflection.MemberInfo navigationMember, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityType As Type, navigationMember As MemberInfo, configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : Type * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasOwnership : Type * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityType, navigationMember, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigationMember, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationProperty" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigationMember" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationProperty">To be added.</param>
        <param name="navigationMember">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOwnership">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOwnership (Type targetEntityType, string navigationPropertyName, string inversePropertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOwnership(class System.Type targetEntityType, string navigationPropertyName, string inversePropertyName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasOwnership(System.Type,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityType As Type, navigationPropertyName As String, inversePropertyName As String, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : Type * string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasOwnership : Type * string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityType, navigationPropertyName, inversePropertyName, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership (Type targetEntityType, string navigationPropertyName, string inversePropertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership(class System.Type targetEntityType, string navigationPropertyName, string inversePropertyName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityType As Type, navigationPropertyName As String, inversePropertyName As String, configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : Type * string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasOwnership : Type * string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityType, navigationPropertyName, inversePropertyName, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasOwnership (Type targetEntityType, string navigationPropertyName, string? inversePropertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationPropertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inversePropertyName" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationPropertyName">To be added.</param>
        <param name="inversePropertyName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOwnership">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigationProperty, System.Reflection.MemberInfo inverseProperty, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasOwnership(class System.Type targetEntityType, class System.Reflection.MemberInfo navigationProperty, class System.Reflection.MemberInfo inverseProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasOwnership(System.Type,System.Reflection.MemberInfo,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityType As Type, navigationProperty As MemberInfo, inverseProperty As MemberInfo, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : Type * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasOwnership : Type * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityType, navigationProperty, inverseProperty, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigationMember, System.Reflection.MemberInfo inverseMember, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasOwnership(class System.Type targetEntityType, class System.Reflection.MemberInfo navigationMember, class System.Reflection.MemberInfo inverseMember, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOwnership (targetEntityType As Type, navigationMember As MemberInfo, inverseMember As MemberInfo, configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasOwnership : Type * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasOwnership : Type * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasOwnership (targetEntityType, navigationMember, inverseMember, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigationMember, System.Reflection.MemberInfo? inverseMember, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationProperty" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigationMember" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inverseProperty" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="inverseMember" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationProperty">To be added.</param>
        <param name="navigationMember">To be added.</param>
        <param name="inverseProperty">To be added.</param>
        <param name="inverseMember">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueryFilter">
      <MemberSignature Language="C#" Value="public virtual void HasQueryFilter (System.Linq.Expressions.LambdaExpression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HasQueryFilter(class System.Linq.Expressions.LambdaExpression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasQueryFilter(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub HasQueryFilter (filter As LambdaExpression)" />
      <MemberSignature Language="F#" Value="abstract member HasQueryFilter : System.Linq.Expressions.LambdaExpression -&gt; unit&#xA;override this.HasQueryFilter : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="internalEntityTypeBuilder.HasQueryFilter filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueryFilter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasQueryFilter (System.Linq.Expressions.LambdaExpression filter, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder HasQueryFilter(class System.Linq.Expressions.LambdaExpression filter, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasQueryFilter(System.Linq.Expressions.LambdaExpression,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasQueryFilter (filter As LambdaExpression, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasQueryFilter : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.HasQueryFilter : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasQueryFilter (filter, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? HasQueryFilter (System.Linq.Expressions.LambdaExpression? filter, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityType As EntityType, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityType, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityType As EntityType, principalKey As Key, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityType, principalKey, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityType As EntityType, dependentProperties As IReadOnlyList(Of Property), configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityType, dependentProperties, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityType As EntityType, dependentProperties As IReadOnlyList(Of Property), configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityType, dependentProperties, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="dependentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="dependentProperties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (string principalEntityTypeName, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(string principalEntityTypeName, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(System.String,System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityTypeName As String, propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityTypeName, propertyNames, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (string principalEntityTypeName, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(string principalEntityTypeName, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityTypeName As String, propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityTypeName, propertyNames, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (string principalEntityTypeName, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeName">To be added.</param>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (Type principalClrType, System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(class System.Type principalClrType, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.MemberInfo&gt; clrMembers, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(System.Type,System.Collections.Generic.IReadOnlyList{System.Reflection.MemberInfo},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalClrType As Type, clrMembers As IReadOnlyList(Of MemberInfo), configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalClrType, clrMembers, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (Type principalClrType, System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(class System.Type principalClrType, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.MemberInfo&gt; clrMembers, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalClrType As Type, clrMembers As IReadOnlyList(Of MemberInfo), configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalClrType, clrMembers, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (Type principalClrType, System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalClrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="clrMembers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalClrType">To be added.</param>
        <param name="clrMembers">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? required = default, string propertyBaseName = default);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, valuetype System.Nullable`1&lt;bool&gt; required, string propertyBaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Nullable{System.Boolean},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityType As EntityType, configurationSource As ConfigurationSource, Optional required As Nullable(Of Boolean) = Nothing, Optional propertyBaseName As String = Nothing) As InternalForeignKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityType, configurationSource, required, propertyBaseName)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? required = default, string? propertyBaseName = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="propertyBaseName" Type="System.String" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="required">To be added.</param>
        <param name="propertyBaseName">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityType As EntityType, dependentProperties As IReadOnlyList(Of Property), principalKey As Key, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityType, dependentProperties, principalKey, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityType As EntityType, dependentProperties As IReadOnlyList(Of Property), principalKey As Key, configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityType, dependentProperties, principalKey, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key? principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="dependentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="dependentProperties">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, System.Reflection.MemberInfo navigationProperty, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, class System.Reflection.MemberInfo navigationProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (targetEntityType As EntityType, navigationProperty As MemberInfo, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (targetEntityType, navigationProperty, configurationSource, setTargetAsPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigationProperty" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationProperty">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, System.Reflection.MemberInfo navigationMember, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? targetIsPrincipal = default);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, class System.Reflection.MemberInfo navigationMember, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, valuetype System.Nullable`1&lt;bool&gt; targetIsPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (targetEntityType As EntityType, navigationMember As MemberInfo, configurationSource As ConfigurationSource, Optional targetIsPrincipal As Nullable(Of Boolean) = Nothing) As InternalForeignKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (targetEntityType, navigationMember, configurationSource, targetIsPrincipal)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, System.Reflection.MemberInfo? navigationMember, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? targetIsPrincipal = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationMember" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="targetIsPrincipal" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationMember">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="targetIsPrincipal">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, string navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (targetEntityType As EntityType, navigationName As String, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (targetEntityType, navigationName, configurationSource, setTargetAsPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, string navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? targetIsPrincipal = default);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, valuetype System.Nullable`1&lt;bool&gt; targetIsPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (targetEntityType As EntityType, navigationName As String, configurationSource As ConfigurationSource, Optional targetIsPrincipal As Nullable(Of Boolean) = Nothing) As InternalForeignKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (targetEntityType, navigationName, configurationSource, targetIsPrincipal)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, string? navigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? targetIsPrincipal = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="targetIsPrincipal" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="targetIsPrincipal">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (string principalEntityTypeName, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(string principalEntityTypeName, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(System.String,System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityTypeName As String, propertyNames As IReadOnlyList(Of String), principalKey As Key, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityTypeName, propertyNames, principalKey, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (string principalEntityTypeName, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(string principalEntityTypeName, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityTypeName As String, propertyNames As IReadOnlyList(Of String), principalKey As Key, configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : string * System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityTypeName, propertyNames, principalKey, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (string principalEntityTypeName, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeName">To be added.</param>
        <param name="propertyNames">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (Type principalClrType, System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(class System.Type principalClrType, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.MemberInfo&gt; clrMembers, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(System.Type,System.Collections.Generic.IReadOnlyList{System.Reflection.MemberInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalClrType As Type, clrMembers As IReadOnlyList(Of MemberInfo), principalKey As Key, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalClrType, clrMembers, principalKey, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (Type principalClrType, System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(class System.Type principalClrType, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.MemberInfo&gt; clrMembers, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalClrType As Type, clrMembers As IReadOnlyList(Of MemberInfo), principalKey As Key, configurationSource As ConfigurationSource) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : Type * System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalClrType, clrMembers, principalKey, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (Type principalClrType, System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalClrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="clrMembers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalClrType">To be added.</param>
        <param name="clrMembers">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? required = default, string propertyBaseName = default);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, valuetype System.Nullable`1&lt;bool&gt; required, string propertyBaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Nullable{System.Boolean},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (principalEntityType As EntityType, principalKey As Key, configurationSource As ConfigurationSource, Optional required As Nullable(Of Boolean) = Nothing, Optional propertyBaseName As String = Nothing) As InternalForeignKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (principalEntityType, principalKey, configurationSource, required, propertyBaseName)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? required = default, string? propertyBaseName = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="propertyBaseName" Type="System.String" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="required">To be added.</param>
        <param name="propertyBaseName">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, System.Reflection.MemberInfo navigationToTarget, System.Reflection.MemberInfo inverseNavigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, class System.Reflection.MemberInfo navigationToTarget, class System.Reflection.MemberInfo inverseNavigation, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (targetEntityType As EntityType, navigationToTarget As MemberInfo, inverseNavigation As MemberInfo, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (targetEntityType, navigationToTarget, inverseNavigation, configurationSource, setTargetAsPrincipal)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, System.Reflection.MemberInfo navigation, System.Reflection.MemberInfo inverseNavigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, class System.Reflection.MemberInfo navigation, class System.Reflection.MemberInfo inverseNavigation, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (targetEntityType As EntityType, navigation As MemberInfo, inverseNavigation As MemberInfo, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (targetEntityType, navigation, inverseNavigation, configurationSource, setTargetAsPrincipal)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, System.Reflection.MemberInfo? navigation, System.Reflection.MemberInfo? inverseNavigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToTarget" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigation" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inverseNavigation" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationToTarget">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, string navigationToTargetName, string inverseNavigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, string navigationToTargetName, string inverseNavigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (targetEntityType As EntityType, navigationToTargetName As String, inverseNavigationName As String, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.HasRelationship (targetEntityType, navigationToTargetName, inverseNavigationName, configurationSource, setTargetAsPrincipal)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, string navigationName, string inverseNavigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, string navigationName, string inverseNavigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasRelationship (targetEntityType As EntityType, navigationName As String, inverseNavigationName As String, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * string * string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.HasRelationship (targetEntityType, navigationName, inverseNavigationName, configurationSource, setTargetAsPrincipal)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? HasRelationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, string? navigationName, string? inverseNavigationName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToTargetName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inverseNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationToTargetName">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="inverseNavigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasServiceOnlyConstructorBinding">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? HasServiceOnlyConstructorBinding (Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? constructorBinding, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder HasServiceOnlyConstructorBinding(class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasServiceOnlyConstructorBinding(Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasServiceOnlyConstructorBinding (constructorBinding As InstantiationBinding, configurationSource As ConfigurationSource) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasServiceOnlyConstructorBinding : Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.HasServiceOnlyConstructorBinding : Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.HasServiceOnlyConstructorBinding (constructorBinding, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="constructorBinding">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? HasSkipNavigation (System.Reflection.MemberInfo navigation, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource, bool? collection = default, bool? onDependent = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasSkipNavigation(class System.Reflection.MemberInfo navigation, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource, valuetype System.Nullable`1&lt;bool&gt; collection, valuetype System.Nullable`1&lt;bool&gt; onDependent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasSkipNavigation(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource},System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSkipNavigation (navigation As MemberInfo, targetEntityType As EntityType, configurationSource As Nullable(Of ConfigurationSource), Optional collection As Nullable(Of Boolean) = Nothing, Optional onDependent As Nullable(Of Boolean) = Nothing) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasSkipNavigation : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.HasSkipNavigation : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalEntityTypeBuilder.HasSkipNavigation (navigation, targetEntityType, configurationSource, collection, onDependent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="collection" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="onDependent" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="targetEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="collection">To be added.</param>
        <param name="onDependent">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, Microsoft.EntityFrameworkCore.Metadata.MemberIdentity inverseNavigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? collections = default, bool? onDependent = default);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasSkipNavigation(valuetype Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.MemberIdentity inverseNavigation, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, valuetype System.Nullable`1&lt;bool&gt; collections, valuetype System.Nullable`1&lt;bool&gt; onDependent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.MemberIdentity,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.MemberIdentity,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSkipNavigation (navigation As MemberIdentity, targetEntityType As EntityType, inverseNavigation As MemberIdentity, configurationSource As ConfigurationSource, Optional collections As Nullable(Of Boolean) = Nothing, Optional onDependent As Nullable(Of Boolean) = Nothing) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.HasSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalEntityTypeBuilder.HasSkipNavigation (navigation, targetEntityType, inverseNavigation, configurationSource, collections, onDependent)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? HasSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, Microsoft.EntityFrameworkCore.Metadata.MemberIdentity inverseNavigation, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? collections = default, bool? onDependent = default);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.MemberIdentity" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="inverseNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.MemberIdentity" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="collections" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="onDependent" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="targetEntityType">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="collections">To be added.</param>
        <param name="onDependent">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? HasSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, Type? navigationType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource, bool? collection = default, bool? onDependent = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasSkipNavigation(valuetype Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, class System.Type navigationType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource, valuetype System.Nullable`1&lt;bool&gt; collection, valuetype System.Nullable`1&lt;bool&gt; onDependent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.MemberIdentity,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Type,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource},System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSkipNavigation (navigation As MemberIdentity, targetEntityType As EntityType, navigationType As Type, configurationSource As Nullable(Of ConfigurationSource), Optional collection As Nullable(Of Boolean) = Nothing, Optional onDependent As Nullable(Of Boolean) = Nothing) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Type * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.HasSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Type * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalEntityTypeBuilder.HasSkipNavigation (navigation, targetEntityType, navigationType, configurationSource, collection, onDependent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.MemberIdentity" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="navigationType" Type="System.Type" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="collection" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="onDependent" Type="System.Nullable&lt;System.Boolean&gt;" Index="5" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="collection">To be added.</param>
        <param name="onDependent">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigationProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource, bool? collection = default, bool? onDependent = default);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasSkipNavigation(valuetype Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigationProperty, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource, valuetype System.Nullable`1&lt;bool&gt; collection, valuetype System.Nullable`1&lt;bool&gt; onDependent) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.MemberIdentity,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource},System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSkipNavigation (navigationProperty As MemberIdentity, targetEntityType As EntityType, configurationSource As Nullable(Of ConfigurationSource), Optional collection As Nullable(Of Boolean) = Nothing, Optional onDependent As Nullable(Of Boolean) = Nothing) As InternalSkipNavigationBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member HasSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.HasSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalEntityTypeBuilder.HasSkipNavigation (navigationProperty, targetEntityType, configurationSource, collection, onDependent)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? HasSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigationProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource, bool? collection = default, bool? onDependent = default);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? HasSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource, bool? collection = default, bool? onDependent = default);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasSkipNavigation(valuetype Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource, valuetype System.Nullable`1&lt;bool&gt; collection, valuetype System.Nullable`1&lt;bool&gt; onDependent) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSkipNavigation (navigation As MemberIdentity, targetEntityType As EntityType, configurationSource As Nullable(Of ConfigurationSource), Optional collection As Nullable(Of Boolean) = Nothing, Optional onDependent As Nullable(Of Boolean) = Nothing) As InternalSkipNavigationBuilder" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member HasSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.HasSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalEntityTypeBuilder.HasSkipNavigation (navigation, targetEntityType, configurationSource, collection, onDependent)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationProperty" Type="Microsoft.EntityFrameworkCore.Metadata.MemberIdentity" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.MemberIdentity" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="collection" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="onDependent" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationProperty">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="targetEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="collection">To be added.</param>
        <param name="onDependent">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? HasSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, Type? navigationType, Microsoft.EntityFrameworkCore.Metadata.MemberIdentity inverseNavigation, Type? inverseNavigationType, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, bool? collections = default, bool? onDependent = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasSkipNavigation(valuetype Microsoft.EntityFrameworkCore.Metadata.MemberIdentity navigation, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, class System.Type navigationType, valuetype Microsoft.EntityFrameworkCore.Metadata.MemberIdentity inverseNavigation, class System.Type inverseNavigationType, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, valuetype System.Nullable`1&lt;bool&gt; collections, valuetype System.Nullable`1&lt;bool&gt; onDependent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.MemberIdentity,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Type,Microsoft.EntityFrameworkCore.Metadata.MemberIdentity,System.Type,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSkipNavigation (navigation As MemberIdentity, targetEntityType As EntityType, navigationType As Type, inverseNavigation As MemberIdentity, inverseNavigationType As Type, configurationSource As ConfigurationSource, Optional collections As Nullable(Of Boolean) = Nothing, Optional onDependent As Nullable(Of Boolean) = Nothing) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Type * Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Type * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.HasSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Type * Microsoft.EntityFrameworkCore.Metadata.MemberIdentity * Type * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalEntityTypeBuilder.HasSkipNavigation (navigation, targetEntityType, navigationType, inverseNavigation, inverseNavigationType, configurationSource, collections, onDependent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.MemberIdentity" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="navigationType" Type="System.Type" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="inverseNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.MemberIdentity" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="inverseNavigationType" Type="System.Type" Index="4" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="5" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="collections" Type="System.Nullable&lt;System.Boolean&gt;" Index="6" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="onDependent" Type="System.Nullable&lt;System.Boolean&gt;" Index="7" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationType">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="inverseNavigationType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="collections">To be added.</param>
        <param name="onDependent">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTrigger">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalTriggerBuilder? HasTrigger (string modelName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalTriggerBuilder HasTrigger(string modelName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.HasTrigger(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasTrigger (modelName As String, configurationSource As ConfigurationSource) As InternalTriggerBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasTrigger : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalTriggerBuilder&#xA;override this.HasTrigger : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalTriggerBuilder" Usage="internalEntityTypeBuilder.HasTrigger (modelName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalTriggerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="modelName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder Ignore (string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder Ignore(string name, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Ignore(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore (name As String, configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member Ignore : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.Ignore : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.Ignore (name, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? Ignore (string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.Ignore : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.Ignore (name, configurationSource)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.PreserveBaseOverrides]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.PreserveBaseOverrides&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual bool Ignore (string name, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Ignore(string name, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Ignore(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore (name As String, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Ignore : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.Ignore : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.Ignore (name, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder IndexerProperty (Type propertyType, string propertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder IndexerProperty(class System.Type propertyType, string propertyName, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.IndexerProperty(System.Type,System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexerProperty (propertyType As Type, propertyName As String, configurationSource As Nullable(Of ConfigurationSource)) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member IndexerProperty : Type * string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.IndexerProperty : Type * string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.IndexerProperty (propertyType, propertyName, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder? IndexerProperty (Type? propertyType, string propertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIgnored">
      <MemberSignature Language="C#" Value="public virtual bool IsIgnored (string name, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIgnored(string name, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.IsIgnored(System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsIgnored (name As String, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsIgnored : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.IsIgnored : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalEntityTypeBuilder.IsIgnored (name, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIgnored">
      <MemberSignature Language="C#" Value="public virtual bool IsIgnored (string name, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIgnored(string name, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.IsIgnored(System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsIgnored (name As String, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsIgnored : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; bool&#xA;override this.IsIgnored : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; bool" Usage="internalEntityTypeBuilder.IsIgnored (name, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOwned">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? IsOwned (bool owned, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey? futureOwnership = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder IsOwned(bool owned, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource, class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey futureOwnership) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.IsOwned(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsOwned (owned As Boolean, configurationSource As ConfigurationSource, Optional futureOwnership As ForeignKey = Nothing) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsOwned : bool * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.IsOwned : bool * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource * Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.IsOwned (owned, configurationSource, futureOwnership)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owned" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="futureOwnership" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="owned">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="futureOwnership">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Metadata As EntityType" />
      <MemberSignature Language="F#" Value="member this.Metadata : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanAddNavigation">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanAddNavigation (string navigationName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanAddNavigation(string navigationName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanAddNavigation(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanAddNavigation (navigationName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanAddNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanAddNavigation : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanAddNavigation : string * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanAddNavigation (navigationName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanAddNavigation(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndex">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndex(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanHaveIndex(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanHaveIndex (propertyNames As IReadOnlyList(Of String), fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanHaveIndex" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndex (propertyNames, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndex(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndexerProperty">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveIndexerProperty (Type propertyType, string propertyName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndexerProperty(class System.Type propertyType, string propertyName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanHaveIndexerProperty(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanHaveIndexerProperty (propertyType As Type, propertyName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanHaveIndexerProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndexerProperty : Type * string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndexerProperty : Type * string * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndexerProperty (propertyType, propertyName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndexerProperty(System.Type,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveNavigation (string navigationName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation(string navigationName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanHaveNavigation(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanHaveNavigation (navigationName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanHaveNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation : string * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation (navigationName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveNavigation (string navigationName, Type? type, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation(string navigationName, class System.Type type, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanHaveNavigation(System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanHaveNavigation (navigationName As String, type As Type, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanHaveNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation : string * Type * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation : string * Type * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation (navigationName, type, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveNavigation (string navigationName, Type type, bool fromDataAnnotation);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation(System.String,System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="type">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveProperty (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty(class System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanHaveProperty(System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanHaveProperty (memberInfo As MemberInfo, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanHaveProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty : System.Reflection.MemberInfo * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty : System.Reflection.MemberInfo * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty (memberInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty(System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveProperty (Type? propertyType, string propertyName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty(class System.Type propertyType, string propertyName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanHaveProperty(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanHaveProperty (propertyType As Type, propertyName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanHaveProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty : Type * string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty : Type * string * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty (propertyType, propertyName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveProperty (Type propertyType, string propertyName, bool fromDataAnnotation);" FrameworkAlternate="efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty(System.Type,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveServiceProperty">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveServiceProperty (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveServiceProperty(class System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanHaveServiceProperty(System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanHaveServiceProperty (memberInfo As MemberInfo, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanHaveServiceProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveServiceProperty : System.Reflection.MemberInfo * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveServiceProperty : System.Reflection.MemberInfo * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveServiceProperty (memberInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveServiceProperty(System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveSkipNavigation (string skipNavigationName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation(string skipNavigationName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanHaveSkipNavigation(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanHaveSkipNavigation (skipNavigationName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanHaveSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation : string * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation (skipNavigationName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigationName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveSkipNavigation (string skipNavigationName, Type? type, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation(string skipNavigationName, class System.Type type, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanHaveSkipNavigation(System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanHaveSkipNavigation (skipNavigationName As String, type As Type, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanHaveSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation : string * Type * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation : string * Type * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation (skipNavigationName, type, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveSkipNavigation (string skipNavigationName, Type type, bool fromDataAnnotation);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation(System.String,System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigationName">To be added.</param>
        <param name="type">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveTrigger">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanHaveTrigger (string modelName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveTrigger(string modelName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanHaveTrigger(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanHaveTrigger (modelName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanHaveTrigger" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveTrigger : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveTrigger : string * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveTrigger (modelName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveTrigger(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="modelName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanIgnore">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanIgnore (string name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanIgnore(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanIgnore(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanIgnore (name As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanIgnore" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanIgnore : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanIgnore : string * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanIgnore (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanIgnore(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveDiscriminator">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanRemoveDiscriminator (bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveDiscriminator(bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanRemoveDiscriminator(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanRemoveDiscriminator (fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanRemoveDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveDiscriminator : bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveDiscriminator : bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveDiscriminator fromDataAnnotation" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveDiscriminator(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveIndex">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanRemoveIndex (Microsoft.EntityFrameworkCore.Metadata.IConventionIndex index, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveIndex(class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex index, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanRemoveIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanRemoveIndex (index As IConventionIndex, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanRemoveIndex" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionIndex * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionIndex * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveIndex (index, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanRemoveKey (bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey(bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanRemoveKey(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanRemoveKey (fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanRemoveKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey : bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey : bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey fromDataAnnotation" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanRemoveKey (Microsoft.EntityFrameworkCore.Metadata.IConventionKey key, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionKey key, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanRemoveKey(Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanRemoveKey (key As IConventionKey, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanRemoveKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey : Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey : Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey (key, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey(Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveNavigation">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanRemoveNavigation (Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation navigation, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveNavigation(class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation navigation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanRemoveNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanRemoveNavigation (navigation As IConventionNavigation, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanRemoveNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveNavigation (navigation, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveRelationship">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanRemoveRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanRemoveRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanRemoveRelationship (foreignKey As IConventionForeignKey, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanRemoveRelationship" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveRelationship (foreignKey, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveServiceProperty">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanRemoveServiceProperty (Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty serviceProperty, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveServiceProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty serviceProperty, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanRemoveServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanRemoveServiceProperty (serviceProperty As IConventionServiceProperty, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanRemoveServiceProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveServiceProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveServiceProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveServiceProperty (serviceProperty, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="serviceProperty">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanRemoveSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation skipNavigation, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation(class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation skipNavigation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanRemoveSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanRemoveSkipNavigation (skipNavigation As IConventionSkipNavigation, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanRemoveSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation (skipNavigation, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigation">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanRemoveSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation skipNavigation, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation(class Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation skipNavigation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanRemoveSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanRemoveSkipNavigation (skipNavigation As ISkipNavigation, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanRemoveSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation (skipNavigation, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigation">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetBaseType">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetBaseType (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType baseEntityType, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetBaseType(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType baseEntityType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetBaseType(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetBaseType (baseEntityType As IConventionEntityType, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetBaseType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetBaseType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetBaseType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetBaseType (baseEntityType, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetBaseType (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType? baseEntityType, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetBaseType(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="baseEntityType">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetChangeTrackingStrategy(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetChangeTrackingStrategy(System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetChangeTrackingStrategy (changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy), fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetChangeTrackingStrategy" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetChangeTrackingStrategy : Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetChangeTrackingStrategy : Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetChangeTrackingStrategy (changeTrackingStrategy, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetChangeTrackingStrategy(System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDefiningQuery">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetDefiningQuery (System.Linq.Expressions.LambdaExpression query, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDefiningQuery(class System.Linq.Expressions.LambdaExpression query, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetDefiningQuery(System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetDefiningQuery (query As LambdaExpression, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetDefiningQuery" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDefiningQuery : System.Linq.Expressions.LambdaExpression * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDefiningQuery : System.Linq.Expressions.LambdaExpression * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDefiningQuery (query, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetDefiningQuery (System.Linq.Expressions.LambdaExpression? query, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDefiningQuery(System.Linq.Expressions.LambdaExpression,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetDiscriminator (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(class System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetDiscriminator(System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetDiscriminator (memberInfo As MemberInfo, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator : System.Reflection.MemberInfo * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator : System.Reflection.MemberInfo * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator (memberInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetDiscriminator (string name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetDiscriminator(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetDiscriminator (name As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator : string * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetDiscriminator (Type type, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(class System.Type type, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetDiscriminator(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetDiscriminator (type As Type, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator : Type * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator : Type * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator (type, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetDiscriminator (string name, Type type, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(string name, class System.Type type, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetDiscriminator(System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetDiscriminator (name As String, type As Type, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator : string * Type * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator : string * Type * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator (name, type, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(System.String,System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetDiscriminator (Type type, string name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(class System.Type type, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetDiscriminator(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetDiscriminator (type As Type, name As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator : Type * string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator : Type * string * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator (type, name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(System.Type,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetPrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetPrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetPrimaryKey (properties As IReadOnlyList(Of IConventionProperty), fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetPrimaryKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey (properties, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetPrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;? properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetPrimaryKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetPrimaryKey(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetPrimaryKey (propertyNames As IReadOnlyList(Of String), fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetPrimaryKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey (propertyNames, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPropertyAccessMode">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetPropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetPropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetPropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetQueryFilter">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetQueryFilter (System.Linq.Expressions.LambdaExpression filter, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetQueryFilter(class System.Linq.Expressions.LambdaExpression filter, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CanSetQueryFilter(System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetQueryFilter (filter As LambdaExpression, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.CanSetQueryFilter" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetQueryFilter : System.Linq.Expressions.LambdaExpression * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetQueryFilter : System.Linq.Expressions.LambdaExpression * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetQueryFilter (filter, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.CanSetQueryFilter (System.Linq.Expressions.LambdaExpression? filter, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetQueryFilter(System.Linq.Expressions.LambdaExpression,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CreateUniqueProperty">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IConventionEntityTypeBuilder.CreateUniqueProperty (Type propertyType, string basePropertyName, bool required);" FrameworkAlternate="efcore-5.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CreateUniqueProperty(class System.Type propertyType, string basePropertyName, bool required) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#CreateUniqueProperty(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CreateUniqueProperty (propertyType As Type, basePropertyName As String, required As Boolean) As IConventionPropertyBuilder Implements IConventionEntityTypeBuilder.CreateUniqueProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CreateUniqueProperty : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CreateUniqueProperty : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CreateUniqueProperty (propertyType, basePropertyName, required)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? IConventionEntityTypeBuilder.CreateUniqueProperty (Type propertyType, string basePropertyName, bool required);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CreateUniqueProperty(System.Type,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="basePropertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="required" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="basePropertyName">To be added.</param>
        <param name="required">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; IConventionEntityTypeBuilder.GetOrCreateProperties (System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; memberInfos, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; memberInfos, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#GetOrCreateProperties(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetOrCreateProperties (memberInfos As IEnumerable(Of MemberInfo), fromDataAnnotation As Boolean) As IReadOnlyList(Of IConventionProperty) Implements IConventionEntityTypeBuilder.GetOrCreateProperties" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties : seq&lt;System.Reflection.MemberInfo&gt; * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties : seq&lt;System.Reflection.MemberInfo&gt; * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties (memberInfos, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;? IConventionEntityTypeBuilder.GetOrCreateProperties (System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;? memberInfos, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfos" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="memberInfos">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; IConventionEntityTypeBuilder.GetOrCreateProperties (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#GetOrCreateProperties(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetOrCreateProperties (propertyNames As IReadOnlyList(Of String), fromDataAnnotation As Boolean) As IReadOnlyList(Of IConventionProperty) Implements IConventionEntityTypeBuilder.GetOrCreateProperties" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties (propertyNames, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;? IConventionEntityTypeBuilder.GetOrCreateProperties (System.Collections.Generic.IReadOnlyList&lt;string&gt;? propertyNames, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetTargetEntityTypeBuilder">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.GetTargetEntityTypeBuilder (Type targetClrType, System.Reflection.MemberInfo navigationInfo, bool createIfMissing, bool? targetShouldBeOwned, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetTargetEntityTypeBuilder(class System.Type targetClrType, class System.Reflection.MemberInfo navigationInfo, bool createIfMissing, valuetype System.Nullable`1&lt;bool&gt; targetShouldBeOwned, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#GetTargetEntityTypeBuilder(System.Type,System.Reflection.MemberInfo,System.Boolean,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetTargetEntityTypeBuilder (targetClrType As Type, navigationInfo As MemberInfo, createIfMissing As Boolean, targetShouldBeOwned As Nullable(Of Boolean), fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.GetTargetEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetTargetEntityTypeBuilder : Type * System.Reflection.MemberInfo * bool * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetTargetEntityTypeBuilder : Type * System.Reflection.MemberInfo * bool * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetTargetEntityTypeBuilder (targetClrType, navigationInfo, createIfMissing, targetShouldBeOwned, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetTargetEntityTypeBuilder(System.Type,System.Reflection.MemberInfo,System.Boolean,System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetClrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="createIfMissing" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="targetShouldBeOwned" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetClrType">To be added.</param>
        <param name="navigationInfo">To be added.</param>
        <param name="createIfMissing">To be added.</param>
        <param name="targetShouldBeOwned">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasAnnotation (string name, object value, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasAnnotation (name As String, value As Object, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasAnnotation(System.String,System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasBaseType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasBaseType (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType baseEntityType, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasBaseType(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType baseEntityType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasBaseType(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasBaseType (baseEntityType As IConventionEntityType, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasBaseType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasBaseType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasBaseType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasBaseType (baseEntityType, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasBaseType (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType? baseEntityType, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasBaseType(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="baseEntityType">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasChangeTrackingStrategy(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasChangeTrackingStrategy(System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasChangeTrackingStrategy (changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy), fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasChangeTrackingStrategy" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasChangeTrackingStrategy : Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasChangeTrackingStrategy : Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasChangeTrackingStrategy (changeTrackingStrategy, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasChangeTrackingStrategy(System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDefiningQuery">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasDefiningQuery (System.Linq.Expressions.LambdaExpression query, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDefiningQuery(class System.Linq.Expressions.LambdaExpression query, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasDefiningQuery(System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasDefiningQuery (query As LambdaExpression, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasDefiningQuery" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDefiningQuery : System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDefiningQuery : System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDefiningQuery (query, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasDefiningQuery (System.Linq.Expressions.LambdaExpression? query, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDefiningQuery(System.Linq.Expressions.LambdaExpression,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder IConventionEntityTypeBuilder.HasDiscriminator (bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasDiscriminator(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasDiscriminator (fromDataAnnotation As Boolean) As IConventionDiscriminatorBuilder Implements IConventionEntityTypeBuilder.HasDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator fromDataAnnotation" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder? IConventionEntityTypeBuilder.HasDiscriminator (bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder IConventionEntityTypeBuilder.HasDiscriminator (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(class System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasDiscriminator(System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasDiscriminator (memberInfo As MemberInfo, fromDataAnnotation As Boolean) As IConventionDiscriminatorBuilder Implements IConventionEntityTypeBuilder.HasDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator (memberInfo, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder? IConventionEntityTypeBuilder.HasDiscriminator (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder IConventionEntityTypeBuilder.HasDiscriminator (string name, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasDiscriminator(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasDiscriminator (name As String, fromDataAnnotation As Boolean) As IConventionDiscriminatorBuilder Implements IConventionEntityTypeBuilder.HasDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator (name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder? IConventionEntityTypeBuilder.HasDiscriminator (string name, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder IConventionEntityTypeBuilder.HasDiscriminator (Type type, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(class System.Type type, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasDiscriminator(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasDiscriminator (type As Type, fromDataAnnotation As Boolean) As IConventionDiscriminatorBuilder Implements IConventionEntityTypeBuilder.HasDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator : Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator : Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator (type, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder? IConventionEntityTypeBuilder.HasDiscriminator (Type type, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder IConventionEntityTypeBuilder.HasDiscriminator (string name, Type type, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(string name, class System.Type type, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasDiscriminator(System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasDiscriminator (name As String, type As Type, fromDataAnnotation As Boolean) As IConventionDiscriminatorBuilder Implements IConventionEntityTypeBuilder.HasDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator : string * Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator : string * Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator (name, type, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder? IConventionEntityTypeBuilder.HasDiscriminator (string name, Type type, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(System.String,System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder IConventionEntityTypeBuilder.HasIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasIndex (properties As IReadOnlyList(Of IConventionProperty), fromDataAnnotation As Boolean) As IConventionIndexBuilder Implements IConventionEntityTypeBuilder.HasIndex" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex (properties, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder? IConventionEntityTypeBuilder.HasIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder IConventionEntityTypeBuilder.HasIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasIndex(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasIndex (propertyNames As IReadOnlyList(Of String), fromDataAnnotation As Boolean) As IConventionIndexBuilder Implements IConventionEntityTypeBuilder.HasIndex" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex (propertyNames, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder? IConventionEntityTypeBuilder.HasIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder IConventionEntityTypeBuilder.HasIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, string name, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasIndex (properties As IReadOnlyList(Of IConventionProperty), name As String, fromDataAnnotation As Boolean) As IConventionIndexBuilder Implements IConventionEntityTypeBuilder.HasIndex" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex (properties, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder? IConventionEntityTypeBuilder.HasIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, string name, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder IConventionEntityTypeBuilder.HasIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, string name, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasIndex(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasIndex (propertyNames As IReadOnlyList(Of String), name As String, fromDataAnnotation As Boolean) As IConventionIndexBuilder Implements IConventionEntityTypeBuilder.HasIndex" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex : System.Collections.Generic.IReadOnlyList&lt;string&gt; * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex (propertyNames, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder? IConventionEntityTypeBuilder.HasIndex (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, string name, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder IConventionEntityTypeBuilder.HasKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasKey (properties As IReadOnlyList(Of IConventionProperty), fromDataAnnotation As Boolean) As IConventionKeyBuilder Implements IConventionEntityTypeBuilder.HasKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasKey (properties, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder? IConventionEntityTypeBuilder.HasKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoAnnotation (string name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoAnnotation(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoAnnotation(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoAnnotation (name As String, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoAnnotation : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoAnnotation : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoAnnotation (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoAnnotation(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoComplexProperty">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoComplexProperty (Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty complexProperty, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoComplexProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty complexProperty, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoComplexProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoComplexProperty (complexProperty As IConventionComplexProperty, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoComplexProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoComplexProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoComplexProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoComplexProperty (complexProperty, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoComplexProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexProperty">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDeclaredDiscriminator">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoDeclaredDiscriminator (bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDeclaredDiscriminator(bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoDeclaredDiscriminator(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoDeclaredDiscriminator (fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoDeclaredDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDeclaredDiscriminator : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDeclaredDiscriminator : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDeclaredDiscriminator fromDataAnnotation" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDeclaredDiscriminator(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDiscriminator">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoDiscriminator (bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDiscriminator(bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoDiscriminator(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoDiscriminator (fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoDiscriminator" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDiscriminator : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDiscriminator : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDiscriminator fromDataAnnotation" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasNoDiscriminator (bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDiscriminator(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoIndex (Microsoft.EntityFrameworkCore.Metadata.IConventionIndex index, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex(class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex index, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoIndex (index As IConventionIndex, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoIndex" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionIndex * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionIndex * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex (index, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasNoIndex (Microsoft.EntityFrameworkCore.Metadata.IConventionIndex index, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoIndex (properties As IReadOnlyList(Of IConventionProperty), fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoIndex" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex (properties, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasNoIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoKey (bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoKey(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoKey (fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey fromDataAnnotation" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasNoKey (bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoKey (Microsoft.EntityFrameworkCore.Metadata.IConventionKey key, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionKey key, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoKey(Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoKey (key As IConventionKey, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey : Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey : Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey (key, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasNoKey (Microsoft.EntityFrameworkCore.Metadata.IConventionKey key, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoKey (properties As IReadOnlyList(Of IConventionProperty), fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey (properties, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasNoKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoNavigation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoNavigation (Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation navigation, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoNavigation(class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation navigation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoNavigation (navigation As IConventionNavigation, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoNavigation (navigation, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNonNullAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNonNullAnnotation (string name, object value, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNonNullAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNonNullAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNonNullAnnotation (name As String, value As Object, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNonNullAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNonNullAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNonNullAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNonNullAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNonNullAnnotation(System.String,System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoProperty">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoProperty (Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoProperty (property As IConventionProperty, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoProperty (property, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoRelationship (foreignKey As IConventionForeignKey, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoRelationship" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship (foreignKey, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasNoRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoRelationship (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, class Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoRelationship(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},Microsoft.EntityFrameworkCore.Metadata.IConventionKey,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoRelationship (properties As IReadOnlyList(Of IConventionProperty), principalKey As IConventionKey, principalEntityType As IConventionEntityType, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoRelationship" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship (properties, principalKey, principalEntityType, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasNoRelationship (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},Microsoft.EntityFrameworkCore.Metadata.IConventionKey,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="principalEntityType">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoServiceProperty">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoServiceProperty (Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty serviceProperty, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoServiceProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty serviceProperty, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoServiceProperty (serviceProperty As IConventionServiceProperty, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoServiceProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoServiceProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoServiceProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoServiceProperty (serviceProperty, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="serviceProperty">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasNoSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation skipNavigation, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation(class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation skipNavigation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoSkipNavigation (skipNavigation As IConventionSkipNavigation, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation (skipNavigation, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation skipNavigation, bool fromDataAnnotation);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigation">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasNoSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation skipNavigation, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation(class Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation skipNavigation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasNoSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoSkipNavigation (skipNavigation As ISkipNavigation, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasNoSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation (skipNavigation, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="skipNavigation">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasOwnership (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo navigation, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, class System.Reflection.MemberInfo navigation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasOwnership(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As IConventionEntityType, navigation As MemberInfo, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasOwnership" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigation, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasOwnership (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo navigation, bool fromDataAnnotation);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigation" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">The entity type that this relationship targets.</param>
        <param name="navigation">The navigation property on this entity type that is part of the relationship.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>
                An object that can be used to configure the relationship if it exists on the entity type,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasOwnership (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasOwnership(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As IConventionEntityType, navigationName As String, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasOwnership" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigationName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasOwnership (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, bool fromDataAnnotation);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">The entity type that this relationship targets.</param>
        <param name="navigationName">The name of the navigation property on this entity type that is part of the relationship.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the relationship.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasOwnership (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo navigation, System.Reflection.MemberInfo? inverseNavigation, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, class System.Reflection.MemberInfo navigation, class System.Reflection.MemberInfo inverseNavigation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasOwnership(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As IConventionEntityType, navigation As MemberInfo, inverseNavigation As MemberInfo, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasOwnership" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigation, inverseNavigation, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasOwnership (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo navigation, System.Reflection.MemberInfo inverseNavigation, bool fromDataAnnotation);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigation" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inverseNavigation" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">The entity type that this relationship targets.</param>
        <param name="navigation">The navigation property on this entity type that is part of the relationship.</param>
        <param name="inverseNavigation">
                The navigation property on the target entity type that is part of the relationship. If <see langword="null" />
                is specified, the relationship will be configured without a navigation property on the target end.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>
                An object that can be used to configure the relationship if it exists on the entity type,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasOwnership (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, string? inverseNavigationName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, string inverseNavigationName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasOwnership(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As IConventionEntityType, navigationName As String, inverseNavigationName As String, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasOwnership" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigationName, inverseNavigationName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasOwnership (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, string inverseNavigationName, bool fromDataAnnotation);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inverseNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">The entity type that this relationship targets.</param>
        <param name="navigationName">The name of the navigation property on this entity type that is part of the relationship.</param>
        <param name="inverseNavigationName">
                The name of the navigation property on the target entity type that is part of the relationship. If <see langword="null" />
                is specified, the relationship will be configured without a navigation property on the target end.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>
                An object that can be used to configure the relationship if it exists on the entity type,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigationToTarget, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class System.Type targetEntityType, class System.Reflection.MemberInfo navigationToTarget, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasOwnership(System.Type,System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As Type, navigationToTarget As MemberInfo, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasOwnership" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigationToTarget, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigation, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class System.Type targetEntityType, class System.Reflection.MemberInfo navigation, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As Type, navigation As MemberInfo, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasOwnership" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigation, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigation, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(System.Type,System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToTarget" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigation" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationToTarget">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, string navigationToTargetName, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class System.Type targetEntityType, string navigationToTargetName, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasOwnership(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As Type, navigationToTargetName As String, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasOwnership" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigationToTargetName, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, string navigationName, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class System.Type targetEntityType, string navigationName, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As Type, navigationName As String, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasOwnership" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigationName, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, string navigationName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(System.Type,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToTargetName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationToTargetName">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigationToTarget, System.Reflection.MemberInfo inverseProperty, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class System.Type targetEntityType, class System.Reflection.MemberInfo navigationToTarget, class System.Reflection.MemberInfo inverseProperty, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasOwnership(System.Type,System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As Type, navigationToTarget As MemberInfo, inverseProperty As MemberInfo, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasOwnership" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigationToTarget, inverseProperty, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigation, System.Reflection.MemberInfo inverseProperty, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class System.Type targetEntityType, class System.Reflection.MemberInfo navigation, class System.Reflection.MemberInfo inverseProperty, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As Type, navigation As MemberInfo, inverseProperty As MemberInfo, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasOwnership" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigation, inverseProperty, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, System.Reflection.MemberInfo navigation, System.Reflection.MemberInfo? inverseProperty, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(System.Type,System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToTarget" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigation" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inverseProperty" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationToTarget">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="inverseProperty">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, string navigationToTargetName, string inversePropertyName, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class System.Type targetEntityType, string navigationToTargetName, string inversePropertyName, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasOwnership(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As Type, navigationToTargetName As String, inversePropertyName As String, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasOwnership" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigationToTargetName, inversePropertyName, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, string navigationName, string inversePropertyName, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(class System.Type targetEntityType, string navigationName, string inversePropertyName, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasOwnership (targetEntityType As Type, navigationName As String, inversePropertyName As String, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasOwnership" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership : Type * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership (targetEntityType, navigationName, inversePropertyName, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasOwnership (Type targetEntityType, string navigationName, string? inversePropertyName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(System.Type,System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToTargetName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inversePropertyName" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationToTargetName">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="inversePropertyName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasQueryFilter">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.HasQueryFilter (System.Linq.Expressions.LambdaExpression filter, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasQueryFilter(class System.Linq.Expressions.LambdaExpression filter, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasQueryFilter(System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasQueryFilter (filter As LambdaExpression, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.HasQueryFilter" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasQueryFilter : System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasQueryFilter : System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasQueryFilter (filter, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.HasQueryFilter (System.Linq.Expressions.LambdaExpression? filter, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasQueryFilter(System.Linq.Expressions.LambdaExpression,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (targetEntityType As IConventionEntityType, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (targetEntityType, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (targetEntityType As IConventionEntityType, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (targetEntityType, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, class Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (principalEntityType As IConventionEntityType, principalKey As IConventionKey, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (principalEntityType, principalKey, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, class Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (principalEntityType As IConventionEntityType, principalKey As IConventionKey, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (principalEntityType, principalKey, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; dependentProperties, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; dependentProperties, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (principalEntityType As IConventionEntityType, dependentProperties As IReadOnlyList(Of IConventionProperty), fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (principalEntityType, dependentProperties, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; dependentProperties, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; dependentProperties, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (principalEntityType As IConventionEntityType, dependentProperties As IReadOnlyList(Of IConventionProperty), fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (principalEntityType, dependentProperties, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; dependentProperties, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="dependentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="dependentProperties">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (principalEntityType As IConventionEntityType, dependentProperties As IReadOnlyList(Of IConventionProperty), principalKey As IConventionKey, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (principalEntityType, dependentProperties, principalKey, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (principalEntityType As IConventionEntityType, dependentProperties As IReadOnlyList(Of IConventionProperty), principalKey As IConventionKey, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (principalEntityType, dependentProperties, principalKey, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="dependentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="dependentProperties">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo navigationToTarget, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, class System.Reflection.MemberInfo navigationToTarget, bool setTargetAsPrincipal, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (targetEntityType As IConventionEntityType, navigationToTarget As MemberInfo, setTargetAsPrincipal As Boolean, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (targetEntityType, navigationToTarget, setTargetAsPrincipal, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo navigation, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, class System.Reflection.MemberInfo navigation, bool setTargetAsPrincipal, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (targetEntityType As IConventionEntityType, navigation As MemberInfo, setTargetAsPrincipal As Boolean, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (targetEntityType, navigation, setTargetAsPrincipal, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo navigation, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Boolean,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToTarget" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigation" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationToTarget">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationToTargetName, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationToTargetName, bool setTargetAsPrincipal, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (targetEntityType As IConventionEntityType, navigationToTargetName As String, setTargetAsPrincipal As Boolean, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (targetEntityType, navigationToTargetName, setTargetAsPrincipal, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, bool setTargetAsPrincipal, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (targetEntityType As IConventionEntityType, navigationName As String, setTargetAsPrincipal As Boolean, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (targetEntityType, navigationName, setTargetAsPrincipal, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToTargetName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationToTargetName">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo navigationToTarget, System.Reflection.MemberInfo inverseNavigation, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, class System.Reflection.MemberInfo navigationToTarget, class System.Reflection.MemberInfo inverseNavigation, bool setTargetAsPrincipal, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (targetEntityType As IConventionEntityType, navigationToTarget As MemberInfo, inverseNavigation As MemberInfo, setTargetAsPrincipal As Boolean, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (targetEntityType, navigationToTarget, inverseNavigation, setTargetAsPrincipal, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo navigation, System.Reflection.MemberInfo inverseNavigation, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, class System.Reflection.MemberInfo navigation, class System.Reflection.MemberInfo inverseNavigation, bool setTargetAsPrincipal, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (targetEntityType As IConventionEntityType, navigation As MemberInfo, inverseNavigation As MemberInfo, setTargetAsPrincipal As Boolean, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (targetEntityType, navigation, inverseNavigation, setTargetAsPrincipal, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo navigation, System.Reflection.MemberInfo? inverseNavigation, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Boolean,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToTarget" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigation" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inverseNavigation" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationToTarget">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationToTargetName, string inverseNavigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationToTargetName, string inverseNavigationName, bool setTargetAsPrincipal, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (targetEntityType As IConventionEntityType, navigationToTargetName As String, inverseNavigationName As String, setTargetAsPrincipal As Boolean, fromDataAnnotation As Boolean) As IConventionRelationshipBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (targetEntityType, navigationToTargetName, inverseNavigationName, setTargetAsPrincipal, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, string inverseNavigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, string inverseNavigationName, bool setTargetAsPrincipal, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function HasRelationship (targetEntityType As IConventionEntityType, navigationName As String, inverseNavigationName As String, setTargetAsPrincipal As Boolean, fromDataAnnotation As Boolean) As IConventionForeignKeyBuilder Implements IConventionEntityTypeBuilder.HasRelationship" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship (targetEntityType, navigationName, inverseNavigationName, setTargetAsPrincipal, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder? IConventionEntityTypeBuilder.HasRelationship (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, string navigationName, string? inverseNavigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.String,System.Boolean,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToTargetName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inverseNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationToTargetName">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="inverseNavigationName">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder IConventionEntityTypeBuilder.HasSkipNavigation (System.Reflection.MemberInfo navigation, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool? collection, bool? onDependent, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(class System.Reflection.MemberInfo navigation, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, valuetype System.Nullable`1&lt;bool&gt; collection, valuetype System.Nullable`1&lt;bool&gt; onDependent, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasSkipNavigation(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasSkipNavigation (navigation As MemberInfo, targetEntityType As IConventionEntityType, collection As Nullable(Of Boolean), onDependent As Nullable(Of Boolean), fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionEntityTypeBuilder.HasSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation (navigation, targetEntityType, collection, onDependent, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionEntityTypeBuilder.HasSkipNavigation (System.Reflection.MemberInfo navigation, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool? collection, bool? onDependent, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="collection" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="onDependent" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="targetEntityType">To be added.</param>
        <param name="collection">To be added.</param>
        <param name="onDependent">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder IConventionEntityTypeBuilder.HasSkipNavigation (string navigationName, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool? collection, bool? onDependent, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(string navigationName, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, valuetype System.Nullable`1&lt;bool&gt; collection, valuetype System.Nullable`1&lt;bool&gt; onDependent, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasSkipNavigation(System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasSkipNavigation (navigationName As String, targetEntityType As IConventionEntityType, collection As Nullable(Of Boolean), onDependent As Nullable(Of Boolean), fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionEntityTypeBuilder.HasSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation : string * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation : string * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation (navigationName, targetEntityType, collection, onDependent, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionEntityTypeBuilder.HasSkipNavigation (string navigationName, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool? collection, bool? onDependent, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="collection" Type="System.Nullable&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="onDependent" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="targetEntityType">To be added.</param>
        <param name="collection">To be added.</param>
        <param name="onDependent">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder IConventionEntityTypeBuilder.HasSkipNavigation (System.Reflection.MemberInfo navigation, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo inverseNavigation, bool? collections, bool? onDependent, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(class System.Reflection.MemberInfo navigation, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, class System.Reflection.MemberInfo inverseNavigation, valuetype System.Nullable`1&lt;bool&gt; collections, valuetype System.Nullable`1&lt;bool&gt; onDependent, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasSkipNavigation(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasSkipNavigation (navigation As MemberInfo, targetEntityType As IConventionEntityType, inverseNavigation As MemberInfo, collections As Nullable(Of Boolean), onDependent As Nullable(Of Boolean), fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionEntityTypeBuilder.HasSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation (navigation, targetEntityType, inverseNavigation, collections, onDependent, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionEntityTypeBuilder.HasSkipNavigation (System.Reflection.MemberInfo navigation, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, System.Reflection.MemberInfo inverseNavigation, bool? collections, bool? onDependent, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inverseNavigation" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="collections" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="onDependent" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="targetEntityType">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="collections">To be added.</param>
        <param name="onDependent">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder IConventionEntityTypeBuilder.HasSkipNavigation (string navigationName, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, Type navigationType, bool? collection, bool? onDependent, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(string navigationName, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, class System.Type navigationType, valuetype System.Nullable`1&lt;bool&gt; collection, valuetype System.Nullable`1&lt;bool&gt; onDependent, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasSkipNavigation(System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Type,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasSkipNavigation (navigationName As String, targetEntityType As IConventionEntityType, navigationType As Type, collection As Nullable(Of Boolean), onDependent As Nullable(Of Boolean), fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionEntityTypeBuilder.HasSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation : string * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Type * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation : string * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Type * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation (navigationName, targetEntityType, navigationType, collection, onDependent, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Type,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="navigationType" Type="System.Type" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="collection" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="onDependent" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationType">To be added.</param>
        <param name="collection">To be added.</param>
        <param name="onDependent">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasTrigger">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder IConventionEntityTypeBuilder.HasTrigger (string modelName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasTrigger(string modelName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#HasTrigger(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasTrigger (modelName As String, fromDataAnnotation As Boolean) As IConventionTriggerBuilder Implements IConventionEntityTypeBuilder.HasTrigger" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasTrigger : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasTrigger : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasTrigger (modelName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasTrigger(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="modelName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Ignore">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.Ignore (string name, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Ignore(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#Ignore(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function Ignore (name As String, fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.Ignore" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Ignore : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Ignore : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Ignore (name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.Ignore (string name, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Ignore(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IndexerProperty">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? IConventionEntityTypeBuilder.IndexerProperty (Type propertyType, string propertyName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IndexerProperty(class System.Type propertyType, string propertyName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#IndexerProperty(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IndexerProperty (propertyType As Type, propertyName As String, fromDataAnnotation As Boolean) As IConventionPropertyBuilder Implements IConventionEntityTypeBuilder.IndexerProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IndexerProperty : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IndexerProperty : Type * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IndexerProperty (propertyType, propertyName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IConventionEntityTypeBuilder.IndexerProperty (Type propertyType, string propertyName, bool fromDataAnnotation);" FrameworkAlternate="efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IndexerProperty(System.Type,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IsIgnored">
      <MemberSignature Language="C#" Value="bool IConventionEntityTypeBuilder.IsIgnored (string name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IsIgnored(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#IsIgnored(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IsIgnored (name As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionEntityTypeBuilder.IsIgnored" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IsIgnored : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IsIgnored : string * bool -&gt; bool" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IsIgnored (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IsIgnored(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionEntityType Implements IConventionEntityTypeBuilder.Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder IConventionEntityTypeBuilder.PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#PrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function PrimaryKey (properties As IReadOnlyList(Of IConventionProperty), fromDataAnnotation As Boolean) As IConventionKeyBuilder Implements IConventionEntityTypeBuilder.PrimaryKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey (properties, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder? IConventionEntityTypeBuilder.PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;? properties, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder IConventionEntityTypeBuilder.PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#PrimaryKey(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function PrimaryKey (propertyNames As IReadOnlyList(Of String), fromDataAnnotation As Boolean) As IConventionKeyBuilder Implements IConventionEntityTypeBuilder.PrimaryKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey (propertyNames, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IConventionEntityTypeBuilder.Property (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property(class System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#Property(System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function Property (memberInfo As MemberInfo, fromDataAnnotation As Boolean) As IConventionPropertyBuilder Implements IConventionEntityTypeBuilder.Property" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property (memberInfo, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? IConventionEntityTypeBuilder.Property (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property(System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IConventionEntityTypeBuilder.Property (Type propertyType, string propertyName, bool setTypeConfigurationSource, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property(class System.Type propertyType, string propertyName, bool setTypeConfigurationSource, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#Property(System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function Property (propertyType As Type, propertyName As String, setTypeConfigurationSource As Boolean, fromDataAnnotation As Boolean) As IConventionPropertyBuilder Implements IConventionEntityTypeBuilder.Property" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property : Type * string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property : Type * string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property (propertyType, propertyName, setTypeConfigurationSource, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? IConventionEntityTypeBuilder.Property (Type propertyType, string propertyName, bool setTypeConfigurationSource, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property(System.Type,System.String,System.Boolean,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="setTypeConfigurationSource" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="setTypeConfigurationSource">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedImplicitProperties">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.RemoveUnusedImplicitProperties (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedImplicitProperties(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#RemoveUnusedImplicitProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty})" />
      <MemberSignature Language="VB.NET" Value="Function RemoveUnusedImplicitProperties (properties As IReadOnlyList(Of IConventionProperty)) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.RemoveUnusedImplicitProperties" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedImplicitProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedImplicitProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedImplicitProperties properties" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedImplicitProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedShadowProperties">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.RemoveUnusedShadowProperties (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedShadowProperties(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#RemoveUnusedShadowProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveUnusedShadowProperties (properties As IReadOnlyList(Of IConventionProperty), fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.RemoveUnusedShadowProperties" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedShadowProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedShadowProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedShadowProperties (properties, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedShadowProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionEntityTypeBuilder.ServiceProperty (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty(class System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#ServiceProperty(System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function ServiceProperty (memberInfo As MemberInfo, fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionEntityTypeBuilder.ServiceProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty (memberInfo, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder? IConventionEntityTypeBuilder.ServiceProperty (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty(System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionEntityTypeBuilder.ServiceProperty (Type serviceType, System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty(class System.Type serviceType, class System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#ServiceProperty(System.Type,System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function ServiceProperty (serviceType As Type, memberInfo As MemberInfo, fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionEntityTypeBuilder.ServiceProperty" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty : Type * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty : Type * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty (serviceType, memberInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty(System.Type,System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="serviceType">To be added.</param>
        <param name="memberInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder IConventionEntityTypeBuilder.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeBuilder#UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As IConventionEntityTypeBuilder Implements IConventionEntityTypeBuilder.UsePropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="internalEntityTypeBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.UsePropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? IConventionEntityTypeBuilder.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase Navigation (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase Navigation(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Navigation(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Navigation (memberInfo As MemberInfo) As IMutableNavigationBase" />
      <MemberSignature Language="F#" Value="abstract member Navigation : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase&#xA;override this.Navigation : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase" Usage="internalEntityTypeBuilder.Navigation memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase Navigation (string navigationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase Navigation(string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Navigation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Navigation (navigationName As String) As IMutableNavigationBase" />
      <MemberSignature Language="F#" Value="abstract member Navigation : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase&#xA;override this.Navigation : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase" Usage="internalEntityTypeBuilder.Navigation navigationName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Navigation (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, string navigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Navigation(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Navigation(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Navigation (targetEntityTypeBuilder As InternalEntityTypeBuilder, navigationName As String, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Navigation (targetEntityTypeBuilder, navigationName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeBuilder">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Navigation (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, string navigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Navigation(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Navigation(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Navigation (targetEntityTypeBuilder As InternalEntityTypeBuilder, navigationName As String, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Navigation (targetEntityTypeBuilder, navigationName, configurationSource, setTargetAsPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeBuilder">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Navigation (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, System.Reflection.PropertyInfo navigationProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool strictPrincipalEnd = false);" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Navigation(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, class System.Reflection.PropertyInfo navigationProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool strictPrincipalEnd) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Navigation(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Navigation (targetEntityTypeBuilder As InternalEntityTypeBuilder, navigationProperty As PropertyInfo, configurationSource As ConfigurationSource, Optional strictPrincipalEnd As Boolean = false) As InternalRelationshipBuilder" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Navigation (targetEntityTypeBuilder, navigationProperty, configurationSource, strictPrincipalEnd)" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Navigation (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, System.Reflection.PropertyInfo navigationProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Navigation(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, class System.Reflection.PropertyInfo navigationProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Navigation (targetEntityTypeBuilder As InternalEntityTypeBuilder, navigationProperty As PropertyInfo, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalRelationshipBuilder" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Navigation (targetEntityTypeBuilder, navigationProperty, configurationSource, setTargetAsPrincipal)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="navigationProperty" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="strictPrincipalEnd" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeBuilder">To be added.</param>
        <param name="navigationProperty">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="strictPrincipalEnd">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Owns">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns (string targetEntityTypeName, System.Reflection.PropertyInfo navigationProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns(string targetEntityTypeName, class System.Reflection.PropertyInfo navigationProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.String,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Owns (targetEntityTypeName As String, navigationProperty As PropertyInfo, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Owns : string * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Owns : string * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Owns (targetEntityTypeName, navigationProperty, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="navigationProperty" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeName">To be added.</param>
        <param name="navigationProperty">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Owns">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns (string targetEntityTypeName, string navigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns(string targetEntityTypeName, string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Owns (targetEntityTypeName As String, navigationName As String, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Owns : string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Owns : string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Owns (targetEntityTypeName, navigationName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeName">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Owns">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns (Type targetEntityType, System.Reflection.PropertyInfo navigationProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns(class System.Type targetEntityType, class System.Reflection.PropertyInfo navigationProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.Type,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Owns (targetEntityType As Type, navigationProperty As PropertyInfo, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Owns : Type * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Owns : Type * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Owns (targetEntityType, navigationProperty, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="navigationProperty" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationProperty">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Owns">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns (Type targetEntityType, string navigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns(class System.Type targetEntityType, string navigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Owns (targetEntityType As Type, navigationName As String, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Owns : Type * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Owns : Type * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Owns (targetEntityType, navigationName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Owns">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns (Type targetEntityType, System.Reflection.MemberInfo navigationProperty, System.Reflection.MemberInfo inverseProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns(class System.Type targetEntityType, class System.Reflection.MemberInfo navigationProperty, class System.Reflection.MemberInfo inverseProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.Type,System.Reflection.MemberInfo,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Owns (targetEntityType As Type, navigationProperty As MemberInfo, inverseProperty As MemberInfo, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Owns : Type * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Owns : Type * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Owns (targetEntityType, navigationProperty, inverseProperty, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="navigationProperty" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="inverseProperty" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationProperty">To be added.</param>
        <param name="inverseProperty">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Owns">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns (Type targetEntityType, System.Reflection.PropertyInfo navigationProperty, System.Reflection.PropertyInfo inverseProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Owns(class System.Type targetEntityType, class System.Reflection.PropertyInfo navigationProperty, class System.Reflection.PropertyInfo inverseProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Owns(System.Type,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Owns (targetEntityType As Type, navigationProperty As PropertyInfo, inverseProperty As PropertyInfo, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Owns : Type * System.Reflection.PropertyInfo * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Owns : Type * System.Reflection.PropertyInfo * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Owns (targetEntityType, navigationProperty, inverseProperty, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="navigationProperty" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="inverseProperty" Type="System.Reflection.PropertyInfo" Index="2" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="3" FrameworkAlternate="efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityType">To be added.</param>
        <param name="navigationProperty">To be added.</param>
        <param name="inverseProperty">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimaryKey (properties As IReadOnlyList(Of Property), configurationSource As ConfigurationSource) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.PrimaryKey (properties, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder? PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimaryKey (properties As IReadOnlyList(Of Property), configurationSource As ConfigurationSource) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.PrimaryKey (properties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.MemberInfo&gt; clrMembers, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{System.Reflection.MemberInfo},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimaryKey (clrMembers As IReadOnlyList(Of MemberInfo), configurationSource As ConfigurationSource) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.PrimaryKey (clrMembers, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder? PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt;? clrMembers, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrMembers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="clrMembers">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; clrProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; clrProperties, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimaryKey (clrProperties As IReadOnlyList(Of PropertyInfo), configurationSource As ConfigurationSource) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.PrimaryKey (clrProperties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrProperties" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="clrProperties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimaryKey (propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.PrimaryKey (propertyNames, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder? PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;string&gt;? propertyNames, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder PrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.PrimaryKey(System.Collections.Generic.IReadOnlyList{System.String},Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimaryKey (propertyNames As IReadOnlyList(Of String), configurationSource As ConfigurationSource) As InternalKeyBuilder" />
      <MemberSignature Language="F#" Value="abstract member PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder&#xA;override this.PrimaryKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder" Usage="internalEntityTypeBuilder.PrimaryKey (propertyNames, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyNames">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property (System.Reflection.MemberInfo clrProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property(class System.Reflection.MemberInfo clrProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (clrProperty As MemberInfo, configurationSource As ConfigurationSource) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.Property : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.Property (clrProperty, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrProperty" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="clrProperty">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property(class System.Reflection.MemberInfo memberInfo, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.Reflection.MemberInfo,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (memberInfo As MemberInfo, configurationSource As Nullable(Of ConfigurationSource)) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.Property : System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.Property (memberInfo, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder? Property (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property (System.Reflection.PropertyInfo clrProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property(class System.Reflection.PropertyInfo clrProperty, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (clrProperty As PropertyInfo, configurationSource As ConfigurationSource) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.Property : System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.Property (clrProperty, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrProperty" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="clrProperty">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property (string propertyName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property(string propertyName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyName As String, configurationSource As ConfigurationSource) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.Property : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.Property (propertyName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property (string propertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property(string propertyName, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyName As String, configurationSource As Nullable(Of ConfigurationSource)) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.Property : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.Property (propertyName, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder? Property (string propertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property (string propertyName, Type propertyType, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property(string propertyName, class System.Type propertyType, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyName As String, propertyType As Type, configurationSource As ConfigurationSource) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : string * Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.Property : string * Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.Property (propertyName, propertyType, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyType" Type="System.Type" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="propertyType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property (Type propertyType, string propertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property(class System.Type propertyType, string propertyName, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.Type,System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyType As Type, propertyName As String, configurationSource As Nullable(Of ConfigurationSource)) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : Type * string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.Property : Type * string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.Property (propertyType, propertyName, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder? Property (Type? propertyType, string propertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property (string propertyName, Type propertyType, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? typeConfigurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property(string propertyName, class System.Type propertyType, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; typeConfigurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyName As String, propertyType As Type, configurationSource As ConfigurationSource, typeConfigurationSource As Nullable(Of ConfigurationSource)) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : string * Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.Property : string * Type * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.Property (propertyName, propertyType, configurationSource, typeConfigurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyType" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="typeConfigurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="propertyType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="typeConfigurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property (Type propertyType, string propertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? typeConfigurationSource, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder Property(class System.Type propertyType, string propertyName, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; typeConfigurationSource, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Property(System.Type,System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyType As Type, propertyName As String, typeConfigurationSource As Nullable(Of ConfigurationSource), configurationSource As Nullable(Of ConfigurationSource)) As InternalPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : Type * string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder&#xA;override this.Property : Type * string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder" Usage="internalEntityTypeBuilder.Property (propertyType, propertyName, typeConfigurationSource, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder? Property (Type? propertyType, string propertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? typeConfigurationSource, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="typeConfigurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <param name="propertyName">To be added.</param>
        <param name="typeConfigurationSource">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Relationship (principalEntityType As EntityType, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Relationship (principalEntityType, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Relationship (principalEntityTypeBuilder As InternalEntityTypeBuilder, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Relationship (principalEntityTypeBuilder, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeBuilder">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType principalEntityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Relationship (principalEntityType As EntityType, principalKey As Key, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Relationship (principalEntityType, principalKey, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder principalEntityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Relationship (principalEntityTypeBuilder As InternalEntityTypeBuilder, principalKey As Key, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Relationship (principalEntityTypeBuilder, principalKey, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="principalEntityTypeBuilder">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, System.Reflection.PropertyInfo navigationToTarget, System.Reflection.PropertyInfo inverseNavigation, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, class System.Reflection.PropertyInfo navigationToTarget, class System.Reflection.PropertyInfo inverseNavigation, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Relationship (targetEntityTypeBuilder As InternalEntityTypeBuilder, navigationToTarget As PropertyInfo, inverseNavigation As PropertyInfo, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Reflection.PropertyInfo * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Reflection.PropertyInfo * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Relationship (targetEntityTypeBuilder, navigationToTarget, inverseNavigation, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="navigationToTarget" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="inverseNavigation" Type="System.Reflection.PropertyInfo" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeBuilder">To be added.</param>
        <param name="navigationToTarget">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, string navigationToTargetName, string inverseNavigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, string navigationToTargetName, string inverseNavigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Relationship (targetEntityTypeBuilder As InternalEntityTypeBuilder, navigationToTargetName As String, inverseNavigationName As String, configurationSource As ConfigurationSource) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Relationship (targetEntityTypeBuilder, navigationToTargetName, inverseNavigationName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="navigationToTargetName" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="inverseNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeBuilder">To be added.</param>
        <param name="navigationToTargetName">To be added.</param>
        <param name="inverseNavigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, System.Reflection.MemberInfo navigationToTarget, System.Reflection.MemberInfo inverseNavigation, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, class System.Reflection.MemberInfo navigationToTarget, class System.Reflection.MemberInfo inverseNavigation, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Reflection.MemberInfo,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Relationship (targetEntityTypeBuilder As InternalEntityTypeBuilder, navigationToTarget As MemberInfo, inverseNavigation As MemberInfo, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Reflection.MemberInfo * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Relationship (targetEntityTypeBuilder, navigationToTarget, inverseNavigation, configurationSource, setTargetAsPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="navigationToTarget" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="inverseNavigation" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeBuilder">To be added.</param>
        <param name="navigationToTarget">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, System.Reflection.PropertyInfo navigationToTarget, System.Reflection.PropertyInfo inverseNavigation, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, class System.Reflection.PropertyInfo navigationToTarget, class System.Reflection.PropertyInfo inverseNavigation, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Relationship (targetEntityTypeBuilder As InternalEntityTypeBuilder, navigationToTarget As PropertyInfo, inverseNavigation As PropertyInfo, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Reflection.PropertyInfo * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * System.Reflection.PropertyInfo * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Relationship (targetEntityTypeBuilder, navigationToTarget, inverseNavigation, configurationSource, setTargetAsPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="navigationToTarget" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="inverseNavigation" Type="System.Reflection.PropertyInfo" Index="2" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="3" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeBuilder">To be added.</param>
        <param name="navigationToTarget">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relationship">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, string navigationToTargetName, string inverseNavigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool setTargetAsPrincipal = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder Relationship(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder targetEntityTypeBuilder, string navigationToTargetName, string inverseNavigationName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool setTargetAsPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Relationship(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Relationship (targetEntityTypeBuilder As InternalEntityTypeBuilder, navigationToTargetName As String, inverseNavigationName As String, configurationSource As ConfigurationSource, Optional setTargetAsPrincipal As Boolean = false) As InternalRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.Relationship : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.Relationship (targetEntityTypeBuilder, navigationToTargetName, inverseNavigationName, configurationSource, setTargetAsPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetEntityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="navigationToTargetName" Type="System.String" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="inverseNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="setTargetAsPrincipal" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="targetEntityTypeBuilder">To be added.</param>
        <param name="navigationToTargetName">To be added.</param>
        <param name="inverseNavigationName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="setTargetAsPrincipal">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? RemoveForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; RemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveForeignKey (foreignKey As ForeignKey, configurationSource As ConfigurationSource) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="internalEntityTypeBuilder.RemoveForeignKey (foreignKey, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? RemoveForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions);" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; RemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions) cil managed" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveForeignKey (foreignKey As ForeignKey, configurationSource As ConfigurationSource, runConventions As Boolean) As Nullable(Of ConfigurationSource)" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="F#" Value="abstract member RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="internalEntityTypeBuilder.RemoveForeignKey (foreignKey, configurationSource, runConventions)" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? RemoveForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool canOverrideSameSource = true);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; RemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool canOverrideSameSource) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveForeignKey (foreignKey As ForeignKey, configurationSource As ConfigurationSource, Optional canOverrideSameSource As Boolean = true) As Nullable(Of ConfigurationSource)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="internalEntityTypeBuilder.RemoveForeignKey (foreignKey, configurationSource, canOverrideSameSource)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-1.0;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="runConventions" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="canOverrideSameSource" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="runConventions">To be added.</param>
        <param name="canOverrideSameSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? RemoveForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool canOverrideSameSource = true, bool runConventions = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; RemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool canOverrideSameSource, bool runConventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveForeignKey (foreignKey As ForeignKey, configurationSource As ConfigurationSource, Optional canOverrideSameSource As Boolean = true, Optional runConventions As Boolean = true) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="internalEntityTypeBuilder.RemoveForeignKey (foreignKey, configurationSource, canOverrideSameSource, runConventions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="canOverrideSameSource" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="runConventions" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="canOverrideSameSource">To be added.</param>
        <param name="runConventions">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? RemoveIndex (Microsoft.EntityFrameworkCore.Metadata.Internal.Index index, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; RemoveIndex(class Microsoft.EntityFrameworkCore.Metadata.Internal.Index index, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveIndex(Microsoft.EntityFrameworkCore.Metadata.Internal.Index,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveIndex (index As Index, configurationSource As ConfigurationSource) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveIndex : Microsoft.EntityFrameworkCore.Metadata.Internal.Index * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.RemoveIndex : Microsoft.EntityFrameworkCore.Metadata.Internal.Index * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="internalEntityTypeBuilder.RemoveIndex (index, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Index" Index="0" FrameworkAlternate="efcore-1.0;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? RemoveIndex (Microsoft.EntityFrameworkCore.Metadata.Internal.Index index, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; RemoveIndex(class Microsoft.EntityFrameworkCore.Metadata.Internal.Index index, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveIndex(Microsoft.EntityFrameworkCore.Metadata.Internal.Index,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveIndex (index As Index, configurationSource As ConfigurationSource, Optional runConventions As Boolean = true) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveIndex : Microsoft.EntityFrameworkCore.Metadata.Internal.Index * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.RemoveIndex : Microsoft.EntityFrameworkCore.Metadata.Internal.Index * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="internalEntityTypeBuilder.RemoveIndex (index, configurationSource, runConventions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Index" Index="0" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="runConventions" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="runConventions">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? RemoveKey (Microsoft.EntityFrameworkCore.Metadata.Internal.Key key, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; RemoveKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.Key key, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveKey (key As Key, configurationSource As ConfigurationSource) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveKey : Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.RemoveKey : Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="internalEntityTypeBuilder.RemoveKey (key, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource? RemoveKey (Microsoft.EntityFrameworkCore.Metadata.Internal.Key key, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt; RemoveKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.Key key, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource, bool runConventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveKey(Microsoft.EntityFrameworkCore.Metadata.Internal.Key,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveKey (key As Key, configurationSource As ConfigurationSource, Optional runConventions As Boolean = true) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveKey : Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;&#xA;override this.RemoveKey : Microsoft.EntityFrameworkCore.Metadata.Internal.Key * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;" Usage="internalEntityTypeBuilder.RemoveKey (key, configurationSource, runConventions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="runConventions" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <param name="runConventions">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMembersInHierarchy">
      <MemberSignature Language="C#" Value="public override void RemoveMembersInHierarchy (string propertyName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveMembersInHierarchy(string propertyName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveMembersInHierarchy(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveMembersInHierarchy (propertyName As String, configurationSource As ConfigurationSource)" />
      <MemberSignature Language="F#" Value="override this.RemoveMembersInHierarchy : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; unit" Usage="internalEntityTypeBuilder.RemoveMembersInHierarchy (propertyName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNonOwnershipRelationships">
      <MemberSignature Language="C#" Value="public virtual void RemoveNonOwnershipRelationships (Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveNonOwnershipRelationships(valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveNonOwnershipRelationships(Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveNonOwnershipRelationships (configurationSource As ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveNonOwnershipRelationships : Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; unit&#xA;override this.RemoveNonOwnershipRelationships : Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; unit" Usage="internalEntityTypeBuilder.RemoveNonOwnershipRelationships configurationSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="0" FrameworkAlternate="efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNonOwnershipRelationships">
      <MemberSignature Language="C#" Value="public virtual bool RemoveNonOwnershipRelationships (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey ownership, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveNonOwnershipRelationships(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey ownership, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveNonOwnershipRelationships(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveNonOwnershipRelationships (ownership As ForeignKey, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member RemoveNonOwnershipRelationships : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.RemoveNonOwnershipRelationships : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.RemoveNonOwnershipRelationships (ownership, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownership" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="ownership">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNonOwnershipRelationships">
      <MemberSignature Language="C#" Value="public virtual bool RemoveNonOwnershipRelationships (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey ownership, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveNonOwnershipRelationships(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey ownership, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveNonOwnershipRelationships(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveNonOwnershipRelationships (ownership As ForeignKey, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member RemoveNonOwnershipRelationships : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.RemoveNonOwnershipRelationships : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.RemoveNonOwnershipRelationships (ownership, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownership" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="ownership">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveShadowPropertiesIfUnused">
      <MemberSignature Language="C#" Value="public virtual void RemoveShadowPropertiesIfUnused (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveShadowPropertiesIfUnused(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveShadowPropertiesIfUnused(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveShadowPropertiesIfUnused (properties As IEnumerable(Of Property))" />
      <MemberSignature Language="F#" Value="abstract member RemoveShadowPropertiesIfUnused : seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; -&gt; unit&#xA;override this.RemoveShadowPropertiesIfUnused : seq&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; -&gt; unit" Usage="internalEntityTypeBuilder.RemoveShadowPropertiesIfUnused properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveShadowPropertiesIfUnused">
      <MemberSignature Language="C#" Value="public virtual void RemoveShadowPropertiesIfUnused (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveShadowPropertiesIfUnused(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveShadowPropertiesIfUnused(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveShadowPropertiesIfUnused (properties As IReadOnlyList(Of Property))" />
      <MemberSignature Language="F#" Value="abstract member RemoveShadowPropertiesIfUnused : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; -&gt; unit&#xA;override this.RemoveShadowPropertiesIfUnused : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; -&gt; unit" Usage="internalEntityTypeBuilder.RemoveShadowPropertiesIfUnused properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveUnusedImplicitProperties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder RemoveUnusedImplicitProperties&lt;T&gt; (System.Collections.Generic.IReadOnlyList&lt;T&gt; properties) where T : class, Microsoft.EntityFrameworkCore.Metadata.IConventionProperty;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder RemoveUnusedImplicitProperties&lt;class (class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty) T&gt;(class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveUnusedImplicitProperties``1(System.Collections.Generic.IReadOnlyList{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveUnusedImplicitProperties(Of T As {Class, IConventionProperty}) (properties As IReadOnlyList(Of T)) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member RemoveUnusedImplicitProperties : System.Collections.Generic.IReadOnlyList&lt;'T (requires 'T : null and 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder (requires 'T : null and 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)&#xA;override this.RemoveUnusedImplicitProperties : System.Collections.Generic.IReadOnlyList&lt;'T (requires 'T : null and 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder (requires 'T : null and 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)" Usage="internalEntityTypeBuilder.RemoveUnusedImplicitProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;T&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="properties">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveUnusedShadowProperties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder RemoveUnusedShadowProperties&lt;T&gt; (System.Collections.Generic.IReadOnlyList&lt;T&gt; properties, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource = Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource.Convention) where T : class, Microsoft.EntityFrameworkCore.Metadata.IProperty;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder RemoveUnusedShadowProperties&lt;class (class Microsoft.EntityFrameworkCore.Metadata.IProperty) T&gt;(class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; properties, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.RemoveUnusedShadowProperties``1(System.Collections.Generic.IReadOnlyList{``0},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveUnusedShadowProperties(Of T As {Class, IProperty}) (properties As IReadOnlyList(Of T), Optional configurationSource As ConfigurationSource = Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource.Convention) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member RemoveUnusedShadowProperties : System.Collections.Generic.IReadOnlyList&lt;'T (requires 'T : null and 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty)&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder (requires 'T : null and 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty)&#xA;override this.RemoveUnusedShadowProperties : System.Collections.Generic.IReadOnlyList&lt;'T (requires 'T : null and 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty)&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder (requires 'T : null and 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty)" Usage="internalEntityTypeBuilder.RemoveUnusedShadowProperties (properties, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IProperty</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;T&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="properties">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReUniquifyTemporaryProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; ReUniquifyTemporaryProperties (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; currentProperties, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; principalProperties, bool isRequired, string baseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; ReUniquifyTemporaryProperties(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; currentProperties, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; principalProperties, bool isRequired, string baseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.ReUniquifyTemporaryProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReUniquifyTemporaryProperties (currentProperties As IReadOnlyList(Of Property), principalProperties As IReadOnlyList(Of Property), isRequired As Boolean, baseName As String) As IReadOnlyList(Of Property)" />
      <MemberSignature Language="F#" Value="abstract member ReUniquifyTemporaryProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * bool * string -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;&#xA;override this.ReUniquifyTemporaryProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * bool * string -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Usage="internalEntityTypeBuilder.ReUniquifyTemporaryProperties (currentProperties, principalProperties, isRequired, baseName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1" />
        <Parameter Name="principalProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1" />
        <Parameter Name="isRequired" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1" />
        <Parameter Name="baseName" Type="System.String" Index="3" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="currentProperties">To be added.</param>
        <param name="principalProperties">To be added.</param>
        <param name="isRequired">To be added.</param>
        <param name="baseName">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder ServiceProperty (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder ServiceProperty(class System.Reflection.MemberInfo memberInfo, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.ServiceProperty(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ServiceProperty (memberInfo As MemberInfo, configurationSource As ConfigurationSource) As InternalServicePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ServiceProperty : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder&#xA;override this.ServiceProperty : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalEntityTypeBuilder.ServiceProperty (memberInfo, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder ServiceProperty (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder ServiceProperty(class System.Reflection.MemberInfo memberInfo, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.ServiceProperty(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ServiceProperty (memberInfo As MemberInfo, configurationSource As ConfigurationSource) As InternalServicePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ServiceProperty : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder&#xA;override this.ServiceProperty : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalEntityTypeBuilder.ServiceProperty (memberInfo, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder ServiceProperty (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder ServiceProperty(class System.Reflection.MemberInfo memberInfo, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.ServiceProperty(System.Reflection.MemberInfo,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ServiceProperty (memberInfo As MemberInfo, configurationSource As Nullable(Of ConfigurationSource)) As InternalServicePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ServiceProperty : System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder&#xA;override this.ServiceProperty : System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalEntityTypeBuilder.ServiceProperty (memberInfo, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder? ServiceProperty (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder? ServiceProperty (Type serviceType, System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder ServiceProperty(class System.Type serviceType, class System.Reflection.MemberInfo memberInfo, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.ServiceProperty(System.Type,System.Reflection.MemberInfo,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ServiceProperty (serviceType As Type, memberInfo As MemberInfo, configurationSource As Nullable(Of ConfigurationSource)) As InternalServicePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ServiceProperty : Type * System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder&#xA;override this.ServiceProperty : Type * System.Reflection.MemberInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalEntityTypeBuilder.ServiceProperty (serviceType, memberInfo, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="serviceType">To be added.</param>
        <param name="memberInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReuniquifyTemporaryProperties">
      <MemberSignature Language="C#" Value="public virtual bool ShouldReuniquifyTemporaryProperties (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldReuniquifyTemporaryProperties(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.ShouldReuniquifyTemporaryProperties(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldReuniquifyTemporaryProperties (foreignKey As ForeignKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldReuniquifyTemporaryProperties : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey -&gt; bool&#xA;override this.ShouldReuniquifyTemporaryProperties : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey -&gt; bool" Usage="internalEntityTypeBuilder.ShouldReuniquifyTemporaryProperties foreignKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReuniquifyTemporaryProperties">
      <MemberSignature Language="C#" Value="public virtual bool ShouldReuniquifyTemporaryProperties (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; currentProperties, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; principalProperties, bool isRequired, string baseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldReuniquifyTemporaryProperties(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; currentProperties, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; principalProperties, bool isRequired, string baseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.ShouldReuniquifyTemporaryProperties(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldReuniquifyTemporaryProperties (currentProperties As IReadOnlyList(Of Property), principalProperties As IReadOnlyList(Of Property), isRequired As Boolean, baseName As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldReuniquifyTemporaryProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * bool * string -&gt; bool&#xA;override this.ShouldReuniquifyTemporaryProperties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * bool * string -&gt; bool" Usage="internalEntityTypeBuilder.ShouldReuniquifyTemporaryProperties (currentProperties, principalProperties, isRequired, baseName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="principalProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="1" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="isRequired" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="baseName" Type="System.String" Index="3" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="currentProperties">To be added.</param>
        <param name="principalProperties">To be added.</param>
        <param name="isRequired">To be added.</param>
        <param name="baseName">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unignore">
      <MemberSignature Language="C#" Value="public virtual void Unignore (string memberName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unignore(string memberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.Unignore(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Unignore (memberName As String)" />
      <MemberSignature Language="F#" Value="abstract member Unignore : string -&gt; unit&#xA;override this.Unignore : string -&gt; unit" Usage="internalEntityTypeBuilder.Unignore memberName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="memberName">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder UpdateForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string navigationToPrincipalName, bool? isRequired, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder UpdateForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string navigationToPrincipalName, valuetype System.Nullable`1&lt;bool&gt; isRequired, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.UpdateForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Property},Microsoft.EntityFrameworkCore.Metadata.Internal.Key,System.String,System.Nullable{System.Boolean},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateForeignKey (foreignKey As ForeignKey, dependentProperties As IReadOnlyList(Of Property), principalKey As Key, navigationToPrincipalName As String, isRequired As Nullable(Of Boolean), configurationSource As Nullable(Of ConfigurationSource)) As InternalRelationshipBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member UpdateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder&#xA;override this.UpdateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Usage="internalEntityTypeBuilder.UpdateForeignKey (foreignKey, dependentProperties, principalKey, navigationToPrincipalName, isRequired, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder UpdateForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string propertyBaseName, bool? isRequired, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder UpdateForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; dependentProperties, class Microsoft.EntityFrameworkCore.Metadata.Internal.Key principalKey, string propertyBaseName, valuetype System.Nullable`1&lt;bool&gt; isRequired, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateForeignKey (foreignKey As ForeignKey, dependentProperties As IReadOnlyList(Of Property), principalKey As Key, propertyBaseName As String, isRequired As Nullable(Of Boolean), configurationSource As Nullable(Of ConfigurationSource)) As InternalForeignKeyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member UpdateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder&#xA;override this.UpdateForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt; * Microsoft.EntityFrameworkCore.Metadata.Internal.Key * string * Nullable&lt;bool&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Usage="internalEntityTypeBuilder.UpdateForeignKey (foreignKey, dependentProperties, principalKey, propertyBaseName, isRequired, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder? UpdateForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;? dependentProperties, Microsoft.EntityFrameworkCore.Metadata.Internal.Key? principalKey, string? propertyBaseName, bool? isRequired, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="dependentProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Property&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.Key" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationToPrincipalName" Type="System.String" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="propertyBaseName" Type="System.String" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="isRequired" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="5" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="dependentProperties">To be added.</param>
        <param name="principalKey">To be added.</param>
        <param name="navigationToPrincipalName">To be added.</param>
        <param name="propertyBaseName">To be added.</param>
        <param name="isRequired">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual bool UsePropertyAccessMode (Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode propertyAccessMode, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As PropertyAccessMode, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member UsePropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.UsePropertyAccessMode (propertyAccessMode, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" Index="0" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual bool UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As PropertyAccessMode, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalEntityTypeBuilder.UsePropertyAccessMode (propertyAccessMode, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), configurationSource As ConfigurationSource) As InternalEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder&#xA;override this.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Usage="internalEntityTypeBuilder.UsePropertyAccessMode (propertyAccessMode, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
