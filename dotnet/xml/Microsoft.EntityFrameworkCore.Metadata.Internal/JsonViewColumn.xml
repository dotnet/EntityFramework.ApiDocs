<Type Name="JsonViewColumn" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn">
  <TypeSignature Language="C#" Value="public class JsonViewColumn : Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumn" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JsonViewColumn extends Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumn implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IColumnBase, class Microsoft.EntityFrameworkCore.Metadata.IViewColumn" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonViewColumn&#xA;Inherits ViewColumn" />
  <TypeSignature Language="F#" Value="type JsonViewColumn = class&#xA;    inherit ViewColumn&#xA;    interface IViewColumn&#xA;    interface IColumnBase&#xA;    interface IAnnotatable&#xA;    interface IReadOnlyAnnotatable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumn</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IColumnBase</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IViewColumn</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonViewColumn (string name, string type, Microsoft.EntityFrameworkCore.Metadata.Internal.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string type, class Microsoft.EntityFrameworkCore.Metadata.Internal.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.View)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, type As String, view As View)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn : string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.View -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn (name, type, view)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="type" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="view" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.View" Index="2" FrameworkAlternate="efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="view">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonViewColumn (string name, string type, Microsoft.EntityFrameworkCore.Metadata.Internal.View view, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping? storeTypeMapping = default, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? providerValueComparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string type, class Microsoft.EntityFrameworkCore.Metadata.Internal.View view, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping storeTypeMapping, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer providerValueComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.View,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, type As String, view As View, Optional storeTypeMapping As RelationalTypeMapping = Nothing, Optional providerValueComparer As ValueComparer = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn : string * string * Microsoft.EntityFrameworkCore.Metadata.Internal.View * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn (name, type, view, storeTypeMapping, providerValueComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="type" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="view" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.View" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="storeTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="providerValueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="4" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="view">To be added.</param>
        <param name="storeTypeMapping">To be added.</param>
        <param name="providerValueComparer">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultStoreTypeMapping">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetDefaultStoreTypeMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetDefaultStoreTypeMapping() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.JsonViewColumn.GetDefaultStoreTypeMapping" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetDefaultStoreTypeMapping () As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="override this.GetDefaultStoreTypeMapping : unit -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="jsonViewColumn.GetDefaultStoreTypeMapping " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
