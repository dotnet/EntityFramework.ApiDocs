<Type Name="CosmosConventionSetBuilder" FullName="Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder">
  <TypeSignature Language="C#" Value="public class CosmosConventionSetBuilder : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CosmosConventionSetBuilder extends Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosConventionSetBuilder&#xA;Inherits ProviderConventionSetBuilder" />
  <TypeSignature Language="F#" Value="type CosmosConventionSetBuilder = class&#xA;    inherit ProviderConventionSetBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CosmosConventionSetBuilder (Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As ProviderConventionSetBuilderDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies -&gt; Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CosmosConventionSetBuilder (Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies dependencies, Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.IJsonIdDefinitionFactory definitionFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies dependencies, class Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.IJsonIdDefinitionFactory definitionFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.IJsonIdDefinitionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As ProviderConventionSetBuilderDependencies, definitionFactory As IJsonIdDefinitionFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies * Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.IJsonIdDefinitionFactory -&gt; Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder (dependencies, definitionFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="definitionFactory" Type="Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.IJsonIdDefinitionFactory" Index="1" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="definitionFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConventionSet">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet CreateConventionSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet CreateConventionSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder.CreateConventionSet" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateConventionSet () As ConventionSet" />
      <MemberSignature Language="F#" Value="override this.CreateConventionSet : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" Usage="cosmosConventionSetBuilder.CreateConventionSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateModelBuilder">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ModelBuilder CreateModelBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ModelBuilder CreateModelBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder.CreateModelBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateModelBuilder () As ModelBuilder" />
      <MemberSignature Language="F#" Value="static member CreateModelBuilder : unit -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder.CreateModelBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Call this method to build a <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> for Cosmos outside of <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
            </summary>
        <returns>The convention set.</returns>
        <remarks>
                Note that it is unusual to use this method. Consider using <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> in the normal way instead.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefinitionFactory">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.IJsonIdDefinitionFactory DefinitionFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.IJsonIdDefinitionFactory DefinitionFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder.DefinitionFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefinitionFactory As IJsonIdDefinitionFactory" />
      <MemberSignature Language="F#" Value="member this.DefinitionFactory : Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.IJsonIdDefinitionFactory" Usage="Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder.DefinitionFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.IJsonIdDefinitionFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The factory to create a <see cref="T:Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.IJsonIdDefinition" /> for each entity type.
            </summary>
        <value>To be added.</value>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
