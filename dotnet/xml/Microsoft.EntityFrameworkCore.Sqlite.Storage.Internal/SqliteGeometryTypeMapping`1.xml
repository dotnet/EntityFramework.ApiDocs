<Type Name="SqliteGeometryTypeMapping&lt;TGeometry&gt;" FullName="Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;TGeometry&gt;">
  <TypeSignature Language="C#" Value="public class SqliteGeometryTypeMapping&lt;TGeometry&gt; : Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping&lt;TGeometry,byte[]&gt; where TGeometry : IGeometry" FrameworkAlternate="efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqliteGeometryTypeMapping`1&lt;(class GeoAPI.Geometries.IGeometry) TGeometry&gt; extends Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2&lt;!TGeometry, unsigned int8[]&gt;" FrameworkAlternate="efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1" />
  <TypeSignature Language="VB.NET" Value="Public Class SqliteGeometryTypeMapping(Of TGeometry)&#xA;Inherits RelationalGeometryTypeMapping(Of TGeometry, Byte())" />
  <TypeSignature Language="F#" Value="type SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; IGeometry)&gt; = class&#xA;    inherit RelationalGeometryTypeMapping&lt;'Geometry, byte[] (requires 'Geometry :&gt; IGeometry)&gt;" FrameworkAlternate="efcore-2.2" />
  <TypeSignature Language="C#" Value="public class SqliteGeometryTypeMapping&lt;TGeometry&gt; : Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping&lt;TGeometry,byte[]&gt; where TGeometry : Geometry" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqliteGeometryTypeMapping`1&lt;(class NetTopologySuite.Geometries.Geometry) TGeometry&gt; extends Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2&lt;!TGeometry, unsigned int8[]&gt;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; Geometry)&gt; = class&#xA;    inherit RelationalGeometryTypeMapping&lt;'Geometry, byte[] (requires 'Geometry :&gt; Geometry)&gt;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TGeometry">
      <Constraints>
        <InterfaceName>GeoAPI.Geometries.IGeometry</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping&lt;TGeometry,System.Byte[]&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">TGeometry</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!1">System.Byte[]</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TGeometry">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteGeometryTypeMapping (GeoAPI.IGeometryServices geometryServices, string storeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class GeoAPI.IGeometryServices geometryServices, string storeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1.#ctor(GeoAPI.IGeometryServices,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (geometryServices As IGeometryServices, storeType As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt; : GeoAPI.IGeometryServices * string -&gt; Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt;" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt; (geometryServices, storeType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="geometryServices" Type="GeoAPI.IGeometryServices" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="storeType" Type="System.String" Index="1" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="geometryServices">To be added.</param>
        <param name="storeType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SqliteGeometryTypeMapping (Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters parameters, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&lt;TGeometry,byte[]&gt; converter);" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping/RelationalTypeMappingParameters parameters, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2&lt;!TGeometry, unsigned int8[]&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter{`0,System.Byte[]})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (parameters As RelationalTypeMapping.RelationalTypeMappingParameters, converter As ValueConverter(Of TGeometry, Byte()))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt; : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&lt;'Geometry, byte[] (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt; -&gt; Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt;" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt; (parameters, converter)" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt; : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&lt;'Geometry, byte[] (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt; -&gt; Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt;" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt; (parameters, converter)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="protected SqliteGeometryTypeMapping (Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters parameters, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&lt;TGeometry,byte[]&gt;? converter);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping+RelationalTypeMappingParameters" />
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&lt;TGeometry,System.Byte[]&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <param name="converter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteGeometryTypeMapping (NetTopologySuite.NtsGeometryServices geometryServices, string storeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class NetTopologySuite.NtsGeometryServices geometryServices, string storeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1.#ctor(NetTopologySuite.NtsGeometryServices,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (geometryServices As NtsGeometryServices, storeType As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt; : NetTopologySuite.NtsGeometryServices * string -&gt; Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt;" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt; (geometryServices, storeType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="geometryServices" Type="NetTopologySuite.NtsGeometryServices" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="storeType" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="geometryServices">To be added.</param>
        <param name="storeType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsText">
      <MemberSignature Language="C#" Value="protected override string AsText (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string AsText(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1.AsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function AsText (value As Object) As String" />
      <MemberSignature Language="F#" Value="override this.AsText : obj -&gt; string" Usage="sqliteGeometryTypeMapping.AsText value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping Clone (Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping Clone(valuetype Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping/RelationalTypeMappingParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Clone (parameters As RelationalTypeMapping.RelationalTypeMappingParameters) As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="override this.Clone : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="sqliteGeometryTypeMapping.Clone parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping+RelationalTypeMappingParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateNonNullSqlLiteral">
      <MemberSignature Language="C#" Value="protected override string GenerateNonNullSqlLiteral (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GenerateNonNullSqlLiteral(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1.GenerateNonNullSqlLiteral(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GenerateNonNullSqlLiteral (value As Object) As String" />
      <MemberSignature Language="F#" Value="override this.GenerateNonNullSqlLiteral : obj -&gt; string" Usage="sqliteGeometryTypeMapping.GenerateNonNullSqlLiteral value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataReaderMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetDataReaderMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetDataReaderMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1.GetDataReaderMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDataReaderMethod () As MethodInfo" />
      <MemberSignature Language="F#" Value="override this.GetDataReaderMethod : unit -&gt; System.Reflection.MethodInfo" Usage="sqliteGeometryTypeMapping.GetDataReaderMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSrid">
      <MemberSignature Language="C#" Value="protected override int GetSrid (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 GetSrid(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1.GetSrid(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSrid (value As Object) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetSrid : obj -&gt; int" Usage="sqliteGeometryTypeMapping.GetSrid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WktReaderType">
      <MemberSignature Language="C#" Value="protected override Type WktReaderType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type WktReaderType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1.WktReaderType" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property WktReaderType As Type" />
      <MemberSignature Language="F#" Value="member this.WktReaderType : Type" Usage="Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt;.WktReaderType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WKTReaderType">
      <MemberSignature Language="C#" Value="protected override Type WKTReaderType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type WKTReaderType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping`1.WKTReaderType" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property WKTReaderType As Type" />
      <MemberSignature Language="F#" Value="member this.WKTReaderType : Type" Usage="Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt;.WKTReaderType" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="F#" Value="member this.WKTReaderType : Type" Usage="Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteGeometryTypeMapping&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt;.WKTReaderType" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
