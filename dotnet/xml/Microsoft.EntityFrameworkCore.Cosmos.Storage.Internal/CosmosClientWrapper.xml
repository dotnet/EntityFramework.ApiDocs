<Type Name="CosmosClientWrapper" FullName="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper">
  <TypeSignature Language="C#" Value="public class CosmosClientWrapper" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CosmosClientWrapper extends System.Object" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosClientWrapper" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type CosmosClientWrapper = class" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="C#" Value="public class CosmosClientWrapper : Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CosmosClientWrapper extends System.Object implements class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosClientWrapper&#xA;Implements ICosmosClientWrapper" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type CosmosClientWrapper = class&#xA;    interface ICosmosClientWrapper" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CosmosClientWrapper (Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ISingletonCosmosClientWrapper singletonWrapper, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions dbContextOptions, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy executionStrategy, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; commandLogger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ISingletonCosmosClientWrapper singletonWrapper, class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions dbContextOptions, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy executionStrategy, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Command&gt; commandLogger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.#ctor(Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ISingletonCosmosClientWrapper,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (singletonWrapper As ISingletonCosmosClientWrapper, dbContextOptions As IDbContextOptions, executionStrategy As IExecutionStrategy, commandLogger As IDiagnosticsLogger(Of DbLoggerCategory.Database.Command))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper : Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ISingletonCosmosClientWrapper * Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions * Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; -&gt; Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper (singletonWrapper, dbContextOptions, executionStrategy, commandLogger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="singletonWrapper" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ISingletonCosmosClientWrapper" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="dbContextOptions" Type="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="executionStrategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="commandLogger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Command&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="singletonWrapper">To be added.</param>
        <param name="dbContextOptions">To be added.</param>
        <param name="executionStrategy">To be added.</param>
        <param name="commandLogger">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CosmosClientWrapper (Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.SingletonCosmosClientWrapper singletonWrapper, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions dbContextOptions, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory executionStrategyFactory, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; commandLogger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.SingletonCosmosClientWrapper singletonWrapper, class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions dbContextOptions, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory executionStrategyFactory, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Command&gt; commandLogger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.#ctor(Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.SingletonCosmosClientWrapper,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (singletonWrapper As SingletonCosmosClientWrapper, dbContextOptions As IDbContextOptions, executionStrategyFactory As IExecutionStrategyFactory, commandLogger As IDiagnosticsLogger(Of DbLoggerCategory.Database.Command))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper : Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.SingletonCosmosClientWrapper * Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions * Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; -&gt; Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper (singletonWrapper, dbContextOptions, executionStrategyFactory, commandLogger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="singletonWrapper" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.SingletonCosmosClientWrapper" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="dbContextOptions" Type="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="executionStrategyFactory" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="commandLogger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Command&gt;" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="singletonWrapper">To be added.</param>
        <param name="dbContextOptions">To be added.</param>
        <param name="executionStrategyFactory">To be added.</param>
        <param name="commandLogger">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerIfNotExists">
      <MemberSignature Language="C#" Value="public virtual bool CreateContainerIfNotExists (Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateContainerIfNotExists(valuetype Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateContainerIfNotExists(Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateContainerIfNotExists (properties As ContainerProperties) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerIfNotExists : Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties -&gt; bool&#xA;override this.CreateContainerIfNotExists : Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties -&gt; bool" Usage="cosmosClientWrapper.CreateContainerIfNotExists properties" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateContainerIfNotExists(Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerIfNotExists">
      <MemberSignature Language="C#" Value="public virtual bool CreateContainerIfNotExists (string containerId, string partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateContainerIfNotExists(string containerId, string partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateContainerIfNotExists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateContainerIfNotExists (containerId As String, partitionKey As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerIfNotExists : string * string -&gt; bool&#xA;override this.CreateContainerIfNotExists : string * string -&gt; bool" Usage="cosmosClientWrapper.CreateContainerIfNotExists (containerId, partitionKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CreateContainerIfNotExistsAsync (Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties properties, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateContainerIfNotExistsAsync(valuetype Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties properties, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateContainerIfNotExistsAsync(Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateContainerIfNotExistsAsync (properties As ContainerProperties, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerIfNotExistsAsync : Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.CreateContainerIfNotExistsAsync : Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.CreateContainerIfNotExistsAsync (properties, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateContainerIfNotExistsAsync(Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CreateContainerIfNotExistsAsync (string containerId, string partitionKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateContainerIfNotExistsAsync(string containerId, string partitionKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateContainerIfNotExistsAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateContainerIfNotExistsAsync (containerId As String, partitionKey As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerIfNotExistsAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.CreateContainerIfNotExistsAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.CreateContainerIfNotExistsAsync (containerId, partitionKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseIfNotExists">
      <MemberSignature Language="C#" Value="public virtual bool CreateDatabaseIfNotExists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateDatabaseIfNotExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateDatabaseIfNotExists" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDatabaseIfNotExists () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateDatabaseIfNotExists : unit -&gt; bool&#xA;override this.CreateDatabaseIfNotExists : unit -&gt; bool" Usage="cosmosClientWrapper.CreateDatabaseIfNotExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseIfNotExists">
      <MemberSignature Language="C#" Value="public virtual bool CreateDatabaseIfNotExists (Microsoft.Azure.Cosmos.ThroughputProperties? throughput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateDatabaseIfNotExists(class Microsoft.Azure.Cosmos.ThroughputProperties throughput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateDatabaseIfNotExists(Microsoft.Azure.Cosmos.ThroughputProperties)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDatabaseIfNotExists (throughput As ThroughputProperties) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateDatabaseIfNotExists : Microsoft.Azure.Cosmos.ThroughputProperties -&gt; bool&#xA;override this.CreateDatabaseIfNotExists : Microsoft.Azure.Cosmos.ThroughputProperties -&gt; bool" Usage="cosmosClientWrapper.CreateDatabaseIfNotExists throughput" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateDatabaseIfNotExists(Microsoft.Azure.Cosmos.ThroughputProperties)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throughput" Type="Microsoft.Azure.Cosmos.ThroughputProperties" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="throughput">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CreateDatabaseIfNotExistsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateDatabaseIfNotExistsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateDatabaseIfNotExistsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDatabaseIfNotExistsAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateDatabaseIfNotExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.CreateDatabaseIfNotExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.CreateDatabaseIfNotExistsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CreateDatabaseIfNotExistsAsync (Microsoft.Azure.Cosmos.ThroughputProperties? throughput, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateDatabaseIfNotExistsAsync(class Microsoft.Azure.Cosmos.ThroughputProperties throughput, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateDatabaseIfNotExistsAsync(Microsoft.Azure.Cosmos.ThroughputProperties,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDatabaseIfNotExistsAsync (throughput As ThroughputProperties, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateDatabaseIfNotExistsAsync : Microsoft.Azure.Cosmos.ThroughputProperties * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.CreateDatabaseIfNotExistsAsync : Microsoft.Azure.Cosmos.ThroughputProperties * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.CreateDatabaseIfNotExistsAsync (throughput, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateDatabaseIfNotExistsAsync(Microsoft.Azure.Cosmos.ThroughputProperties,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throughput" Type="Microsoft.Azure.Cosmos.ThroughputProperties" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="throughput">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseIfNotExistsOnce">
      <MemberSignature Language="C#" Value="public virtual bool CreateDatabaseIfNotExistsOnce (Microsoft.EntityFrameworkCore.DbContext context, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateDatabaseIfNotExistsOnce(class Microsoft.EntityFrameworkCore.DbContext context, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateDatabaseIfNotExistsOnce(Microsoft.EntityFrameworkCore.DbContext,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDatabaseIfNotExistsOnce (context As DbContext, state As Object) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateDatabaseIfNotExistsOnce : Microsoft.EntityFrameworkCore.DbContext * obj -&gt; bool&#xA;override this.CreateDatabaseIfNotExistsOnce : Microsoft.EntityFrameworkCore.DbContext * obj -&gt; bool" Usage="cosmosClientWrapper.CreateDatabaseIfNotExistsOnce (context, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="state">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseIfNotExistsOnceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CreateDatabaseIfNotExistsOnceAsync (Microsoft.EntityFrameworkCore.DbContext _, object __, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateDatabaseIfNotExistsOnceAsync(class Microsoft.EntityFrameworkCore.DbContext _, object __, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateDatabaseIfNotExistsOnceAsync(Microsoft.EntityFrameworkCore.DbContext,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDatabaseIfNotExistsOnceAsync (_ As DbContext, __ As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateDatabaseIfNotExistsOnceAsync : Microsoft.EntityFrameworkCore.DbContext * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.CreateDatabaseIfNotExistsOnceAsync : Microsoft.EntityFrameworkCore.DbContext * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.CreateDatabaseIfNotExistsOnceAsync (_, __, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="__" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="_">To be added.</param>
        <param name="__">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItem">
      <MemberSignature Language="C#" Value="public virtual bool CreateItem (string containerId, Newtonsoft.Json.Linq.JToken document, Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateItem(string containerId, class Newtonsoft.Json.Linq.JToken document, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateItem(System.String,Newtonsoft.Json.Linq.JToken,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateItem (containerId As String, document As JToken, entry As IUpdateEntry) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateItem : string * Newtonsoft.Json.Linq.JToken * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; bool&#xA;override this.CreateItem : string * Newtonsoft.Json.Linq.JToken * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; bool" Usage="cosmosClientWrapper.CreateItem (containerId, document, entry)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateItem(System.String,Newtonsoft.Json.Linq.JToken,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JToken" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItem">
      <MemberSignature Language="C#" Value="public virtual bool CreateItem (string containerId, Newtonsoft.Json.Linq.JToken document, string partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateItem(string containerId, class Newtonsoft.Json.Linq.JToken document, string partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateItem(System.String,Newtonsoft.Json.Linq.JToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateItem (containerId As String, document As JToken, partitionKey As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateItem : string * Newtonsoft.Json.Linq.JToken * string -&gt; bool&#xA;override this.CreateItem : string * Newtonsoft.Json.Linq.JToken * string -&gt; bool" Usage="cosmosClientWrapper.CreateItem (containerId, document, partitionKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JToken" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="partitionKey" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CreateItemAsync (string containerId, Newtonsoft.Json.Linq.JToken document, Microsoft.EntityFrameworkCore.Update.IUpdateEntry updateEntry, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateItemAsync(string containerId, class Newtonsoft.Json.Linq.JToken document, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry updateEntry, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateItemAsync(System.String,Newtonsoft.Json.Linq.JToken,Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateItemAsync (containerId As String, document As JToken, updateEntry As IUpdateEntry, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateItemAsync : string * Newtonsoft.Json.Linq.JToken * Microsoft.EntityFrameworkCore.Update.IUpdateEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.CreateItemAsync : string * Newtonsoft.Json.Linq.JToken * Microsoft.EntityFrameworkCore.Update.IUpdateEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.CreateItemAsync (containerId, document, updateEntry, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateItemAsync(System.String,Newtonsoft.Json.Linq.JToken,Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JToken" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="updateEntry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="updateEntry">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CreateItemAsync (string containerId, Newtonsoft.Json.Linq.JToken document, string partitionKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateItemAsync(string containerId, class Newtonsoft.Json.Linq.JToken document, string partitionKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateItemAsync(System.String,Newtonsoft.Json.Linq.JToken,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateItemAsync (containerId As String, document As JToken, partitionKey As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateItemAsync : string * Newtonsoft.Json.Linq.JToken * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.CreateItemAsync : string * Newtonsoft.Json.Linq.JToken * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.CreateItemAsync (containerId, document, partitionKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JToken" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="partitionKey" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQuery">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.FeedIterator CreateQuery (string containerId, string? partitionKey, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator CreateQuery(string containerId, string partitionKey, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.CreateQuery(System.String,System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateQuery (containerId As String, partitionKey As String, query As CosmosSqlQuery) As FeedIterator" />
      <MemberSignature Language="F#" Value="abstract member CreateQuery : string * string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; Microsoft.Azure.Cosmos.FeedIterator&#xA;override this.CreateQuery : string * string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; Microsoft.Azure.Cosmos.FeedIterator" Usage="cosmosClientWrapper.CreateQuery (containerId, partitionKey, query)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateQuery(System.String,System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPartitionKey">
      <MemberSignature Language="C#" Value="public static readonly string DefaultPartitionKey;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultPartitionKey" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DefaultPartitionKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultPartitionKey As String " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultPartitionKey : string" Usage="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DefaultPartitionKey" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public virtual bool DeleteDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDatabase () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member DeleteDatabase : unit -&gt; bool&#xA;override this.DeleteDatabase : unit -&gt; bool" Usage="cosmosClientWrapper.DeleteDatabase " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.DeleteDatabase</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabaseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; DeleteDatabaseAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; DeleteDatabaseAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteDatabaseAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDatabaseAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDatabaseAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.DeleteDatabaseAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.DeleteDatabaseAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.DeleteDatabaseAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabaseOnce">
      <MemberSignature Language="C#" Value="public virtual bool DeleteDatabaseOnce (Microsoft.EntityFrameworkCore.DbContext context, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteDatabaseOnce(class Microsoft.EntityFrameworkCore.DbContext context, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteDatabaseOnce(Microsoft.EntityFrameworkCore.DbContext,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDatabaseOnce (context As DbContext, state As Object) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member DeleteDatabaseOnce : Microsoft.EntityFrameworkCore.DbContext * obj -&gt; bool&#xA;override this.DeleteDatabaseOnce : Microsoft.EntityFrameworkCore.DbContext * obj -&gt; bool" Usage="cosmosClientWrapper.DeleteDatabaseOnce (context, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="state">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabaseOnceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; DeleteDatabaseOnceAsync (Microsoft.EntityFrameworkCore.DbContext _, object __, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; DeleteDatabaseOnceAsync(class Microsoft.EntityFrameworkCore.DbContext _, object __, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteDatabaseOnceAsync(Microsoft.EntityFrameworkCore.DbContext,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDatabaseOnceAsync (_ As DbContext, __ As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDatabaseOnceAsync : Microsoft.EntityFrameworkCore.DbContext * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.DeleteDatabaseOnceAsync : Microsoft.EntityFrameworkCore.DbContext * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.DeleteDatabaseOnceAsync (_, __, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="__" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="_">To be added.</param>
        <param name="__">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public virtual bool DeleteItem (string containerId, string documentId, Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteItem(string containerId, string documentId, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteItem(System.String,System.String,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteItem (containerId As String, documentId As String, entry As IUpdateEntry) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member DeleteItem : string * string * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; bool&#xA;override this.DeleteItem : string * string * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; bool" Usage="cosmosClientWrapper.DeleteItem (containerId, documentId, entry)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.DeleteItem(System.String,System.String,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="documentId" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public virtual bool DeleteItem (string containerId, string documentId, string partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteItem(string containerId, string documentId, string partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteItem(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteItem (containerId As String, documentId As String, partitionKey As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member DeleteItem : string * string * string -&gt; bool&#xA;override this.DeleteItem : string * string * string -&gt; bool" Usage="cosmosClientWrapper.DeleteItem (containerId, documentId, partitionKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="documentId" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="partitionKey" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; DeleteItemAsync (string containerId, string documentId, Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; DeleteItemAsync(string containerId, string documentId, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteItemAsync(System.String,System.String,Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteItemAsync (containerId As String, documentId As String, entry As IUpdateEntry, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemAsync : string * string * Microsoft.EntityFrameworkCore.Update.IUpdateEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.DeleteItemAsync : string * string * Microsoft.EntityFrameworkCore.Update.IUpdateEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.DeleteItemAsync (containerId, documentId, entry, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.DeleteItemAsync(System.String,System.String,Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="documentId" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="entry">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; DeleteItemAsync (string containerId, string documentId, string partitionKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; DeleteItemAsync(string containerId, string documentId, string partitionKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteItemAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteItemAsync (containerId As String, documentId As String, partitionKey As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.DeleteItemAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.DeleteItemAsync (containerId, documentId, partitionKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="documentId" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="partitionKey" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemOnce">
      <MemberSignature Language="C#" Value="public virtual bool DeleteItemOnce (Microsoft.EntityFrameworkCore.DbContext context, (string ContainerId, string DocumentId, Microsoft.EntityFrameworkCore.Update.IUpdateEntry Entry) parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteItemOnce(class Microsoft.EntityFrameworkCore.DbContext context, valuetype System.ValueTuple`3&lt;string, string, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteItemOnce(Microsoft.EntityFrameworkCore.DbContext,System.ValueTuple{System.String,System.String,Microsoft.EntityFrameworkCore.Update.IUpdateEntry})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteItemOnce (context As DbContext, parameters As ValueTuple(Of String, String, IUpdateEntry)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemOnce : Microsoft.EntityFrameworkCore.DbContext * ValueTuple&lt;string, string, Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; -&gt; bool&#xA;override this.DeleteItemOnce : Microsoft.EntityFrameworkCore.DbContext * ValueTuple&lt;string, string, Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; -&gt; bool" Usage="cosmosClientWrapper.DeleteItemOnce (context, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="parameters" Type="System.ValueTuple&lt;System.String,System.String,Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" Index="1" FrameworkAlternate="efcore-5.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "ContainerId", "DocumentId", "Entry" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "ContainerId", "DocumentId", "Entry" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemOnce">
      <MemberSignature Language="C#" Value="public virtual bool DeleteItemOnce (Microsoft.EntityFrameworkCore.DbContext context, (string ContainerId, string DocumentId, string PartitionKey) parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteItemOnce(class Microsoft.EntityFrameworkCore.DbContext context, valuetype System.ValueTuple`3&lt;string, string, string&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteItemOnce(Microsoft.EntityFrameworkCore.DbContext,System.ValueTuple{System.String,System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteItemOnce (context As DbContext, parameters As ValueTuple(Of String, String, String)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemOnce : Microsoft.EntityFrameworkCore.DbContext * ValueTuple&lt;string, string, string&gt; -&gt; bool&#xA;override this.DeleteItemOnce : Microsoft.EntityFrameworkCore.DbContext * ValueTuple&lt;string, string, string&gt; -&gt; bool" Usage="cosmosClientWrapper.DeleteItemOnce (context, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="parameters" Type="System.ValueTuple&lt;System.String,System.String,System.String&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "ContainerId", "DocumentId", "PartitionKey" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "ContainerId", "DocumentId", "PartitionKey" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemOnceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; DeleteItemOnceAsync (Microsoft.EntityFrameworkCore.DbContext _, (string ContainerId, string DocumentId, Microsoft.EntityFrameworkCore.Update.IUpdateEntry Entry) parameters, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; DeleteItemOnceAsync(class Microsoft.EntityFrameworkCore.DbContext _, valuetype System.ValueTuple`3&lt;string, string, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteItemOnceAsync(Microsoft.EntityFrameworkCore.DbContext,System.ValueTuple{System.String,System.String,Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteItemOnceAsync (_ As DbContext, parameters As ValueTuple(Of String, String, IUpdateEntry), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemOnceAsync : Microsoft.EntityFrameworkCore.DbContext * ValueTuple&lt;string, string, Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.DeleteItemOnceAsync : Microsoft.EntityFrameworkCore.DbContext * ValueTuple&lt;string, string, Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.DeleteItemOnceAsync (_, parameters, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="parameters" Type="System.ValueTuple&lt;System.String,System.String,Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" Index="1" FrameworkAlternate="efcore-5.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "ContainerId", "DocumentId", "Entry" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "ContainerId", "DocumentId", "Entry" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="_">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemOnceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; DeleteItemOnceAsync (Microsoft.EntityFrameworkCore.DbContext _, (string ContainerId, string DocumentId, string PartitionKey) parameters, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; DeleteItemOnceAsync(class Microsoft.EntityFrameworkCore.DbContext _, valuetype System.ValueTuple`3&lt;string, string, string&gt; parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.DeleteItemOnceAsync(Microsoft.EntityFrameworkCore.DbContext,System.ValueTuple{System.String,System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteItemOnceAsync (_ As DbContext, parameters As ValueTuple(Of String, String, String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemOnceAsync : Microsoft.EntityFrameworkCore.DbContext * ValueTuple&lt;string, string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.DeleteItemOnceAsync : Microsoft.EntityFrameworkCore.DbContext * ValueTuple&lt;string, string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.DeleteItemOnceAsync (_, parameters, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="parameters" Type="System.ValueTuple&lt;System.String,System.String,System.String&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "ContainerId", "DocumentId", "PartitionKey" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "ContainerId", "DocumentId", "PartitionKey" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="_">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReadItem">
      <MemberSignature Language="C#" Value="public virtual Newtonsoft.Json.Linq.JObject ExecuteReadItem (string containerId, string partitionKey, string resourceId);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Newtonsoft.Json.Linq.JObject ExecuteReadItem(string containerId, string partitionKey, string resourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.ExecuteReadItem(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteReadItem (containerId As String, partitionKey As String, resourceId As String) As JObject" />
      <MemberSignature Language="F#" Value="abstract member ExecuteReadItem : string * string * string -&gt; Newtonsoft.Json.Linq.JObject&#xA;override this.ExecuteReadItem : string * string * string -&gt; Newtonsoft.Json.Linq.JObject" Usage="cosmosClientWrapper.ExecuteReadItem (containerId, partitionKey, resourceId)" />
      <MemberSignature Language="C#" Value="public virtual Newtonsoft.Json.Linq.JObject? ExecuteReadItem (string containerId, string? partitionKey, string resourceId);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteReadItem(System.String,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Newtonsoft.Json.Linq.JObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="resourceId" Type="System.String" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="resourceId">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReadItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Newtonsoft.Json.Linq.JObject?&gt; ExecuteReadItemAsync (string containerId, string? partitionKey, string resourceId, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Newtonsoft.Json.Linq.JObject&gt; ExecuteReadItemAsync(string containerId, string partitionKey, string resourceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.ExecuteReadItemAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteReadItemAsync (containerId As String, partitionKey As String, resourceId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of JObject)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ExecuteReadItemAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Newtonsoft.Json.Linq.JObject&gt;&#xA;override this.ExecuteReadItemAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="cosmosClientWrapper.ExecuteReadItemAsync (containerId, partitionKey, resourceId, cancellationToken)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteReadItemAsync(System.String,System.String,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.Task&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="resourceId" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="resourceId">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteSqlQuery">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQuery (string containerId, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQuery(string containerId, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.ExecuteSqlQuery(System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteSqlQuery (containerId As String, query As CosmosSqlQuery) As IEnumerable(Of JObject)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteSqlQuery : string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; seq&lt;Newtonsoft.Json.Linq.JObject&gt;&#xA;override this.ExecuteSqlQuery : string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; seq&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="cosmosClientWrapper.ExecuteSqlQuery (containerId, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteSqlQuery">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQuery (string containerId, string partitionKey, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQuery(string containerId, string partitionKey, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.ExecuteSqlQuery(System.String,System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteSqlQuery (containerId As String, partitionKey As String, query As CosmosSqlQuery) As IEnumerable(Of JObject)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteSqlQuery : string * string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; seq&lt;Newtonsoft.Json.Linq.JObject&gt;&#xA;override this.ExecuteSqlQuery : string * string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; seq&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="cosmosClientWrapper.ExecuteSqlQuery (containerId, partitionKey, query)" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQuery (string containerId, string? partitionKey, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteSqlQuery(System.String,System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteSqlQueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQueryAsync (string containerId, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQueryAsync(string containerId, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.ExecuteSqlQueryAsync(System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteSqlQueryAsync (containerId As String, query As CosmosSqlQuery) As IAsyncEnumerable(Of JObject)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteSqlQueryAsync : string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;&#xA;override this.ExecuteSqlQueryAsync : string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="cosmosClientWrapper.ExecuteSqlQueryAsync (containerId, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteSqlQueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQueryAsync (string containerId, string partitionKey, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQueryAsync(string containerId, string partitionKey, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.ExecuteSqlQueryAsync(System.String,System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteSqlQueryAsync (containerId As String, partitionKey As String, query As CosmosSqlQuery) As IAsyncEnumerable(Of JObject)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteSqlQueryAsync : string * string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;&#xA;override this.ExecuteSqlQueryAsync : string * string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="cosmosClientWrapper.ExecuteSqlQueryAsync (containerId, partitionKey, query)" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQueryAsync (string containerId, string? partitionKey, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteSqlQueryAsync(System.String,System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceItem">
      <MemberSignature Language="C#" Value="public virtual bool ReplaceItem (string collectionId, string documentId, Newtonsoft.Json.Linq.JObject document, Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReplaceItem(string collectionId, string documentId, class Newtonsoft.Json.Linq.JObject document, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.ReplaceItem(System.String,System.String,Newtonsoft.Json.Linq.JObject,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceItem (collectionId As String, documentId As String, document As JObject, entry As IUpdateEntry) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ReplaceItem : string * string * Newtonsoft.Json.Linq.JObject * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; bool&#xA;override this.ReplaceItem : string * string * Newtonsoft.Json.Linq.JObject * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; bool" Usage="cosmosClientWrapper.ReplaceItem (collectionId, documentId, document, entry)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ReplaceItem(System.String,System.String,Newtonsoft.Json.Linq.JObject,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="documentId" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JObject" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="collectionId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceItem">
      <MemberSignature Language="C#" Value="public virtual bool ReplaceItem (string collectionId, string documentId, Newtonsoft.Json.Linq.JObject document, string partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReplaceItem(string collectionId, string documentId, class Newtonsoft.Json.Linq.JObject document, string partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.ReplaceItem(System.String,System.String,Newtonsoft.Json.Linq.JObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceItem (collectionId As String, documentId As String, document As JObject, partitionKey As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ReplaceItem : string * string * Newtonsoft.Json.Linq.JObject * string -&gt; bool&#xA;override this.ReplaceItem : string * string * Newtonsoft.Json.Linq.JObject * string -&gt; bool" Usage="cosmosClientWrapper.ReplaceItem (collectionId, documentId, document, partitionKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="documentId" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JObject" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="partitionKey" Type="System.String" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="collectionId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; ReplaceItemAsync (string collectionId, string documentId, Newtonsoft.Json.Linq.JObject document, Microsoft.EntityFrameworkCore.Update.IUpdateEntry updateEntry, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ReplaceItemAsync(string collectionId, string documentId, class Newtonsoft.Json.Linq.JObject document, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry updateEntry, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.ReplaceItemAsync(System.String,System.String,Newtonsoft.Json.Linq.JObject,Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceItemAsync (collectionId As String, documentId As String, document As JObject, updateEntry As IUpdateEntry, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceItemAsync : string * string * Newtonsoft.Json.Linq.JObject * Microsoft.EntityFrameworkCore.Update.IUpdateEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.ReplaceItemAsync : string * string * Newtonsoft.Json.Linq.JObject * Microsoft.EntityFrameworkCore.Update.IUpdateEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.ReplaceItemAsync (collectionId, documentId, document, updateEntry, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ReplaceItemAsync(System.String,System.String,Newtonsoft.Json.Linq.JObject,Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="documentId" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JObject" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="updateEntry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="collectionId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="updateEntry">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; ReplaceItemAsync (string collectionId, string documentId, Newtonsoft.Json.Linq.JObject document, string partitionKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ReplaceItemAsync(string collectionId, string documentId, class Newtonsoft.Json.Linq.JObject document, string partitionKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.ReplaceItemAsync(System.String,System.String,Newtonsoft.Json.Linq.JObject,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceItemAsync (collectionId As String, documentId As String, document As JObject, partitionKey As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceItemAsync : string * string * Newtonsoft.Json.Linq.JObject * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.ReplaceItemAsync : string * string * Newtonsoft.Json.Linq.JObject * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="cosmosClientWrapper.ReplaceItemAsync (collectionId, documentId, document, partitionKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="documentId" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JObject" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="partitionKey" Type="System.String" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="collectionId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serializer">
      <MemberSignature Language="C#" Value="public static readonly Newtonsoft.Json.JsonSerializer Serializer;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Newtonsoft.Json.JsonSerializer Serializer" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.Serializer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Serializer As JsonSerializer " />
      <MemberSignature Language="F#" Value=" staticval mutable Serializer : Newtonsoft.Json.JsonSerializer" Usage="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper.Serializer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Newtonsoft.Json.JsonSerializer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
