<Type Name="ICosmosClientWrapper" FullName="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper">
  <TypeSignature Language="C#" Value="public interface ICosmosClientWrapper" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICosmosClientWrapper" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICosmosClientWrapper" />
  <TypeSignature Language="F#" Value="type ICosmosClientWrapper = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ICosmosClientWrapper" FrameworkAlternate="efcore-8.0;efcore-9.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateContainerIfNotExists">
      <MemberSignature Language="C#" Value="public bool CreateContainerIfNotExists (Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateContainerIfNotExists(valuetype Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateContainerIfNotExists(Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateContainerIfNotExists (properties As ContainerProperties) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerIfNotExists : Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties -&gt; bool" Usage="iCosmosClientWrapper.CreateContainerIfNotExists properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; CreateContainerIfNotExistsAsync (Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties properties, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateContainerIfNotExistsAsync(valuetype Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties properties, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateContainerIfNotExistsAsync(Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateContainerIfNotExistsAsync (properties As ContainerProperties, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerIfNotExistsAsync : Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iCosmosClientWrapper.CreateContainerIfNotExistsAsync (properties, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseIfNotExists">
      <MemberSignature Language="C#" Value="public bool CreateDatabaseIfNotExists (Microsoft.Azure.Cosmos.ThroughputProperties? throughput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateDatabaseIfNotExists(class Microsoft.Azure.Cosmos.ThroughputProperties throughput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateDatabaseIfNotExists(Microsoft.Azure.Cosmos.ThroughputProperties)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDatabaseIfNotExists (throughput As ThroughputProperties) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateDatabaseIfNotExists : Microsoft.Azure.Cosmos.ThroughputProperties -&gt; bool" Usage="iCosmosClientWrapper.CreateDatabaseIfNotExists throughput" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throughput" Type="Microsoft.Azure.Cosmos.ThroughputProperties" />
      </Parameters>
      <Docs>
        <param name="throughput">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; CreateDatabaseIfNotExistsAsync (Microsoft.Azure.Cosmos.ThroughputProperties? throughput, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateDatabaseIfNotExistsAsync(class Microsoft.Azure.Cosmos.ThroughputProperties throughput, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateDatabaseIfNotExistsAsync(Microsoft.Azure.Cosmos.ThroughputProperties,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDatabaseIfNotExistsAsync (throughput As ThroughputProperties, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateDatabaseIfNotExistsAsync : Microsoft.Azure.Cosmos.ThroughputProperties * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iCosmosClientWrapper.CreateDatabaseIfNotExistsAsync (throughput, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throughput" Type="Microsoft.Azure.Cosmos.ThroughputProperties" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="throughput">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItem">
      <MemberSignature Language="C#" Value="public bool CreateItem (string containerId, Newtonsoft.Json.Linq.JToken document, Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateItem(string containerId, class Newtonsoft.Json.Linq.JToken document, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateItem(System.String,Newtonsoft.Json.Linq.JToken,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateItem (containerId As String, document As JToken, entry As IUpdateEntry) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateItem : string * Newtonsoft.Json.Linq.JToken * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; bool" Usage="iCosmosClientWrapper.CreateItem (containerId, document, entry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JToken" />
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; CreateItemAsync (string containerId, Newtonsoft.Json.Linq.JToken document, Microsoft.EntityFrameworkCore.Update.IUpdateEntry updateEntry, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateItemAsync(string containerId, class Newtonsoft.Json.Linq.JToken document, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry updateEntry, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateItemAsync(System.String,Newtonsoft.Json.Linq.JToken,Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateItemAsync (containerId As String, document As JToken, updateEntry As IUpdateEntry, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateItemAsync : string * Newtonsoft.Json.Linq.JToken * Microsoft.EntityFrameworkCore.Update.IUpdateEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iCosmosClientWrapper.CreateItemAsync (containerId, document, updateEntry, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JToken" />
        <Parameter Name="updateEntry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="updateEntry">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQuery">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Cosmos.FeedIterator CreateQuery (string containerId, string? partitionKey, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator CreateQuery(string containerId, string partitionKey, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateQuery(System.String,System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateQuery (containerId As String, partitionKey As String, query As CosmosSqlQuery) As FeedIterator" />
      <MemberSignature Language="F#" Value="abstract member CreateQuery : string * string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; Microsoft.Azure.Cosmos.FeedIterator" Usage="iCosmosClientWrapper.CreateQuery (containerId, partitionKey, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQuery">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Cosmos.FeedIterator CreateQuery (string containerId, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query, string? continuationToken = default, Microsoft.Azure.Cosmos.QueryRequestOptions? queryRequestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator CreateQuery(string containerId, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query, string continuationToken, class Microsoft.Azure.Cosmos.QueryRequestOptions queryRequestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.CreateQuery(System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateQuery (containerId As String, query As CosmosSqlQuery, Optional continuationToken As String = Nothing, Optional queryRequestOptions As QueryRequestOptions = Nothing) As FeedIterator" />
      <MemberSignature Language="F#" Value="abstract member CreateQuery : string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery * string * Microsoft.Azure.Cosmos.QueryRequestOptions -&gt; Microsoft.Azure.Cosmos.FeedIterator" Usage="iCosmosClientWrapper.CreateQuery (containerId, query, continuationToken, queryRequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="continuationToken" Type="System.String" Index="2" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="queryRequestOptions" Type="Microsoft.Azure.Cosmos.QueryRequestOptions" Index="3" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="query">To be added.</param>
        <param name="continuationToken">To be added.</param>
        <param name="queryRequestOptions">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public bool DeleteDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.DeleteDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteDatabase () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member DeleteDatabase : unit -&gt; bool" Usage="iCosmosClientWrapper.DeleteDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; DeleteDatabaseAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; DeleteDatabaseAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.DeleteDatabaseAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteDatabaseAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDatabaseAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iCosmosClientWrapper.DeleteDatabaseAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public bool DeleteItem (string containerId, string documentId, Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteItem(string containerId, string documentId, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.DeleteItem(System.String,System.String,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteItem (containerId As String, documentId As String, entry As IUpdateEntry) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member DeleteItem : string * string * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; bool" Usage="iCosmosClientWrapper.DeleteItem (containerId, documentId, entry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" />
        <Parameter Name="documentId" Type="System.String" />
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; DeleteItemAsync (string containerId, string documentId, Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; DeleteItemAsync(string containerId, string documentId, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.DeleteItemAsync(System.String,System.String,Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteItemAsync (containerId As String, documentId As String, entry As IUpdateEntry, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemAsync : string * string * Microsoft.EntityFrameworkCore.Update.IUpdateEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iCosmosClientWrapper.DeleteItemAsync (containerId, documentId, entry, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" />
        <Parameter Name="documentId" Type="System.String" />
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="entry">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReadItem">
      <MemberSignature Language="C#" Value="public Newtonsoft.Json.Linq.JObject? ExecuteReadItem (string containerId, Microsoft.Azure.Cosmos.PartitionKey partitionKeyValue, string resourceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Newtonsoft.Json.Linq.JObject ExecuteReadItem(string containerId, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKeyValue, string resourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteReadItem(System.String,Microsoft.Azure.Cosmos.PartitionKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReadItem (containerId As String, partitionKeyValue As PartitionKey, resourceId As String) As JObject" />
      <MemberSignature Language="F#" Value="abstract member ExecuteReadItem : string * Microsoft.Azure.Cosmos.PartitionKey * string -&gt; Newtonsoft.Json.Linq.JObject" Usage="iCosmosClientWrapper.ExecuteReadItem (containerId, partitionKeyValue, resourceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Newtonsoft.Json.Linq.JObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="partitionKeyValue" Type="Microsoft.Azure.Cosmos.PartitionKey" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="resourceId" Type="System.String" Index="2" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKeyValue">To be added.</param>
        <param name="resourceId">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReadItem">
      <MemberSignature Language="C#" Value="public Newtonsoft.Json.Linq.JObject? ExecuteReadItem (string containerId, string? partitionKey, string resourceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Newtonsoft.Json.Linq.JObject ExecuteReadItem(string containerId, string partitionKey, string resourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteReadItem(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReadItem (containerId As String, partitionKey As String, resourceId As String) As JObject" />
      <MemberSignature Language="F#" Value="abstract member ExecuteReadItem : string * string * string -&gt; Newtonsoft.Json.Linq.JObject" Usage="iCosmosClientWrapper.ExecuteReadItem (containerId, partitionKey, resourceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Newtonsoft.Json.Linq.JObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="resourceId" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="resourceId">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReadItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Newtonsoft.Json.Linq.JObject?&gt; ExecuteReadItemAsync (string containerId, Microsoft.Azure.Cosmos.PartitionKey partitionKeyValue, string resourceId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Newtonsoft.Json.Linq.JObject&gt; ExecuteReadItemAsync(string containerId, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKeyValue, string resourceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteReadItemAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReadItemAsync (containerId As String, partitionKeyValue As PartitionKey, resourceId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of JObject)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteReadItemAsync : string * Microsoft.Azure.Cosmos.PartitionKey * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="iCosmosClientWrapper.ExecuteReadItemAsync (containerId, partitionKeyValue, resourceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="partitionKeyValue" Type="Microsoft.Azure.Cosmos.PartitionKey" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="resourceId" Type="System.String" Index="2" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKeyValue">To be added.</param>
        <param name="resourceId">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReadItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Newtonsoft.Json.Linq.JObject?&gt; ExecuteReadItemAsync (string containerId, string? partitionKey, string resourceId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Newtonsoft.Json.Linq.JObject&gt; ExecuteReadItemAsync(string containerId, string partitionKey, string resourceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteReadItemAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReadItemAsync (containerId As String, partitionKey As String, resourceId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of JObject)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteReadItemAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="iCosmosClientWrapper.ExecuteReadItemAsync (containerId, partitionKey, resourceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="resourceId" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="resourceId">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteSqlQuery">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt; ExecuteSqlQuery (string containerId, Microsoft.Azure.Cosmos.PartitionKey partitionKeyValue, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Newtonsoft.Json.Linq.JToken&gt; ExecuteSqlQuery(string containerId, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKeyValue, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteSqlQuery(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteSqlQuery (containerId As String, partitionKeyValue As PartitionKey, query As CosmosSqlQuery) As IEnumerable(Of JToken)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteSqlQuery : string * Microsoft.Azure.Cosmos.PartitionKey * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; seq&lt;Newtonsoft.Json.Linq.JToken&gt;" Usage="iCosmosClientWrapper.ExecuteSqlQuery (containerId, partitionKeyValue, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="partitionKeyValue" Type="Microsoft.Azure.Cosmos.PartitionKey" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="2" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKeyValue">To be added.</param>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteSqlQuery">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQuery (string containerId, string? partitionKey, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQuery(string containerId, string partitionKey, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteSqlQuery(System.String,System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteSqlQuery (containerId As String, partitionKey As String, query As CosmosSqlQuery) As IEnumerable(Of JObject)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteSqlQuery : string * string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; seq&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="iCosmosClientWrapper.ExecuteSqlQuery (containerId, partitionKey, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteSqlQueryAsync">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt; ExecuteSqlQueryAsync (string containerId, Microsoft.Azure.Cosmos.PartitionKey partitionKeyValue, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Newtonsoft.Json.Linq.JToken&gt; ExecuteSqlQueryAsync(string containerId, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKeyValue, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteSqlQueryAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteSqlQueryAsync (containerId As String, partitionKeyValue As PartitionKey, query As CosmosSqlQuery) As IAsyncEnumerable(Of JToken)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteSqlQueryAsync : string * Microsoft.Azure.Cosmos.PartitionKey * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;" Usage="iCosmosClientWrapper.ExecuteSqlQueryAsync (containerId, partitionKeyValue, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="partitionKeyValue" Type="Microsoft.Azure.Cosmos.PartitionKey" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="2" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKeyValue">To be added.</param>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteSqlQueryAsync">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQueryAsync (string containerId, string? partitionKey, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Newtonsoft.Json.Linq.JObject&gt; ExecuteSqlQueryAsync(string containerId, string partitionKey, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ExecuteSqlQueryAsync(System.String,System.String,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteSqlQueryAsync (containerId As String, partitionKey As String, query As CosmosSqlQuery) As IAsyncEnumerable(Of JObject)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteSqlQueryAsync : string * string * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="iCosmosClientWrapper.ExecuteSqlQueryAsync (containerId, partitionKey, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="partitionKey" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="query" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerId">To be added.</param>
        <param name="partitionKey">To be added.</param>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResponseMessageEnumerable">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt; GetResponseMessageEnumerable (Microsoft.Azure.Cosmos.ResponseMessage responseMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Newtonsoft.Json.Linq.JToken&gt; GetResponseMessageEnumerable(class Microsoft.Azure.Cosmos.ResponseMessage responseMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.GetResponseMessageEnumerable(Microsoft.Azure.Cosmos.ResponseMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetResponseMessageEnumerable (responseMessage As ResponseMessage) As IEnumerable(Of JToken)" />
      <MemberSignature Language="F#" Value="abstract member GetResponseMessageEnumerable : Microsoft.Azure.Cosmos.ResponseMessage -&gt; seq&lt;Newtonsoft.Json.Linq.JToken&gt;" Usage="iCosmosClientWrapper.GetResponseMessageEnumerable responseMessage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseMessage" Type="Microsoft.Azure.Cosmos.ResponseMessage" Index="0" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="responseMessage">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceItem">
      <MemberSignature Language="C#" Value="public bool ReplaceItem (string collectionId, string documentId, Newtonsoft.Json.Linq.JObject document, Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReplaceItem(string collectionId, string documentId, class Newtonsoft.Json.Linq.JObject document, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ReplaceItem(System.String,System.String,Newtonsoft.Json.Linq.JObject,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceItem (collectionId As String, documentId As String, document As JObject, entry As IUpdateEntry) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ReplaceItem : string * string * Newtonsoft.Json.Linq.JObject * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; bool" Usage="iCosmosClientWrapper.ReplaceItem (collectionId, documentId, document, entry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="documentId" Type="System.String" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JObject" />
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
      </Parameters>
      <Docs>
        <param name="collectionId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ReplaceItemAsync (string collectionId, string documentId, Newtonsoft.Json.Linq.JObject document, Microsoft.EntityFrameworkCore.Update.IUpdateEntry updateEntry, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ReplaceItemAsync(string collectionId, string documentId, class Newtonsoft.Json.Linq.JObject document, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry updateEntry, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper.ReplaceItemAsync(System.String,System.String,Newtonsoft.Json.Linq.JObject,Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceItemAsync (collectionId As String, documentId As String, document As JObject, updateEntry As IUpdateEntry, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceItemAsync : string * string * Newtonsoft.Json.Linq.JObject * Microsoft.EntityFrameworkCore.Update.IUpdateEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iCosmosClientWrapper.ReplaceItemAsync (collectionId, documentId, document, updateEntry, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="documentId" Type="System.String" />
        <Parameter Name="document" Type="Newtonsoft.Json.Linq.JObject" />
        <Parameter Name="updateEntry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="collectionId">To be added.</param>
        <param name="documentId">To be added.</param>
        <param name="document">To be added.</param>
        <param name="updateEntry">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
