<Type Name="SqliteJsonDateTimeOffsetReaderWriter" FullName="Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter">
  <TypeSignature Language="C#" Value="public sealed class SqliteJsonDateTimeOffsetReaderWriter : Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter&lt;DateTimeOffset&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqliteJsonDateTimeOffsetReaderWriter extends Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter`1&lt;valuetype System.DateTimeOffset&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqliteJsonDateTimeOffsetReaderWriter&#xA;Inherits JsonValueReaderWriter(Of DateTimeOffset)" />
  <TypeSignature Language="F#" Value="type SqliteJsonDateTimeOffsetReaderWriter = class&#xA;    inherit JsonValueReaderWriter&lt;DateTimeOffset&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter&lt;System.DateTimeOffset&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">System.DateTimeOffset</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                The Sqlite-specific JsonValueReaderWrite for DateTime. Generates a ISO8601 string representation with a space instead of a T
                separating the date and time components, in order to match our SQLite non-JSON representation.
            </summary>
    <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="FromJsonTyped">
      <MemberSignature Language="C#" Value="public override DateTimeOffset FromJsonTyped (ref Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager manager, object? existingObject = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTimeOffset FromJsonTyped(valuetype Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager&amp; manager, object existingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter.FromJsonTyped(Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FromJsonTyped (ByRef manager As Utf8JsonReaderManager, Optional existingObject As Object = Nothing) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="override this.FromJsonTyped : Utf8JsonReaderManager * obj -&gt; DateTimeOffset" Usage="sqliteJsonDateTimeOffsetReaderWriter.FromJsonTyped (manager, existingObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager" RefType="ref" />
        <Parameter Name="existingObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager">To be added.</param>
        <param name="existingObject">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter.Instance" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Instance As SqliteJsonDateTimeOffsetReaderWriter" />
      <MemberSignature Language="F#" Value="static member Instance : Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter" Usage="Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToJsonTyped">
      <MemberSignature Language="C#" Value="public override void ToJsonTyped (System.Text.Json.Utf8JsonWriter writer, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ToJsonTyped(class System.Text.Json.Utf8JsonWriter writer, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonDateTimeOffsetReaderWriter.ToJsonTyped(System.Text.Json.Utf8JsonWriter,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ToJsonTyped (writer As Utf8JsonWriter, value As DateTimeOffset)" />
      <MemberSignature Language="F#" Value="override this.ToJsonTyped : System.Text.Json.Utf8JsonWriter * DateTimeOffset -&gt; unit" Usage="sqliteJsonDateTimeOffsetReaderWriter.ToJsonTyped (writer, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
