<Type Name="SqliteJsonByteArrayReaderWriter" FullName="Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter">
  <TypeSignature Language="C#" Value="public sealed class SqliteJsonByteArrayReaderWriter : Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter&lt;byte[]&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqliteJsonByteArrayReaderWriter extends Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter`1&lt;unsigned int8[]&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqliteJsonByteArrayReaderWriter&#xA;Inherits JsonValueReaderWriter(Of Byte())" />
  <TypeSignature Language="F#" Value="type SqliteJsonByteArrayReaderWriter = class&#xA;    inherit JsonValueReaderWriter&lt;byte[]&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter&lt;System.Byte[]&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">System.Byte[]</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                The Sqlite-specific JsonValueReaderWrite for byte[]. Generates the SQLite representation (e.g. X'0102') rather than base64, in order
                to match our SQLite non-JSON representation.
            </summary>
    <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="FromJsonTyped">
      <MemberSignature Language="C#" Value="public override byte[] FromJsonTyped (ref Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager manager, object? existingObject = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] FromJsonTyped(valuetype Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager&amp; manager, object existingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter.FromJsonTyped(Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FromJsonTyped (ByRef manager As Utf8JsonReaderManager, Optional existingObject As Object = Nothing) As Byte()" />
      <MemberSignature Language="F#" Value="override this.FromJsonTyped : Utf8JsonReaderManager * obj -&gt; byte[]" Usage="sqliteJsonByteArrayReaderWriter.FromJsonTyped (manager, existingObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="Microsoft.EntityFrameworkCore.Storage.Json.Utf8JsonReaderManager" RefType="ref" />
        <Parameter Name="existingObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager">To be added.</param>
        <param name="existingObject">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter.Instance" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Instance As SqliteJsonByteArrayReaderWriter" />
      <MemberSignature Language="F#" Value="static member Instance : Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter" Usage="Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToJsonTyped">
      <MemberSignature Language="C#" Value="public override void ToJsonTyped (System.Text.Json.Utf8JsonWriter writer, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ToJsonTyped(class System.Text.Json.Utf8JsonWriter writer, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal.SqliteJsonByteArrayReaderWriter.ToJsonTyped(System.Text.Json.Utf8JsonWriter,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ToJsonTyped (writer As Utf8JsonWriter, value As Byte())" />
      <MemberSignature Language="F#" Value="override this.ToJsonTyped : System.Text.Json.Utf8JsonWriter * byte[] -&gt; unit" Usage="sqliteJsonByteArrayReaderWriter.ToJsonTyped (writer, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
