<Type Name="EntityFrameworkServiceCollectionExtensions" FullName="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions">
  <TypeSignature Language="C#" Value="public static class EntityFrameworkServiceCollectionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EntityFrameworkServiceCollectionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module EntityFrameworkServiceCollectionExtensions" />
  <TypeSignature Language="F#" Value="type EntityFrameworkServiceCollectionExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Extension methods for setting up Entity Framework related services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, contextLifetime As ServiceLifetime) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, contextLifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                    public void ConfigureServices(IServiceCollection services) 
                    {
                        var connectionString = "connection string to database";
            
                        services.AddDbContext&lt;MyContext&gt;(ServiceLifetime.Scoped); 
                    }
                </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, contextLifetime As ServiceLifetime, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, contextLifetime, optionsLifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of context to be registered.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="contextLifetime">The lifetime with which to register the DbContext service in the container.</param>
        <param name="optionsLifetime">The lifetime with which to register the DbContextOptions service in the container.</param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> for more information and examples.
                </para>
        </remarks>
        <example>
          <code>
                       public void ConfigureServices(IServiceCollection services)
                       {
                           var connectionString = "connection string to database";
            
                           services.AddDbContext&lt;MyContext&gt;(ServiceLifetime.Scoped);
                       }
                   </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = default, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, Optional optionsAction As Action(Of DbContextOptionsBuilder) = Nothing, Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                You use this method when using dependency injection in your application, such as with ASP.NET.
                For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
            </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                    public void ConfigureServices(IServiceCollection services) 
                    {
                        var connectionString = "connection string to database";
            
                        services.AddDbContext&lt;MyContext&gt;(options =&gt; options.UseSqlServer(connectionString)); 
                    }
                </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to be registered. </typeparam>
        <param name="serviceCollection"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to. </param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="contextLifetime"> The lifetime with which to register the DbContext service in the container. </param>
        <summary>
          <para>
                    Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    You use this method when using dependency injection in your application, such as with ASP.NET.
                    For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890.
                </para>
          <para>
                    This overload has an <paramref name="optionsAction" /> that provides the applications <see cref="T:System.IServiceProvider" />.
                    This is useful if you want to setup Entity Framework to resolve its internal services from the primary application service
                    provider.
                    By default, we recommend using the other overload, which allows Entity Framework to create and maintain its own
                    <see cref="T:System.IServiceProvider" />
                    for internal Entity Framework services.
                </para>
        </summary>
        <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                    public void ConfigureServices(IServiceCollection services) 
                    {
                        var connectionString = "connection string to database";
            
                        services
                            .AddEntityFrameworkSqlServer()
                            .AddDbContext&lt;MyContext&gt;((serviceProvider, options) =&gt; 
                                options.UseSqlServer(connectionString)
                                       .UseInternalServiceProvider(serviceProvider)); 
                    }
                </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = default, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, Optional optionsAction As Action(Of DbContextOptionsBuilder) = Nothing, Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime, optionsLifetime)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;? optionsAction = default, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of context to be registered.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="contextLifetime">The lifetime with which to register the DbContext service in the container.</param>
        <param name="optionsLifetime">The lifetime with which to register the DbContextOptions service in the container.</param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> for more information and examples.
                </para>
        </remarks>
        <example>
          <code>
                       public void ConfigureServices(IServiceCollection services)
                       {
                           var connectionString = "connection string to database";
            
                           services.AddDbContext&lt;MyContext&gt;(options =&gt; options.UseSqlServer(connectionString));
                       }
                   </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime, optionsLifetime)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;? optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of context to be registered.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="contextLifetime">The lifetime with which to register the DbContext service in the container.</param>
        <param name="optionsLifetime">The lifetime with which to register the DbContextOptions service in the container.</param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> for more information and examples.
                </para>
          <para>
                    This overload has an <paramref name="optionsAction" /> that provides the application's
                    <see cref="T:System.IServiceProvider" />. This is useful if you want to setup Entity Framework Core to resolve
                    its internal services from the primary application service provider.
                    By default, we recommend using
                    <see cref="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
                    which allows Entity Framework to create and maintain its own <see cref="T:System.IServiceProvider" /> for internal
                    Entity Framework services.
                </para>
        </remarks>
        <example>
          <code>
                       public void ConfigureServices(IServiceCollection services)
                       {
                           var connectionString = "connection string to database";
            
                           services
                               .AddEntityFrameworkSqlServer()
                               .AddDbContext&lt;MyContext&gt;((serviceProvider, options) =&gt;
                                   options.UseSqlServer(connectionString)
                                          .UseInternalServiceProvider(serviceProvider));
                       }
                   </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContextService,TContextImplementation&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContextService : class where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;class TContextService, (class Microsoft.EntityFrameworkCore.DbContext, !!TContextService) TContextImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContextService As Class, TContextImplementation As Class) (serviceCollection As IServiceCollection, contextLifetime As ServiceLifetime, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'ContextService : null and 'ContextImplementation :&gt; Microsoft.EntityFrameworkCore.DbContext and 'ContextImplementation :&gt; 'ContextService)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, contextLifetime, optionsLifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContextService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TContextImplementation">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            <BaseTypeName>TContextService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContextService">The class or interface that will be used to resolve the context from the container.</typeparam>
        <typeparam name="TContextImplementation">The concrete implementation type to create.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="contextLifetime">The lifetime with which to register the DbContext service in the container.</param>
        <param name="optionsLifetime">The lifetime with which to register the DbContextOptions service in the container.</param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> for more information and examples.
                </para>
        </remarks>
        <example>
          <code>
                       public void ConfigureServices(IServiceCollection services)
                       {
                           var connectionString = "connection string to database";
            
                           services.AddDbContext&lt;MyContext&gt;(ServiceLifetime.Scoped);
                       }
                   </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContextService,TContextImplementation&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = default, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService, (class Microsoft.EntityFrameworkCore.DbContext, !!TContextService) TContextImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContextService, TContextImplementation) (serviceCollection As IServiceCollection, Optional optionsAction As Action(Of DbContextOptionsBuilder) = Nothing, Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'ContextImplementation :&gt; Microsoft.EntityFrameworkCore.DbContext and 'ContextImplementation :&gt; 'ContextService)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime, optionsLifetime)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;? optionsAction = default, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContextService" />
        <TypeParameter Name="TContextImplementation">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            <BaseTypeName>TContextService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContextService">The class or interface that will be used to resolve the context from the container.</typeparam>
        <typeparam name="TContextImplementation">The concrete implementation type to create.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="contextLifetime">The lifetime with which to register the DbContext service in the container.</param>
        <param name="optionsLifetime">The lifetime with which to register the DbContextOptions service in the container.</param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> for more information and examples.
                </para>
        </remarks>
        <example>
          <code>
                       public void ConfigureServices(IServiceCollection services)
                       {
                           var connectionString = "connection string to database";
            
                           services.AddDbContext&lt;MyContext&gt;(options =&gt; options.UseSqlServer(connectionString));
                       }
                   </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContext&lt;TContextService,TContextImplementation&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService, (class Microsoft.EntityFrameworkCore.DbContext, !!TContextService) TContextImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContext(Of TContextService, TContextImplementation) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional contextLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Optional optionsLifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContext : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'ContextImplementation :&gt; Microsoft.EntityFrameworkCore.DbContext and 'ContextImplementation :&gt; 'ContextService)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext (serviceCollection, optionsAction, contextLifetime, optionsLifetime)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;? optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContextService" />
        <TypeParameter Name="TContextImplementation">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            <BaseTypeName>TContextService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="contextLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsLifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContextService">The class or interface that will be used to resolve the context from the container.</typeparam>
        <typeparam name="TContextImplementation">The concrete implementation type to create.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="contextLifetime">The lifetime with which to register the DbContext service in the container.</param>
        <param name="optionsLifetime">The lifetime with which to register the DbContextOptions service in the container.</param>
        <summary>
                Registers the given context as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> for more information and examples.
                </para>
          <para>
                    This overload has an <paramref name="optionsAction" /> that provides the application's
                    <see cref="T:System.IServiceProvider" />. This is useful if you want to setup Entity Framework Core to resolve
                    its internal services from the primary application service provider.
                    By default, we recommend using
                    <see cref="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContext``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
                    which allows Entity Framework to create and maintain its own <see cref="T:System.IServiceProvider" /> for internal
                    Entity Framework services.
                </para>
        </remarks>
        <example>
          <code>
                       public void ConfigureServices(IServiceCollection services)
                       {
                           var connectionString = "connection string to database";
            
                           services
                               .AddEntityFrameworkSqlServer()
                               .AddDbContext&lt;MyContext&gt;((serviceProvider, options) =&gt;
                                   options.UseSqlServer(connectionString)
                                          .UseInternalServiceProvider(serviceProvider));
                       }
                   </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddDbContextFactory&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = default, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextFactory(Of TContext As DbContext) (serviceCollection As IServiceCollection, Optional optionsAction As Action(Of DbContextOptionsBuilder) = Nothing, Optional lifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContextFactory : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextFactory (serviceCollection, optionsAction, lifetime)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;? optionsAction = default, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to be created by the factory.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="lifetime">
                The lifetime with which to register the factory and options.
                The default is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /></param>
        <summary>
                Registers an <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" /> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to create instances
                of given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Registering a factory instead of registering the context type directly allows for easy creation of new
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    Registering a factory is recommended for Blazor applications and other situations where the dependency
                    injection scope is not aligned with the context lifetime.
                </para>
          <para>
                    Use this method when using dependency injection in your application, such as with Blazor.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    For convenience, this method also registers the context type itself as a scoped service. This allows a context
                    instance to be resolved from a dependency injection scope directly or created by the factory, as appropriate.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> and
                    <see href="https://aka.ms/efcore-docs-dbcontext-factory">Using DbContext factories</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDbContextFactory&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextFactory(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional lifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContextFactory : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextFactory (serviceCollection, optionsAction, lifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to be created by the factory.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="lifetime">
                The lifetime with which to register the factory and options.
                The default is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /></param>
        <summary>
                Registers an <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" /> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to create instances
                of given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Registering a factory instead of registering the context type directly allows for easy creation of new
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    Registering a factory is recommended for Blazor applications and other situations where the dependency
                    injection scope is not aligned with the context lifetime.
                </para>
          <para>
                    Use this method when using dependency injection in your application, such as with Blazor.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    For convenience, this method also registers the context type itself as a scoped service. This allows a context
                    instance to be resolved from a dependency injection scope directly or created by the factory, as appropriate.
                </para>
          <para>
                    This overload has an <paramref name="optionsAction" /> that provides the application's
                    <see cref="T:System.IServiceProvider" />. This is useful if you want to setup Entity Framework Core to resolve
                    its internal services from the primary application service provider.
                    By default, we recommend using
                    <see cref="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" /> which allows
                    Entity Framework to create and maintain its own <see cref="T:System.IServiceProvider" /> for internal Entity Framework services.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> and
                    <see href="https://aka.ms/efcore-docs-dbcontext-factory">Using DbContext factories</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDbContextFactory&lt;TContext,TFactory&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;TContext,TFactory&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = default, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) where TContext : Microsoft.EntityFrameworkCore.DbContext where TFactory : Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt;;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, (class Microsoft.EntityFrameworkCore.IDbContextFactory`1&lt;!!TContext&gt;) TFactory&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextFactory``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextFactory(Of TContext As DbContext, TFactory As DbContext) (serviceCollection As IServiceCollection, Optional optionsAction As Action(Of DbContextOptionsBuilder) = Nothing, Optional lifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContextFactory : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Factory :&gt; Microsoft.EntityFrameworkCore.IDbContextFactory&lt;'Context&gt;)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextFactory (serviceCollection, optionsAction, lifetime)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;TContext,TFactory&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;? optionsAction = default, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) where TContext : Microsoft.EntityFrameworkCore.DbContext where TFactory : Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt;;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TFactory">
          <Constraints>
            <InterfaceName>Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt;</InterfaceName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to be created by the factory.</typeparam>
        <typeparam name="TFactory">The type of <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" /> to register.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="lifetime">
                The lifetime with which to register the factory and options.
                The default is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /></param>
        <summary>
                Registers an <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" /> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to create instances
                of given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Registering a factory instead of registering the context type directly allows for easy creation of new
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    Registering a factory is recommended for Blazor applications and other situations where the dependency
                    injection scope is not aligned with the context lifetime.
                </para>
          <para>
                    Use this method when using dependency injection in your application, such as with Blazor.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    For convenience, this method also registers the context type itself as a scoped service. This allows a context
                    instance to be resolved from a dependency injection scope directly or created by the factory, as appropriate.
                </para>
          <para>
                    This overload allows a specific implementation of <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" /> to be registered
                    instead of using the default factory shipped with EF Core.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> and
                    <see href="https://aka.ms/efcore-docs-dbcontext-factory">Using DbContext factories</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDbContextFactory&lt;TContext,TFactory&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;TContext,TFactory&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) where TContext : Microsoft.EntityFrameworkCore.DbContext where TFactory : Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt;;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, (class Microsoft.EntityFrameworkCore.IDbContextFactory`1&lt;!!TContext&gt;) TFactory&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextFactory``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextFactory(Of TContext As DbContext, TFactory As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional lifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddDbContextFactory : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Factory :&gt; Microsoft.EntityFrameworkCore.IDbContextFactory&lt;'Context&gt;)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextFactory (serviceCollection, optionsAction, lifetime)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextFactory&lt;TContext,TFactory&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;? optionsAction, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton) where TContext : Microsoft.EntityFrameworkCore.DbContext where TFactory : Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt;;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TFactory">
          <Constraints>
            <InterfaceName>Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt;</InterfaceName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to be created by the factory.</typeparam>
        <typeparam name="TFactory">The type of <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" /> to register.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
          <para>
                    An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. This provides an
                    alternative to performing configuration of the context by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context.
                </para>
          <para>
                    If an action is supplied here, the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be run if it has
                    been overridden on the derived context. <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> configuration will be applied
                    in addition to configuration performed here.
                </para>
          <para>
                    In order for the options to be passed into your context, you need to expose a constructor on your context that takes
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> and passes it to the base constructor of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
        </param>
        <param name="lifetime">
                The lifetime with which to register the factory and options.
                The default is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /></param>
        <summary>
                Registers an <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" /> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to create instances
                of given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Registering a factory instead of registering the context type directly allows for easy creation of new
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    Registering a factory is recommended for Blazor applications and other situations where the dependency
                    injection scope is not aligned with the context lifetime.
                </para>
          <para>
                    Use this method when using dependency injection in your application, such as with Blazor.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    For convenience, this method also registers the context type itself as a scoped service. This allows a context
                    instance to be resolved from a dependency injection scope directly or created by the factory, as appropriate.
                </para>
          <para>
                    This overload allows a specific implementation of <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" /> to be registered
                    instead of using the default factory shipped with EF Core.
                </para>
          <para>
                    This overload has an <paramref name="optionsAction" /> that provides the application's
                    <see cref="T:System.IServiceProvider" />. This is useful if you want to setup Entity Framework Core to resolve
                    its internal services from the primary application service provider.
                    By default, we recommend using
                    <see cref="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" /> which allows
                    Entity Framework to create and maintain its own <see cref="T:System.IServiceProvider" /> for internal Entity Framework services.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> and
                    <see href="https://aka.ms/efcore-docs-dbcontext-factory">Using DbContext factories</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDbContextPool&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member AddDbContextPool : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * int -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool (serviceCollection, optionsAction, poolSize)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 1024) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of DbContextOptionsBuilder), Optional poolSize As Integer = 1024) As IServiceCollection" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="poolSize" Type="System.Int32" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of context to be registered.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
                A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                will not be called.
            </param>
        <param name="poolSize">Sets the maximum number of instances retained by the pool. Defaults to 1024.</param>
        <summary>
                Registers the given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />,
                and enables DbContext pooling for this registration.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    DbContext pooling can increase performance in high-throughput scenarios by re-using context instances.
                    However, for most application this performance gain is very small.
                    Note that when using pooling, the context configuration cannot change between uses, and scoped services
                    injected into the context will only be resolved once from the initial scope.
                    Only consider using DbContext pooling when performance testing indicates it provides a real boost.
                </para>
          <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> and
                    <see href="https://aka.ms/efcore-docs-dbcontext-pooling">Using DbContext pooling</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDbContextPool&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member AddDbContextPool : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * int -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool (serviceCollection, optionsAction, poolSize)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 1024) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional poolSize As Integer = 1024) As IServiceCollection" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="poolSize" Type="System.Int32" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of context to be registered.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
                A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                will not be called.
            </param>
        <param name="poolSize">Sets the maximum number of instances retained by the pool. Defaults to 1024.</param>
        <summary>
                Registers the given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />,
                and enables DbContext pooling for this registration.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    DbContext pooling can increase performance in high-throughput scenarios by re-using context instances.
                    However, for most application this performance gain is very small.
                    Note that when using pooling, the context configuration cannot change between uses, and scoped services
                    injected into the context will only be resolved once from the initial scope.
                    Only consider using DbContext pooling when performance testing indicates it provides a real boost.
                </para>
          <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> and
                    <see href="https://aka.ms/efcore-docs-dbcontext-pooling">Using DbContext pooling</see> for more information and examples.
                </para>
          <para>
                    This overload has an <paramref name="optionsAction" /> that provides the application's
                    <see cref="T:System.IServiceProvider" />. This is useful if you want to setup Entity Framework Core to resolve
                    its internal services from the primary application service provider.
                    By default, we recommend using
                    <see cref="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" /> which allows
                    Entity Framework to create and maintain its own <see cref="T:System.IServiceProvider" /> for internal Entity Framework services.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDbContextPool&lt;TContextService,TContextImplementation&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContextService : class where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;class TContextService, (class Microsoft.EntityFrameworkCore.DbContext, !!TContextService) TContextImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContextService As Class, TContextImplementation As Class) (serviceCollection As IServiceCollection, optionsAction As Action(Of DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member AddDbContextPool : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * int -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'ContextService : null and 'ContextImplementation :&gt; Microsoft.EntityFrameworkCore.DbContext and 'ContextImplementation :&gt; 'ContextService)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool (serviceCollection, optionsAction, poolSize)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 1024) where TContextService : class where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContextService As Class, TContextImplementation As Class) (serviceCollection As IServiceCollection, optionsAction As Action(Of DbContextOptionsBuilder), Optional poolSize As Integer = 1024) As IServiceCollection" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContextService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TContextImplementation">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            <BaseTypeName>TContextService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="poolSize" Type="System.Int32" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContextService">The class or interface that will be used to resolve the context from the container.</typeparam>
        <typeparam name="TContextImplementation">The concrete implementation type to create.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
                A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                will not be called.
            </param>
        <param name="poolSize">Sets the maximum number of instances retained by the pool. Defaults to 1024.</param>
        <summary>
                Registers the given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />,
                and enables DbContext pooling for this registration.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    DbContext pooling can increase performance in high-throughput scenarios by re-using context instances.
                    However, for most application this performance gain is very small.
                    Note that when using pooling, the context configuration cannot change between uses, and scoped services
                    injected into the context will only be resolved once from the initial scope.
                    Only consider using DbContext pooling when performance testing indicates it provides a real boost.
                </para>
          <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> and
                    <see href="https://aka.ms/efcore-docs-dbcontext-pooling">Using DbContext pooling</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDbContextPool&lt;TContextService,TContextImplementation&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContextService : class where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;class TContextService, (class Microsoft.EntityFrameworkCore.DbContext, !!TContextService) TContextImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContextService As Class, TContextImplementation As Class) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member AddDbContextPool : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * int -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'ContextService : null and 'ContextImplementation :&gt; Microsoft.EntityFrameworkCore.DbContext and 'ContextImplementation :&gt; 'ContextService)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool (serviceCollection, optionsAction, poolSize)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContextPool&lt;TContextService,TContextImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 1024) where TContextService : class where TContextImplementation : Microsoft.EntityFrameworkCore.DbContext, TContextService;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextPool(Of TContextService As Class, TContextImplementation As Class) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional poolSize As Integer = 1024) As IServiceCollection" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContextService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TContextImplementation">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            <BaseTypeName>TContextService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="poolSize" Type="System.Int32" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContextService">The class or interface that will be used to resolve the context from the container.</typeparam>
        <typeparam name="TContextImplementation">The concrete implementation type to create.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
                A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                will not be called.
            </param>
        <param name="poolSize">Sets the maximum number of instances retained by the pool. Defaults to 1024.</param>
        <summary>
                Registers the given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />,
                and enables DbContext pooling for this registration.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    DbContext pooling can increase performance in high-throughput scenarios by re-using context instances.
                    However, for most application this performance gain is very small.
                    Note that when using pooling, the context configuration cannot change between uses, and scoped services
                    injected into the context will only be resolved once from the initial scope.
                    Only consider using DbContext pooling when performance testing indicates it provides a real boost.
                </para>
          <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> and
                    <see href="https://aka.ms/efcore-docs-dbcontext-pooling">Using DbContext pooling</see> for more information and examples.
                </para>
          <para>
                    This overload has an <paramref name="optionsAction" /> that provides the application's
                    <see cref="T:System.IServiceProvider" />. This is useful if you want to setup Entity Framework Core to resolve
                    its internal services from the primary application service provider.
                    By default, we recommend using
                    <see cref="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddDbContextPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
                    which allows Entity Framework to create and maintain its own <see cref="T:System.IServiceProvider" /> for internal
                    Entity Framework services.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPooledDbContextFactory&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddPooledDbContextFactory&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddPooledDbContextFactory&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddPooledDbContextFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddPooledDbContextFactory(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member AddPooledDbContextFactory : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * int -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddPooledDbContextFactory (serviceCollection, optionsAction, poolSize)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddPooledDbContextFactory&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 1024) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddPooledDbContextFactory(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of DbContextOptionsBuilder), Optional poolSize As Integer = 1024) As IServiceCollection" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="poolSize" Type="System.Int32" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to be created by the factory.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
                A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                will not be called.
            </param>
        <param name="poolSize">Sets the maximum number of instances retained by the pool. Defaults to 1024.</param>
        <summary>
                Registers an <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" /> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to create instances
                of given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type where instances are pooled for reuse.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Registering a factory instead of registering the context type directly allows for easy creation of new
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    Registering a factory is recommended for Blazor applications and other situations where the dependency
                    injection scope is not aligned with the context lifetime.
                </para>
          <para>
                    Use this method when using dependency injection in your application, such as with Blazor.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see>,
                    <see href="https://aka.ms/efcore-docs-dbcontext-factory">Using DbContext factories</see>, and
                    <see href="https://aka.ms/efcore-docs-dbcontext-pooling">Using DbContext pooling</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPooledDbContextFactory&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddPooledDbContextFactory&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 128) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddPooledDbContextFactory&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`2&lt;class System.IServiceProvider, class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int32 poolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddPooledDbContextFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddPooledDbContextFactory(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional poolSize As Integer = 128) As IServiceCollection" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member AddPooledDbContextFactory : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;IServiceProvider, Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; * int -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.AddPooledDbContextFactory (serviceCollection, optionsAction, poolSize)" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddPooledDbContextFactory&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction, int poolSize = 1024) where TContext : Microsoft.EntityFrameworkCore.DbContext;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddPooledDbContextFactory(Of TContext As DbContext) (serviceCollection As IServiceCollection, optionsAction As Action(Of IServiceProvider, DbContextOptionsBuilder), Optional poolSize As Integer = 1024) As IServiceCollection" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="optionsAction" Type="System.Action&lt;System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="poolSize" Type="System.Int32" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The type of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to be created by the factory.</typeparam>
        <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="optionsAction">
                A required action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context. When using
                context pooling, options configuration must be performed externally; <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                will not be called.
            </param>
        <param name="poolSize">Sets the maximum number of instances retained by the pool. Defaults to 1024.</param>
        <summary>
                Registers an <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" /> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to create instances
                of given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type where instances are pooled for reuse.
            </summary>
        <returns>The same service collection so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Registering a factory instead of registering the context type directly allows for easy creation of new
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    Registering a factory is recommended for Blazor applications and other situations where the dependency
                    injection scope is not aligned with the context lifetime.
                </para>
          <para>
                    Use this method when using dependency injection in your application, such as with Blazor.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure a connection string and other options.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see>,
                    <see href="https://aka.ms/efcore-docs-dbcontext-factory">Using DbContext factories</see>, and
                    <see href="https://aka.ms/efcore-docs-dbcontext-pooling">Using DbContext pooling</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
