<Type Name="GeometryValueConverter&lt;TGeometry&gt;" FullName="Microsoft.EntityFrameworkCore.Sqlite.Storage.ValueConversion.Internal.GeometryValueConverter&lt;TGeometry&gt;">
  <TypeSignature Language="C#" Value="public class GeometryValueConverter&lt;TGeometry&gt; : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&lt;TGeometry,byte[]&gt; where TGeometry : IGeometry" FrameworkAlternate="efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GeometryValueConverter`1&lt;(class GeoAPI.Geometries.IGeometry) TGeometry&gt; extends Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2&lt;!TGeometry, unsigned int8[]&gt;" FrameworkAlternate="efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Sqlite.Storage.ValueConversion.Internal.GeometryValueConverter`1" />
  <TypeSignature Language="VB.NET" Value="Public Class GeometryValueConverter(Of TGeometry)&#xA;Inherits ValueConverter(Of TGeometry, Byte())" />
  <TypeSignature Language="F#" Value="type GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; IGeometry)&gt; = class&#xA;    inherit ValueConverter&lt;'Geometry, byte[] (requires 'Geometry :&gt; IGeometry)&gt;" FrameworkAlternate="efcore-2.2" />
  <TypeSignature Language="C#" Value="public class GeometryValueConverter&lt;TGeometry&gt; : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&lt;TGeometry,byte[]&gt; where TGeometry : Geometry" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GeometryValueConverter`1&lt;(class NetTopologySuite.Geometries.Geometry) TGeometry&gt; extends Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2&lt;!TGeometry, unsigned int8[]&gt;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; Geometry)&gt; = class&#xA;    inherit ValueConverter&lt;'Geometry, byte[] (requires 'Geometry :&gt; Geometry)&gt;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TGeometry">
      <Constraints>
        <InterfaceName>GeoAPI.Geometries.IGeometry</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&lt;TGeometry,System.Byte[]&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">TGeometry</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!1">System.Byte[]</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TGeometry">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeometryValueConverter (NetTopologySuite.IO.GaiaGeoReader reader, NetTopologySuite.IO.GaiaGeoWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class NetTopologySuite.IO.GaiaGeoReader reader, class NetTopologySuite.IO.GaiaGeoWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Storage.ValueConversion.Internal.GeometryValueConverter`1.#ctor(NetTopologySuite.IO.GaiaGeoReader,NetTopologySuite.IO.GaiaGeoWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As GaiaGeoReader, writer As GaiaGeoWriter)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt; : NetTopologySuite.IO.GaiaGeoReader * NetTopologySuite.IO.GaiaGeoWriter -&gt; Microsoft.EntityFrameworkCore.Sqlite.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt;" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt; (reader, writer)" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt; : NetTopologySuite.IO.GaiaGeoReader * NetTopologySuite.IO.GaiaGeoWriter -&gt; Microsoft.EntityFrameworkCore.Sqlite.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt;" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt; (reader, writer)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="NetTopologySuite.IO.GaiaGeoReader" />
        <Parameter Name="writer" Type="NetTopologySuite.IO.GaiaGeoWriter" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="writer">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
