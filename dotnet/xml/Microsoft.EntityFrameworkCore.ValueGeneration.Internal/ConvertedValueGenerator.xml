<Type Name="ConvertedValueGenerator" FullName="Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator">
  <TypeSignature Language="C#" Value="public class ConvertedValueGenerator : Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConvertedValueGenerator extends Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Class ConvertedValueGenerator&#xA;Inherits ValueGenerator" />
  <TypeSignature Language="F#" Value="type ConvertedValueGenerator = class&#xA;    inherit ValueGenerator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConvertedValueGenerator (Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator providerGenerator, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator providerGenerator, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator.#ctor(Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerGenerator As ValueGenerator, converter As ValueConverter)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator : Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator" Usage="new Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator (providerGenerator, converter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerGenerator" Type="Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" />
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
      </Parameters>
      <Docs>
        <param name="providerGenerator">To be added.</param>
        <param name="converter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratesStableValues">
      <MemberSignature Language="C#" Value="public override bool GeneratesStableValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GeneratesStableValues" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator.GeneratesStableValues" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GeneratesStableValues As Boolean" />
      <MemberSignature Language="F#" Value="member this.GeneratesStableValues : bool" Usage="Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator.GeneratesStableValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratesTemporaryValues">
      <MemberSignature Language="C#" Value="public override bool GeneratesTemporaryValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GeneratesTemporaryValues" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator.GeneratesTemporaryValues" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GeneratesTemporaryValues As Boolean" />
      <MemberSignature Language="F#" Value="member this.GeneratesTemporaryValues : bool" Usage="Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator.GeneratesTemporaryValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;object?&gt; NextAsync (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry entry, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; NextAsync(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry entry, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator.NextAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function NextAsync (entry As EntityEntry, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Object)" />
      <MemberSignature Language="F#" Value="override this.NextAsync : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="convertedValueGenerator.NextAsync (entry, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextValue">
      <MemberSignature Language="C#" Value="protected override object? NextValue (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object NextValue(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator.NextValue(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function NextValue (entry As EntityEntry) As Object" />
      <MemberSignature Language="F#" Value="override this.NextValue : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry -&gt; obj" Usage="convertedValueGenerator.NextValue entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
