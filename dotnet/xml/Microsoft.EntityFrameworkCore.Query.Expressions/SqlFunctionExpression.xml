<Type Name="SqlFunctionExpression" FullName="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression">
  <TypeSignature Language="C#" Value="public class SqlFunctionExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlFunctionExpression extends System.Linq.Expressions.Expression" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlFunctionExpression&#xA;Inherits Expression" />
  <TypeSignature Language="F#" Value="type SqlFunctionExpression = class&#xA;    inherit Expression" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{this.FunctionName}({string.Join(", ", this.Arguments)})")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{this.FunctionName}({string.Join(", ", this.Arguments)})")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{ToString()}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{ToString()}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                Represents a SQL function call expression.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlFunctionExpression (string functionName, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string functionName, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (functionName As String, returnType As Type)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression : string * Type -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression (functionName, returnType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="functionName"> Name of the function. </param>
        <param name="returnType"> The return type. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlFunctionExpression (string functionName, Type returnType, bool niladic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string functionName, class System.Type returnType, bool niladic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.#ctor(System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (functionName As String, returnType As Type, niladic As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression : string * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression (functionName, returnType, niladic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="niladic" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="functionName"> Name of the function. </param>
        <param name="returnType"> The return type. </param>
        <param name="niladic"> A value indicating whether the function is niladic. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlFunctionExpression (string functionName, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string functionName, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.#ctor(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (functionName As String, returnType As Type, arguments As IEnumerable(Of Expression))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression : string * Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression (functionName, returnType, arguments)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="functionName"> Name of the function. </param>
        <param name="returnType"> The return type. </param>
        <param name="arguments"> The arguments. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlFunctionExpression (System.Linq.Expressions.Expression instance, string functionName, Type returnType, bool niladic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression instance, string functionName, class System.Type returnType, bool niladic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.#ctor(System.Linq.Expressions.Expression,System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instance As Expression, functionName As String, returnType As Type, niladic As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression : System.Linq.Expressions.Expression * string * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression (instance, functionName, returnType, niladic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="functionName" Type="System.String" Index="1" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="returnType" Type="System.Type" Index="2" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="niladic" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="instance"> The instance on which the function is called. </param>
        <param name="functionName"> Name of the function. </param>
        <param name="returnType"> The return type. </param>
        <param name="niladic"> A value indicating whether the function is niladic. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlFunctionExpression (System.Linq.Expressions.Expression instance, string functionName, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression instance, string functionName, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.#ctor(System.Linq.Expressions.Expression,System.String,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instance As Expression, functionName As String, returnType As Type, arguments As IEnumerable(Of Expression))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression : System.Linq.Expressions.Expression * string * Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression (instance, functionName, returnType, arguments)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="functionName" Type="System.String" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="returnType" Type="System.Type" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="instance"> The instance on which the function is called. </param>
        <param name="functionName"> Name of the function. </param>
        <param name="returnType"> The return type. </param>
        <param name="arguments"> The arguments. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlFunctionExpression (string functionName, Type returnType, string schema, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string functionName, class System.Type returnType, string schema, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.#ctor(System.String,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (functionName As String, returnType As Type, schema As String, arguments As IEnumerable(Of Expression))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression : string * Type * string * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression (functionName, returnType, schema, arguments)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="functionName"> Name of the function. </param>
        <param name="returnType"> The return type. </param>
        <param name="schema"> The schema this function exists in if any. </param>
        <param name="arguments"> The arguments. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlFunctionExpression (string functionName, Type returnType, string schema, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping resultTypeMapping = default, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; argumentTypeMappings = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string functionName, class System.Type returnType, string schema, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping resultTypeMapping, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; argumentTypeMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.#ctor(System.String,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (functionName As String, returnType As Type, schema As String, arguments As IEnumerable(Of Expression), Optional resultTypeMapping As RelationalTypeMapping = Nothing, Optional argumentTypeMappings As IEnumerable(Of RelationalTypeMapping) = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression : string * Type * string * seq&lt;System.Linq.Expressions.Expression&gt; * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * seq&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression (functionName, returnType, schema, arguments, resultTypeMapping, argumentTypeMappings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="3" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="resultTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="4" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="argumentTypeMappings" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;" Index="5" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="functionName"> Name of the function. </param>
        <param name="returnType"> The return type. </param>
        <param name="schema"> The schema this function exists in if any. </param>
        <param name="arguments"> The arguments. </param>
        <param name="resultTypeMapping"> The result type mapping. </param>
        <param name="argumentTypeMappings"> The type mappings for each argument. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlFunctionExpression (System.Linq.Expressions.Expression instance, string functionName, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping resultTypeMapping = default, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping instanceTypeMapping = default, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; argumentTypeMappings = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression instance, string functionName, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping resultTypeMapping, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping instanceTypeMapping, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; argumentTypeMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.#ctor(System.Linq.Expressions.Expression,System.String,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instance As Expression, functionName As String, returnType As Type, arguments As IEnumerable(Of Expression), Optional resultTypeMapping As RelationalTypeMapping = Nothing, Optional instanceTypeMapping As RelationalTypeMapping = Nothing, Optional argumentTypeMappings As IEnumerable(Of RelationalTypeMapping) = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression : System.Linq.Expressions.Expression * string * Type * seq&lt;System.Linq.Expressions.Expression&gt; * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * seq&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression (instance, functionName, returnType, arguments, resultTypeMapping, instanceTypeMapping, argumentTypeMappings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="functionName" Type="System.String" Index="1" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="returnType" Type="System.Type" Index="2" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="3" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="resultTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="4" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="instanceTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="5" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="argumentTypeMappings" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;" Index="6" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="instance"> The instance on which the function is called. </param>
        <param name="functionName"> Name of the function. </param>
        <param name="returnType"> The return type. </param>
        <param name="arguments"> The arguments. </param>
        <param name="resultTypeMapping"> The result type mapping. </param>
        <param name="instanceTypeMapping"> The instance type mapping. </param>
        <param name="argumentTypeMappings"> The type mappings for each argument. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="sqlFunctionExpression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>
                Dispatches to the specific visit method for this node type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt; Arguments { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyCollection`1&lt;class System.Linq.Expressions.Expression&gt; Arguments" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Arguments As IReadOnlyCollection(Of Expression)" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="F#" Value="member this.Arguments : System.Collections.Generic.IReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Arguments" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; Arguments { get; }" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; Arguments" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Arguments As IReadOnlyList(Of Expression)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="member this.Arguments : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Arguments" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-1.1">System.Collections.Generic.IReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The arguments.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentTypeMappings">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; ArgumentTypeMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; ArgumentTypeMappings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.ArgumentTypeMappings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ArgumentTypeMappings As IReadOnlyList(Of RelationalTypeMapping)" />
      <MemberSignature Language="F#" Value="member this.ArgumentTypeMappings : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.ArgumentTypeMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the type mappings for each argument.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sqlFunctionExpression.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="obj"> The object to compare with the current object. </param>
        <summary>
                Tests if this object is considered equal to another.
            </summary>
        <returns>
                true if the objects are considered equal, false if they are not.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionName">
      <MemberSignature Language="C#" Value="public virtual string FunctionName { get; set; }" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance string FunctionName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.FunctionName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property FunctionName As String" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="F#" Value="member this.FunctionName : string with get, set" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.FunctionName" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="C#" Value="public virtual string FunctionName { get; }" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FunctionName As String" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="member this.FunctionName : string" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.FunctionName" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the name of the function.
            </summary>
        <value>
                The name of the function.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sqlFunctionExpression.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a hash code for this object.
            </summary>
        <returns>
                A hash code for this object.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Instance" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Instance As Expression" />
      <MemberSignature Language="F#" Value="member this.Instance : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The instance.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping InstanceTypeMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping InstanceTypeMapping" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.InstanceTypeMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InstanceTypeMapping As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="member this.InstanceTypeMapping : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.InstanceTypeMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the type mapping of the instance.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNiladic">
      <MemberSignature Language="C#" Value="public virtual bool IsNiladic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNiladic" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.IsNiladic" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNiladic As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNiladic : bool" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.IsNiladic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether the function is niladic.
            </summary>
        <value>A value indicating whether the function is niladic.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />. (Inherited from <see cref="T:System.Linq.Expressions.Expression" />.)
            </summary>
        <value>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResultTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping ResultTypeMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping ResultTypeMapping" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.ResultTypeMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ResultTypeMapping As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="member this.ResultTypeMapping : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.ResultTypeMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the type mapping of the result.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public virtual string Schema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Schema" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Schema" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Schema As String" />
      <MemberSignature Language="F#" Value="member this.Schema : string" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Schema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the name of the schema.
            </summary>
        <value>
                The name of the schema.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sqlFunctionExpression.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates a <see cref="T:System.String" /> representation of the Expression.
            </summary>
        <returns>A <see cref="T:System.String" /> representation of the Expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents. (Inherited from <see cref="T:System.Linq.Expressions.Expression" />.)
            </summary>
        <value>The <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.Type" /> that represents the static type of the expression.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="sqlFunctionExpression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"> An instance of <see cref="T:System.Linq.Expressions.ExpressionVisitor" />. </param>
        <summary>
                Reduces the node and then calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)" /> method passing the
                reduced expression.
                Throws an exception if the node isn't reducible.
            </summary>
        <returns> The expression being visited, or an expression which should replace it in the tree. </returns>
        <remarks>
                Override this method to provide logic to walk the node's children.
                A typical implementation will call visitor.Visit on each of its
                children, and if any of them change, should return a new copy of
                itself with the modified children.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
