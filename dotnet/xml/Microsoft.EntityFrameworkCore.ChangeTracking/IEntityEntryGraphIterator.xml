<Type Name="IEntityEntryGraphIterator" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator">
  <TypeSignature Language="C#" Value="public interface IEntityEntryGraphIterator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEntityEntryGraphIterator" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEntityEntryGraphIterator" />
  <TypeSignature Language="F#" Value="type IEntityEntryGraphIterator = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IEntityEntryGraphIterator" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                A service to traverse a graph of entities and perform some action on at each node.
            </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-track-graph">Tracking entities in EF Core</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="TraverseGraph&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public void TraverseGraph&lt;TState&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt; node, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,bool&gt; handleNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraverseGraph&lt;TState&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1&lt;!!TState&gt; node, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1&lt;!!TState&gt;, bool&gt; handleNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraph``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraverseGraph(Of TState) (node As EntityEntryGraphNode(Of TState), handleNode As Func(Of EntityEntryGraphNode(Of TState), Boolean))" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraph : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt; * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt;, bool&gt; -&gt; unit" Usage="iEntityEntryGraphIterator.TraverseGraph (node, handleNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state object.</typeparam>
        <param name="node">The node that is being visited.</param>
        <param name="handleNode">A delegate to call to handle the node.</param>
        <summary>
                Traverses a graph of entities allowing an action to be taken at each node.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraverseGraph&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public void TraverseGraph&lt;TState&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, TState state, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,bool&gt; handleNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraverseGraph&lt;TState&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, !!TState state, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, !!TState, bool&gt; handleNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraph``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraverseGraph(Of TState) (node As EntityEntryGraphNode, state As TState, handleNode As Func(Of EntityEntryGraphNode, TState, Boolean))" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraph : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, 'State, bool&gt; -&gt; unit" Usage="iEntityEntryGraphIterator.TraverseGraph (node, state, handleNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state object. </typeparam>
        <param name="node"> The node that is being visited. </param>
        <param name="state"> An arbitrary state object. </param>
        <param name="handleNode"> A delegate to call to handle the node. </param>
        <summary>
                Traverses a graph of entities allowing an action to be taken at each node.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraverseGraphAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task TraverseGraphAsync&lt;TState&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt; node, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; handleNode, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task TraverseGraphAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1&lt;!!TState&gt; node, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1&lt;!!TState&gt;, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; handleNode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraphAsync``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function TraverseGraphAsync(Of TState) (node As EntityEntryGraphNode(Of TState), handleNode As Func(Of EntityEntryGraphNode(Of TState), CancellationToken, Task(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraphAsync : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt; * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt;, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iEntityEntryGraphIterator.TraverseGraphAsync (node, handleNode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state object.</typeparam>
        <param name="node">The node that is being visited.</param>
        <param name="handleNode">A delegate to call to handle the node.</param>
        <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Traverses a graph of entities allowing an action to be taken at each node.
            </summary>
        <returns>A task that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraverseGraphAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task TraverseGraphAsync&lt;TState&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, TState state, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; handleNode, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task TraverseGraphAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, !!TState state, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, !!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; handleNode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraphAsync``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function TraverseGraphAsync(Of TState) (node As EntityEntryGraphNode, state As TState, handleNode As Func(Of EntityEntryGraphNode, TState, CancellationToken, Task(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraphAsync : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, 'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iEntityEntryGraphIterator.TraverseGraphAsync (node, state, handleNode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state object. </typeparam>
        <param name="node"> The node that is being visited. </param>
        <param name="state"> An arbitrary state object. </param>
        <param name="handleNode"> A delegate to call to handle the node. </param>
        <param name="cancellationToken">  A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
        <summary>
                Traverses a graph of entities allowing an action to be taken at each node.
            </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
