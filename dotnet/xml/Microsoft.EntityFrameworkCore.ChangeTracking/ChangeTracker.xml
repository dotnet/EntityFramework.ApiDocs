<Type Name="ChangeTracker" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker">
  <TypeSignature Language="C#" Value="public class ChangeTracker : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChangeTracker extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" />
  <TypeSignature Language="VB.NET" Value="Public Class ChangeTracker&#xA;Implements IInfrastructure(Of IStateManager)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1" />
  <TypeSignature Language="F#" Value="type ChangeTracker = class&#xA;    interface IInfrastructure&lt;IStateManager&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1" />
  <TypeSignature Language="C#" Value="public class ChangeTracker : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;, Microsoft.EntityFrameworkCore.Infrastructure.IResettableService" FrameworkAlternate="efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChangeTracker extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;, class Microsoft.EntityFrameworkCore.Infrastructure.IResettableService" FrameworkAlternate="efcore-2.2" />
  <TypeSignature Language="VB.NET" Value="Public Class ChangeTracker&#xA;Implements IInfrastructure(Of IStateManager), IResettableService" FrameworkAlternate="efcore-2.2" />
  <TypeSignature Language="F#" Value="type ChangeTracker = class&#xA;    interface IInfrastructure&lt;IStateManager&gt;&#xA;    interface IResettableService" FrameworkAlternate="efcore-2.2" />
  <TypeSignature Language="C#" Value="public class ChangeTracker : Microsoft.EntityFrameworkCore.Infrastructure.IResettableService" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChangeTracker extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IResettableService" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class ChangeTracker&#xA;Implements IResettableService" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type ChangeTracker = class&#xA;    interface IResettableService" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IResettableService</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Provides access to change tracking information and operations for entity instances the context is tracking.
                Instances of this class are typically obtained from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.ChangeTracker" /> and it is not designed
                to be directly constructed in your application code.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChangeTracker (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.#ctor(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As DbContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker : Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker context" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChangeTracker (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector changeDetector, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityEntryGraphIterator graphIterator, Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector changeDetector, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityEntryGraphIterator graphIterator, class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityEntryGraphIterator,Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stateManager As IStateManager, changeDetector As IChangeDetector, graphIterator As IEntityEntryGraphIterator, context As DbContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityEntryGraphIterator * Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker (stateManager, changeDetector, graphIterator, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="changeDetector" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector" Index="1" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="graphIterator" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityEntryGraphIterator" Index="2" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="3" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <param name="changeDetector">To be added.</param>
        <param name="graphIterator">To be added.</param>
        <param name="context">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChangeTracker (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector changeDetector, Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator graphIterator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector changeDetector, class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator graphIterator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.#ctor(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As DbContext, stateManager As IStateManager, changeDetector As IChangeDetector, model As IModel, graphIterator As IEntityEntryGraphIterator)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector * Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker (context, stateManager, changeDetector, model, graphIterator)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="changeDetector" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="graphIterator" Type="Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator" Index="4" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="stateManager">To be added.</param>
        <param name="changeDetector">To be added.</param>
        <param name="model">To be added.</param>
        <param name="graphIterator">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptAllChanges">
      <MemberSignature Language="C#" Value="public virtual void AcceptAllChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AcceptAllChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AcceptAllChanges ()" />
      <MemberSignature Language="F#" Value="abstract member AcceptAllChanges : unit -&gt; unit&#xA;override this.AcceptAllChanges : unit -&gt; unit" Usage="changeTracker.AcceptAllChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Accepts all changes made to entities in the context. It will be assumed that the tracked entities
                represent the current state of the database. This method is typically called by <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                after changes have been successfully saved to the database.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoDetectChangesEnabled">
      <MemberSignature Language="C#" Value="public virtual bool AutoDetectChangesEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoDetectChangesEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoDetectChangesEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.AutoDetectChangesEnabled : bool with get, set" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether the <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> method is called
                automatically by methods of <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> and related classes.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    The default value is true. This ensures the context is aware of any changes to tracked entity instances
                    before performing operations such as <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> or returning change tracking
                    information. If you disable automatic detect changes then you must ensure that
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> is called when entity instances have been modified.
                    Failure to do so may result in some changes not being persisted during
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> or out-of-date change tracking information being returned.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CascadeChanges">
      <MemberSignature Language="C#" Value="public virtual void CascadeChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CascadeChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.CascadeChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CascadeChanges ()" />
      <MemberSignature Language="F#" Value="abstract member CascadeChanges : unit -&gt; unit&#xA;override this.CascadeChanges : unit -&gt; unit" Usage="changeTracker.CascadeChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Forces immediate cascading deletion of child/dependent entities when they are either
                severed from a required parent/principal entity, or the required parent/principal entity
                is itself deleted. See <see cref="T:Microsoft.EntityFrameworkCore.DeleteBehavior" />.
            </summary>
        <remarks>
          <para>
                    This method is usually used when <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.CascadeDeleteTiming" /> and/or
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DeleteOrphansTiming" /> have been set to <see cref="F:Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming.Never" />
                    to manually force the deletes to have at a time controlled by the application.
                </para>
          <para>
                    This method calls <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to ensure the returned value is accurate.
                    Since detecting changes can be slow, consider temporarily setting <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /> to prevent
                    detecting changes in situations where the state is known to be up-to-date.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CascadeDeleteTiming">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming CascadeDeleteTiming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming CascadeDeleteTiming" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.CascadeDeleteTiming" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CascadeDeleteTiming As CascadeTiming" />
      <MemberSignature Language="F#" Value="member this.CascadeDeleteTiming : Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming with get, set" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.CascadeDeleteTiming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating when a dependent/child entity will have its state
                set to <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> once its parent/principal entity has been marked
                as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />. The default value is<see cref="F:Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming.Immediate" />.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    Dependent/child entities are only deleted automatically when the relationship
                    is configured with <see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.Cascade" />. This is set by default
                    for required relationships.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="changeTracker.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Stops tracking all currently tracked entities.
            </summary>
        <remarks>
          <para>
            <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is designed to have a short lifetime where a new instance is created for each unit-of-work.
                    This manner means all tracked entities are discarded when the context is disposed at the end of each unit-of-work.
                    However, clearing all tracked entities using this method may be useful in situations where creating a new context
                    instance is not practical.
                </para>
          <para>
                    This method should always be preferred over detaching every tracked entity.
                    Detaching entities is a slow process that may have side effects.
                    This method is much more efficient at clearing all tracked entities from the context.
                </para>
          <para>
                    Note that this method does not generate <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.StateChanged" /> events since entities are not individually detached.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbContext Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Context" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Context As DbContext" />
      <MemberSignature Language="F#" Value="member this.Context : Microsoft.EntityFrameworkCore.DbContext" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the context this change tracker belongs to.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugView">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DebugView" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DebugView As DebugView" />
      <MemberSignature Language="F#" Value="member this.DebugView : Microsoft.EntityFrameworkCore.Infrastructure.DebugView" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DebugView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.DebugView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    Expand this property in the debugger for a human-readable view of the entities being tracked.
                </para>
          <para>
                    Warning: Do not rely on the format of the debug strings.
                    They are designed for debugging only and may change arbitrarily between releases.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOrphansTiming">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming DeleteOrphansTiming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming DeleteOrphansTiming" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DeleteOrphansTiming" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DeleteOrphansTiming As CascadeTiming" />
      <MemberSignature Language="F#" Value="member this.DeleteOrphansTiming : Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming with get, set" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DeleteOrphansTiming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating when a dependent/child entity will have its state
                set to <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> once severed from a parent/principal entity
                through either a navigation or foreign key property being set to null. The default
                value is <see cref="F:Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming.Immediate" />.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    Dependent/child entities are only deleted automatically when the relationship
                    is configured with <see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.Cascade" />. This is set by default
                    for required relationships.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public virtual void DetectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DetectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DetectChanges ()" />
      <MemberSignature Language="F#" Value="abstract member DetectChanges : unit -&gt; unit&#xA;override this.DetectChanges : unit -&gt; unit" Usage="changeTracker.DetectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Scans the tracked entity instances to detect any changes made to the instance data. <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />
                is usually called automatically by the context when up-to-date information is required (before
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> and when returning change tracking information). You typically only need to
                call this method if you have disabled <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                <remarks><para>
                        See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                    </para></remarks></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectedAllChanges">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; DetectedAllChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; DetectedAllChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectedAllChanges" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DetectedAllChanges As EventHandler(Of DetectedChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectedAllChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; " Usage="member this.DetectedAllChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An event fired when any changes have been detected to the entity graph, either through an
                explicit call to <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />, or automatically, such as part of
                executing <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> or <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)" />.
            </summary>
        <remarks>
          <para>
            <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /> is set to <see langword="false" /> for the duration of the event to prevent an infinite
                    loop of recursive automatic calls.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectedEntityChanges">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; DetectedEntityChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; DetectedEntityChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectedEntityChanges" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DetectedEntityChanges As EventHandler(Of DetectedEntityChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectedEntityChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; " Usage="member this.DetectedEntityChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An event fired when any changes have been detected to a single entity, either through an
                explicit call to <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> or <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.DetectChanges" />, or automatically, such as part of
                executing <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> or <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)" />.
            </summary>
        <remarks>
          <para>
            <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /> is set to <see langword="false" /> for the duration of the event to prevent an infinite
                    loop of recursive automatic calls.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectingAllChanges">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; DetectingAllChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; DetectingAllChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectingAllChanges" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DetectingAllChanges As EventHandler(Of DetectChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectingAllChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; " Usage="member this.DetectingAllChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An event fired when detecting changes to the entity graph about to happen, either through an
                explicit call to <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />, or automatically, such as part of
                executing <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> or <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)" />.
            </summary>
        <remarks>
          <para>
            <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /> is set to <see langword="false" /> for the duration of the event to prevent an infinite
                    loop of recursive automatic calls.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectingEntityChanges">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; DetectingEntityChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; DetectingEntityChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectingEntityChanges" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DetectingEntityChanges As EventHandler(Of DetectEntityChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectingEntityChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; " Usage="member this.DetectingEntityChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An event fired when detecting changes to a single entity is about to happen, either through an
                explicit call to <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> or <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.DetectChanges" />, or automatically, such as part of
                executing <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> or <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)" />.
            </summary>
        <remarks>
          <para>
            <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /> is set to <see langword="false" /> for the duration of the event to prevent an infinite
                    loop of recursive automatic calls.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Entries">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&gt; Entries ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&gt; Entries() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entries () As IEnumerable(Of EntityEntry)" />
      <MemberSignature Language="F#" Value="abstract member Entries : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&gt;&#xA;override this.Entries : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&gt;" Usage="changeTracker.Entries " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for each entity being tracked by the context.
                The entries provide access to change tracking information and operations for each entity.
            </summary>
        <returns>An entry for each entity being tracked.</returns>
        <remarks>
          <para>
                    Consider using the methods of <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> for faster lookup of tracked entities by key, foreign key,
                    or property value.
                </para>
          <para>
                    This method calls <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to ensure all entries returned reflect up-to-date state.
                    Since detecting changes can be slow, consider temporarily setting <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /> to prevent
                    detecting changes in situations where the state is known to be up-to-date.
                </para>
          <para>
                    Note that modification of entity state while iterating over the returned enumeration may result in
                    an <see cref="T:System.InvalidOperationException" /> indicating that the collection was modified while enumerating.
                    To avoid this, create a defensive copy using <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" /> or similar before iterating.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Entries&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt; Entries&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!!TEntity&gt;&gt; Entries&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Entries``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entries(Of TEntity As Class) () As IEnumerable(Of EntityEntry(Of TEntity))" />
      <MemberSignature Language="F#" Value="abstract member Entries : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt; (requires 'Entity : null)&#xA;override this.Entries : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt; (requires 'Entity : null)" Usage="changeTracker.Entries " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity">The type of entities to get entries for.</typeparam>
        <summary>
                Gets an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for all entities of a given type being tracked by the context.
                The entries provide access to change tracking information and operations for each entity.
            </summary>
        <returns>An entry for each entity of the given type that is being tracked.</returns>
        <remarks>
          <para>
                    Consider using the methods of <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> for faster lookup of tracked entities by key, foreign key,
                    or property value.
                </para>
          <para>
                    This method calls <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to ensure all entries returned reflect up-to-date state.
                    Since detecting changes can be slow, consider temporarily setting <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /> to prevent
                    detecting changes in situations where the state is known to be up-to-date.
                </para>
          <para>
                    Note that modification of entity state while iterating over the returned enumeration may result in
                    an <see cref="T:System.InvalidOperationException" /> indicating that the collection was modified while enumerating.
                    To avoid this, create a defensive copy using <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" /> or similar before iterating.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="changeTracker.Equals obj" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current object.</param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="changeTracker.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public virtual bool HasChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasChanges () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member HasChanges : unit -&gt; bool&#xA;override this.HasChanges : unit -&gt; bool" Usage="changeTracker.HasChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Checks if any new, deleted, or changed entities are being tracked
                such that these changes will be sent to the database if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                or <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)" /> is called.
            </summary>
        <returns>
          <see langword="true" /> if there are changes to save, otherwise <see langword="false" />.</returns>
        <remarks>
          <para>
                    This method calls <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to ensure the returned value is accurate.
                    Since detecting changes can be slow, consider temporarily setting <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /> to prevent
                    detecting changes in situations where the state is known to be up-to-date.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LazyLoadingEnabled">
      <MemberSignature Language="C#" Value="public virtual bool LazyLoadingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LazyLoadingEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.LazyLoadingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property LazyLoadingEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.LazyLoadingEnabled : bool with get, set" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.LazyLoadingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether navigation properties for tracked entities
                will be loaded on first access.
            </summary>
        <value>To be added.</value>
        <remarks>
                The default value is true. However, lazy loading will only occur for navigation properties
                of entities that have also been configured in the model for lazy loading.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#ChangeTracking#Internal#IStateManager&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IStateManager Implements IInfrastructure(Of IStateManager).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;.Instance : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    Gets the internal state manager being used to store information about tracked entities.
                </para>
          <para>
                    This property is intended for use by extension methods. It is not intended to be used in
                    application code.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState">
      <MemberSignature Language="C#" Value="void IResettableService.ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Microsoft#EntityFrameworkCore#Infrastructure#IResettableService#ResetState" />
      <MemberSignature Language="VB.NET" Value="Sub ResetState () Implements IResettableService.ResetState" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState : unit -&gt; unit&#xA;override this.Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState : unit -&gt; unit" Usage="changeTracker.Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Task IResettableService.ResetStateAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Threading.Tasks.Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Microsoft#EntityFrameworkCore#Infrastructure#IResettableService#ResetStateAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Function ResetStateAsync (cancellationToken As CancellationToken) As Task Implements IResettableService.ResetStateAsync" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="changeTracker.Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryTrackingBehavior">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.QueryTrackingBehavior QueryTrackingBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.QueryTrackingBehavior QueryTrackingBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueryTrackingBehavior As QueryTrackingBehavior" />
      <MemberSignature Language="F#" Value="member this.QueryTrackingBehavior : Microsoft.EntityFrameworkCore.QueryTrackingBehavior with get, set" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.QueryTrackingBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets the tracking behavior for LINQ queries run against the context. Disabling change tracking
                is useful for read-only scenarios because it avoids the overhead of setting up change tracking for each
                entity instance. You should not disable change tracking if you want to manipulate entity instances and
                persist those changes to the database using <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    This method sets the default behavior for the context, but you can override this behavior for individual
                    queries using the <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
                    and <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})" /> methods.
                </para>
          <para>
                    The default value is <see cref="F:Microsoft.EntityFrameworkCore.QueryTrackingBehavior.TrackAll" />. This means
                    the change tracker will keep track of changes for all entities that are returned from a LINQ query.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler(Of EntityStateChangedEventArgs) " />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An event fired when an entity that is tracked by the associated <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has moved
                from one <see cref="T:Microsoft.EntityFrameworkCore.EntityState" /> to another.
            </summary>
        <remarks>
          <para>
                    Note that this event does not fire for entities when they are first tracked by the context.
                    Use the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Tracked" /> event to get notified when the context begins tracking an entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangingEventArgs&gt; StateChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangingEventArgs&gt; StateChanging" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.StateChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanging As EventHandler(Of EntityStateChangingEventArgs) " />
      <MemberSignature Language="F#" Value="member this.StateChanging : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangingEventArgs&gt; " Usage="member this.StateChanging : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An event fired when an entity that is tracked by the associated <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is moving
                from one <see cref="T:Microsoft.EntityFrameworkCore.EntityState" /> to another.
            </summary>
        <remarks>
          <para>
                    Note that this event does not fire for entities when they are first tracked by the context.
                    Use the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Tracking" /> event to get notified when the context begins tracking an entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="changeTracker.ToString " />
      <MemberSignature Language="C#" Value="public override string? ToString ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tracked">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackedEventArgs&gt; Tracked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackedEventArgs&gt; Tracked" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Tracked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tracked As EventHandler(Of EntityTrackedEventArgs) " />
      <MemberSignature Language="F#" Value="member this.Tracked : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackedEventArgs&gt; " Usage="member this.Tracked : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An event fired when an entity is tracked by the context, either because it was returned
                from a tracking query, or because it was attached or added to the context.
            </summary>
        <remarks>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackGraph">
      <MemberSignature Language="C#" Value="public virtual void TrackGraph (object rootEntity, Action&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrackGraph(object rootEntity, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.TrackGraph(System.Object,System.Action{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrackGraph (rootEntity As Object, callback As Action(Of EntityEntryGraphNode))" />
      <MemberSignature Language="F#" Value="abstract member TrackGraph : obj * Action&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&gt; -&gt; unit&#xA;override this.TrackGraph : obj * Action&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&gt; -&gt; unit" Usage="changeTracker.TrackGraph (rootEntity, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootEntity" Type="System.Object" />
        <Parameter Name="callback" Type="System.Action&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&gt;" />
      </Parameters>
      <Docs>
        <param name="rootEntity">The entity to begin traversal from.</param>
        <param name="callback">
                An action to configure the change tracking information for each entity. For the entity to begin being tracked,
                the <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> must be set.
            </param>
        <summary>
                Begins tracking an entity and any entities that are reachable by traversing its navigation properties.
                Traversal is recursive so the navigation properties of any discovered entities will also be scanned.
                The specified <paramref name="callback" /> is called for each discovered entity and must set the
                <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> that each entity should be tracked in. If no state is set, the entity
                remains untracked.
            </summary>
        <remarks>
          <para>
                    This method is designed for use in disconnected scenarios where entities are retrieved using one instance of
                    the context and then changes are saved using a different instance of the context. An example of this is a
                    web service where one service call retrieves entities from the database and another service call persists
                    any changes to the entities. Each service call uses a new instance of the context that is disposed when the
                    call is complete.
                </para>
          <para>
                    If an entity is discovered that is already tracked by the context, that entity is not processed (and its
                    navigation properties are not traversed).
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackGraph&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public virtual void TrackGraph&lt;TState&gt; (object rootEntity, TState state, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,bool&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrackGraph&lt;TState&gt;(object rootEntity, !!TState state, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, !!TState, bool&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.TrackGraph``1(System.Object,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrackGraph(Of TState) (rootEntity As Object, state As TState, callback As Func(Of EntityEntryGraphNode, TState, Boolean))" />
      <MemberSignature Language="F#" Value="abstract member TrackGraph : obj * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, 'State, bool&gt; -&gt; unit&#xA;override this.TrackGraph : obj * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, 'State, bool&gt; -&gt; unit" Usage="changeTracker.TrackGraph (rootEntity, state, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="rootEntity" Type="System.Object" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="callback" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state object. </typeparam>
        <param name="rootEntity"> The entity to begin traversal from. </param>
        <param name="state"> An arbitrary state object passed to the callback. </param>
        <param name="callback">
                An delegate to configure the change tracking information for each entity. The second parameter to the
                callback is the arbitrary state object passed above. Iteration of the graph will not continue down the graph
                if the callback returns <c>false</c>.
            </param>
        <summary>
          <para>
                    Begins tracking an entity and any entities that are reachable by traversing it's navigation properties.
                    Traversal is recursive so the navigation properties of any discovered entities will also be scanned.
                    The specified <paramref name="callback" /> is called for each discovered entity and must set the
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> that each entity should be tracked in. If no state is set, the entity
                    remains untracked.
                </para>
          <para>
                    This method is designed for use in disconnected scenarios where entities are retrieved using one instance of
                    the context and then changes are saved using a different instance of the context. An example of this is a
                    web service where one service call retrieves entities from the database and another service call persists
                    any changes to the entities. Each service call uses a new instance of the context that is disposed when the
                    call is complete.
                </para>
          <para>
                    Typically traversal of the graph should stop whenever an already tracked entity is encountered or when
                    an entity is reached that should not be tracked. For this typical behavior, use the
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.TrackGraph(System.Object,System.Action{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode})" /> overload. This overload, on the other hand,
                    allows the callback to decide when traversal will end, but the onus is then on the caller to ensure that
                    traversal will not enter an infinite loop.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackGraph&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public virtual void TrackGraph&lt;TState&gt; (object rootEntity, TState state, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,bool&gt; callback);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrackGraph&lt;TState&gt;(object rootEntity, !!TState state, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1&lt;!!TState&gt;, bool&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.TrackGraph``1(System.Object,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrackGraph(Of TState) (rootEntity As Object, state As TState, callback As Func(Of EntityEntryGraphNode(Of TState), Boolean))" />
      <MemberSignature Language="F#" Value="abstract member TrackGraph : obj * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt;, bool&gt; -&gt; unit&#xA;override this.TrackGraph : obj * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt;, bool&gt; -&gt; unit" Usage="changeTracker.TrackGraph (rootEntity, state, callback)" />
      <MemberSignature Language="C#" Value="public virtual void TrackGraph&lt;TState&gt; (object rootEntity, TState? state, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,bool&gt; callback);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="rootEntity" Type="System.Object" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="callback" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state object.</typeparam>
        <param name="rootEntity">The entity to begin traversal from.</param>
        <param name="state">An arbitrary state object passed to the callback.</param>
        <param name="callback">
                An delegate to configure the change tracking information for each entity. The second parameter to the
                callback is the arbitrary state object passed above. Iteration of the graph will not continue down the graph
                if the callback returns <see langword="false" />.
            </param>
        <summary>
                Begins tracking an entity and any entities that are reachable by traversing its navigation properties.
                Traversal is recursive so the navigation properties of any discovered entities will also be scanned.
                The specified <paramref name="callback" /> is called for each discovered entity and must set the
                <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> that each entity should be tracked in. If no state is set, the entity
                remains untracked.
            </summary>
        <remarks>
          <para>
                    This method is designed for use in disconnected scenarios where entities are retrieved using one instance of
                    the context and then changes are saved using a different instance of the context. An example of this is a
                    web service where one service call retrieves entities from the database and another service call persists
                    any changes to the entities. Each service call uses a new instance of the context that is disposed when the
                    call is complete.
                </para>
          <para>
                    Typically traversal of the graph should stop whenever an already tracked entity is encountered or when
                    an entity is reached that should not be tracked. For this typical behavior, use the
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.TrackGraph(System.Object,System.Action{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode})" /> overload. This overload, on the other hand,
                    allows the callback to decide when traversal will end, but the onus is then on the caller to ensure that
                    traversal will not enter an infinite loop.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tracking">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackingEventArgs&gt; Tracking;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackingEventArgs&gt; Tracking" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.Tracking" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tracking As EventHandler(Of EntityTrackingEventArgs) " />
      <MemberSignature Language="F#" Value="member this.Tracking : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackingEventArgs&gt; " Usage="member this.Tracking : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An event fired when an entity is about to be tracked by the context, either because it is returned
                from a tracking query, or because it is being attached or added to the context.
            </summary>
        <remarks>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
