<Type Name="LocalView&lt;TEntity&gt;" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.LocalView&lt;TEntity&gt;">
  <TypeSignature Language="C#" Value="public class LocalView&lt;TEntity&gt; : System.Collections.Generic.ICollection&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging where TEntity : class" FrameworkAlternate="efcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LocalView`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.Collections.Specialized.INotifyCollectionChanged, class System.ComponentModel.INotifyPropertyChanged, class System.ComponentModel.INotifyPropertyChanging" FrameworkAlternate="efcore-1.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1" />
  <TypeSignature Language="VB.NET" Value="Public Class LocalView(Of TEntity)&#xA;Implements ICollection(Of TEntity), IEnumerable(Of TEntity), INotifyCollectionChanged, INotifyPropertyChanged, INotifyPropertyChanging" FrameworkAlternate="efcore-1.1" />
  <TypeSignature Language="F#" Value="type LocalView&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ICollection&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface INotifyCollectionChanged&#xA;    interface INotifyPropertyChanged&#xA;    interface INotifyPropertyChanging" FrameworkAlternate="efcore-1.1" />
  <TypeSignature Language="C#" Value="public class LocalView&lt;TEntity&gt; : System.Collections.Generic.ICollection&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.IListSource, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging where TEntity : class" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LocalView`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.Collections.Specialized.INotifyCollectionChanged, class System.ComponentModel.IListSource, class System.ComponentModel.INotifyPropertyChanged, class System.ComponentModel.INotifyPropertyChanging" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class LocalView(Of TEntity)&#xA;Implements ICollection(Of TEntity), IEnumerable(Of TEntity), IListSource, INotifyCollectionChanged, INotifyPropertyChanged, INotifyPropertyChanging" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type LocalView&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ICollection&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface INotifyCollectionChanged&#xA;    interface INotifyPropertyChanged&#xA;    interface INotifyPropertyChanging&#xA;    interface IListSource" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Specialized.INotifyCollectionChanged</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanging</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity">The type of the entity in the local view.</typeparam>
    <summary>
                A collection that stays in sync with entities of a given type being tracked by
                a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. Call <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> to obtain a
                local view.
            </summary>
    <remarks>
      <para>
                    This local view will stay in sync as entities are added or removed from the context. Likewise, entities
                    added to or removed from the local view will automatically be added to or removed
                    from the context.
                </para>
      <para>
                    Adding an entity to this collection will cause it to be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" />
                    state by the context unless it is already being tracked.
                </para>
      <para>
                    Removing an entity from this collection will cause it to be marked as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />,
                    unless it was previously in the Added state, in which case it will be detached from the context.
                </para>
      <para>
                    The collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />,
                    <see cref="T:System.ComponentModel.INotifyPropertyChanging" />, and <see cref="T:System.ComponentModel.INotifyPropertyChanging" /> such that
                    notifications are generated when an entity starts being tracked by the context or is
                    marked as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> or <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Detached" />.
                </para>
      <para>
                    Do not use this type directly for data binding. Instead call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection" />
                    for WPF binding, or <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList" /> for WinForms.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                    examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LocalView (Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; set);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbSet`1&lt;!TEntity&gt; set) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.#ctor(Microsoft.EntityFrameworkCore.DbSet{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (set As DbSet(Of TEntity))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.LocalView&lt;'Entity (requires 'Entity : null)&gt; : Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.LocalView&lt;'Entity (requires 'Entity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.LocalView&lt;'Entity (requires 'Entity : null)&gt; set" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="set" Type="Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="set">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (TEntity item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TEntity item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (item As TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Entity -&gt; unit&#xA;override this.Add : 'Entity -&gt; unit" Usage="localView.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="item">The item to start tracking.</param>
        <summary>
                Adds a new entity to the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />. If the entity is not being tracked or is currently
                marked as deleted, then it becomes tracked as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" />.
            </summary>
        <remarks>
          <para>
                    Note that only the given entity is tracked. Any related entities discoverable from
                    the given entity are not automatically tracked.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="localView.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Marks all entities of type TEntity being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />.
            </summary>
        <remarks>
          <para>
                    Entities that are currently marked as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> will be marked
                    as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Detached" /> since the Added state indicates that the entity
                    has not been saved to the database and hence it does not make sense to attempt to
                    delete it from the database.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionChanged">
      <MemberSignature Language="C#" Value="public virtual event System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged;" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".event class System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CollectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Event CollectionChanged As NotifyCollectionChangedEventHandler " FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.CollectionChanged : System.Collections.Specialized.NotifyCollectionChangedEventHandler " Usage="member this.CollectionChanged : System.Collections.Specialized.NotifyCollectionChangedEventHandler " />
      <MemberSignature Language="C#" Value="public virtual event System.Collections.Specialized.NotifyCollectionChangedEventHandler? CollectionChanged;" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="C#" Value="public event System.Collections.Specialized.NotifyCollectionChangedEventHandler? CollectionChanged;" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Event CollectionChanged As NotifyCollectionChangedEventHandler " FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NotifyCollectionChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Occurs when the contents of the collection changes, either because an entity
                has been directly added or removed from the collection, or because an entity
                starts being tracked, or because an entity is marked as Deleted.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (TEntity item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TEntity item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (item As TEntity) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'Entity -&gt; bool&#xA;override this.Contains : 'Entity -&gt; bool" Usage="localView.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="item">The entity to check.</param>
        <summary>
                Returns <see langword="true" /> if the entity is being tracked by the context and has not been
                marked as Deleted.
            </summary>
        <returns>
          <see langword="true" /> if the entity is being tracked by the context and has not been marked as Deleted.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (TEntity[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!TEntity[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CopyTo (array As TEntity(), arrayIndex As Integer)" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'Entity[] * int -&gt; unit&#xA;override this.CopyTo : 'Entity[] * int -&gt; unit" Usage="localView.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="TEntity[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The array into which to copy entities.</param>
        <param name="arrayIndex">The index into the array to start copying.</param>
        <summary>
                Copies to an array all entities of type TEntity that are being tracked and are
                not marked as Deleted.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.LocalView&lt;'Entity (requires 'Entity : null)&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The number of entities of type TEntity that are being tracked and are not marked
                as Deleted.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntry">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;? FindEntry (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, System.Collections.Generic.IEnumerable&lt;object?&gt; propertyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; FindEntry(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, class System.Collections.Generic.IEnumerable`1&lt;object&gt; propertyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.FindEntry(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IProperty},System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntry (properties As IEnumerable(Of IProperty), propertyValues As IEnumerable(Of Object)) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member FindEntry : seq&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; * seq&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindEntry : seq&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; * seq&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="localView.FindEntry (properties, propertyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties to match.</param>
        <param name="propertyValues">The values of the properties to match.</param>
        <summary>
                Returns an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the first entity being tracked by the context where the value of the
                given property matches the given values. The entry provide access to change tracking information and operations for the entity.
            </summary>
        <returns>An entry for the entity found, or <see langword="null" />.</returns>
        <remarks>
          <para>
                    This method is frequently used to get the entity with a given non-null foreign key, primary key, or alternate key values.
                    Lookups using a key property like this are more efficient than lookups on other property value.
                </para>
          <para>
                    By default, accessing <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> will call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to
                    ensure that all entities searched and returned are up-to-date. Calling this method will not result in another call to
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />. Since this method is commonly used for fast lookups, consider reusing
                    the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> object for multiple lookups and/or disabling automatic detecting of changes using
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntry">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;? FindEntry (System.Collections.Generic.IEnumerable&lt;string&gt; propertyNames, System.Collections.Generic.IEnumerable&lt;object?&gt; propertyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; FindEntry(class System.Collections.Generic.IEnumerable`1&lt;string&gt; propertyNames, class System.Collections.Generic.IEnumerable`1&lt;object&gt; propertyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.FindEntry(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntry (propertyNames As IEnumerable(Of String), propertyValues As IEnumerable(Of Object)) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member FindEntry : seq&lt;string&gt; * seq&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindEntry : seq&lt;string&gt; * seq&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="localView.FindEntry (propertyNames, propertyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">The name of the properties to match.</param>
        <param name="propertyValues">The values of the properties to match.</param>
        <summary>
                Returns an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the first entity being tracked by the context where the value of the
                given property matches the given values. The entry provide access to change tracking information and operations for the entity.
            </summary>
        <returns>An entry for the entity found, or <see langword="null" />.</returns>
        <remarks>
          <para>
                    This method is frequently used to get the entity with a given non-null foreign key, primary key, or alternate key values.
                    Lookups using a key property like this are more efficient than lookups on other property value.
                </para>
          <para>
                    By default, accessing <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> will call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to
                    ensure that all entities searched and returned are up-to-date. Calling this method will not result in another call to
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />. Since this method is commonly used for fast lookups, consider reusing
                    the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> object for multiple lookups and/or disabling automatic detecting of changes using
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntry&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;? FindEntry&lt;TKey&gt; (TKey keyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; FindEntry&lt;TKey&gt;(!!TKey keyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.FindEntry``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntry(Of TKey) (keyValue As TKey) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member FindEntry : 'Key -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindEntry : 'Key -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="localView.FindEntry keyValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keyValue" Type="TKey" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">The type of the primary key property.</typeparam>
        <param name="keyValue">The value of the primary key for the entity to be found.</param>
        <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity with the given primary key value in the change tracker, if it is
                being tracked. <see langword="null" /> is returned if no entity with the given key value is being tracked.
                This method never queries the database.
            </summary>
        <returns>An entry for the entity found, or <see langword="null" />.</returns>
        <remarks>
          <para>
                    By default, accessing <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> will call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to
                    ensure that all entities searched and returned are up-to-date. Calling this method will not result in another call to
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />. Since this method is commonly used for fast lookups, consider reusing
                    the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> object for multiple lookups and/or disabling automatic detecting of changes using
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntry&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;? FindEntry&lt;TProperty&gt; (Microsoft.EntityFrameworkCore.Metadata.IProperty property, TProperty? propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; FindEntry&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, !!TProperty propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.FindEntry``1(Microsoft.EntityFrameworkCore.Metadata.IProperty,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntry(Of TProperty) (property As IProperty, propertyValue As TProperty) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member FindEntry : Microsoft.EntityFrameworkCore.Metadata.IProperty * 'Property -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindEntry : Microsoft.EntityFrameworkCore.Metadata.IProperty * 'Property -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="localView.FindEntry (property, propertyValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyValue" Type="TProperty" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property value.</typeparam>
        <param name="property">The property to match.</param>
        <param name="propertyValue">The value of the property to match.</param>
        <summary>
                Returns an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the first entity being tracked by the context where the value of the
                given property matches the given value. The entry provide access to change tracking information and operations for the entity.
            </summary>
        <returns>An entry for the entity found, or <see langword="null" />.</returns>
        <remarks>
          <para>
                    This method is frequently used to get the entity with a given non-null foreign key, primary key, or alternate key value.
                    Lookups using a key property like this are more efficient than lookups on other property value.
                </para>
          <para>
                    By default, accessing <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> will call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to
                    ensure that all entities searched and returned are up-to-date. Calling this method will not result in another call to
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />. Since this method is commonly used for fast lookups, consider reusing
                    the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> object for multiple lookups and/or disabling automatic detecting of changes using
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntry&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;? FindEntry&lt;TProperty&gt; (string propertyName, TProperty? propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; FindEntry&lt;TProperty&gt;(string propertyName, !!TProperty propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.FindEntry``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntry(Of TProperty) (propertyName As String, propertyValue As TProperty) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member FindEntry : string * 'Property -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindEntry : string * 'Property -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="localView.FindEntry (propertyName, propertyValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyValue" Type="TProperty" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property value.</typeparam>
        <param name="propertyName">The name of the property to match.</param>
        <param name="propertyValue">The value of the property to match.</param>
        <summary>
                Returns an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the first entity being tracked by the context where the value of the
                given property matches the given value. The entry provide access to change tracking information and operations for the entity.
            </summary>
        <returns>An entry for the entity found, or <see langword="null" />.</returns>
        <remarks>
          <para>
                    This method is frequently used to get the entity with a given non-null foreign key, primary key, or alternate key value.
                    Lookups using a key property like this are more efficient than lookups on other property value.
                </para>
          <para>
                    By default, accessing <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> will call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to
                    ensure that all entities searched and returned are up-to-date. Calling this method will not result in another call to
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />. Since this method is commonly used for fast lookups, consider reusing
                    the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> object for multiple lookups and/or disabling automatic detecting of changes using
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntryUntyped">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;? FindEntryUntyped (System.Collections.Generic.IEnumerable&lt;object?&gt; keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; FindEntryUntyped(class System.Collections.Generic.IEnumerable`1&lt;object&gt; keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.FindEntryUntyped(System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntryUntyped (keyValues As IEnumerable(Of Object)) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member FindEntryUntyped : seq&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindEntryUntyped : seq&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="localView.FindEntryUntyped keyValues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keyValues">The values of the primary key for the entity to be found.</param>
        <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity with the given primary key values in the change tracker, if it is
                being tracked. <see langword="null" /> is returned if no entity with the given key values is being tracked.
                This method never queries the database.
            </summary>
        <returns>An entry for the entity found, or <see langword="null" />.</returns>
        <remarks>
          <para>
                    By default, accessing <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> will call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to
                    ensure that all entities searched and returned are up-to-date. Calling this method will not result in another call to
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />. Since this method is commonly used for fast lookups, consider reusing
                    the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> object for multiple lookups and/or disabling automatic detecting of changes using
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntries">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt; GetEntries (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, System.Collections.Generic.IEnumerable&lt;object?&gt; propertyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt;&gt; GetEntries(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, class System.Collections.Generic.IEnumerable`1&lt;object&gt; propertyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEntries(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IProperty},System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntries (properties As IEnumerable(Of IProperty), propertyValues As IEnumerable(Of Object)) As IEnumerable(Of EntityEntry(Of TEntity))" />
      <MemberSignature Language="F#" Value="abstract member GetEntries : seq&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; * seq&lt;obj&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;&#xA;override this.GetEntries : seq&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; * seq&lt;obj&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;" Usage="localView.GetEntries (properties, propertyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The the properties to match.</param>
        <param name="propertyValues">The values of the properties to match.</param>
        <summary>
                Returns an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for each entity being tracked by the context where the values of the given properties
                matches the given values. The entries provide access to change tracking information and operations for each entity.
            </summary>
        <returns>An entry for each entity being tracked.</returns>
        <remarks>
          <para>
                    This method is frequently used to get the entities with a given non-null foreign key, primary key, or alternate key values.
                    Lookups using a key property like this are more efficient than lookups on other property values.
                </para>
          <para>
                    By default, accessing <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> will call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to
                    ensure that all entities searched and returned are up-to-date. Calling this method will not result in another call to
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />. Since this method is commonly used for fast lookups, consider reusing
                    the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> object for multiple lookups and/or disabling automatic detecting of changes using
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    Note that modification of entity state while iterating over the returned enumeration may result in
                    an <see cref="T:System.InvalidOperationException" /> indicating that the collection was modified while enumerating.
                    To avoid this, create a defensive copy using <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" /> or similar before iterating.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntries">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt; GetEntries (System.Collections.Generic.IEnumerable&lt;string&gt; propertyNames, System.Collections.Generic.IEnumerable&lt;object?&gt; propertyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt;&gt; GetEntries(class System.Collections.Generic.IEnumerable`1&lt;string&gt; propertyNames, class System.Collections.Generic.IEnumerable`1&lt;object&gt; propertyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEntries(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntries (propertyNames As IEnumerable(Of String), propertyValues As IEnumerable(Of Object)) As IEnumerable(Of EntityEntry(Of TEntity))" />
      <MemberSignature Language="F#" Value="abstract member GetEntries : seq&lt;string&gt; * seq&lt;obj&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;&#xA;override this.GetEntries : seq&lt;string&gt; * seq&lt;obj&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;" Usage="localView.GetEntries (propertyNames, propertyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">The name of the properties to match.</param>
        <param name="propertyValues">The values of the properties to match.</param>
        <summary>
                Returns an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for each entity being tracked by the context where the values of the given properties
                matches the given values. The entries provide access to change tracking information and operations for each entity.
            </summary>
        <returns>An entry for each entity being tracked.</returns>
        <remarks>
          <para>
                    This method is frequently used to get the entities with a given non-null foreign key, primary key, or alternate key values.
                    Lookups using a key property like this are more efficient than lookups on other property values.
                </para>
          <para>
                    By default, accessing <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> will call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to
                    ensure that all entities searched and returned are up-to-date. Calling this method will not result in another call to
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />. Since this method is commonly used for fast lookups, consider reusing
                    the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> object for multiple lookups and/or disabling automatic detecting of changes using
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    Note that modification of entity state while iterating over the returned enumeration may result in
                    an <see cref="T:System.InvalidOperationException" /> indicating that the collection was modified while enumerating.
                    To avoid this, create a defensive copy using <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" /> or similar before iterating.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntries&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt; GetEntries&lt;TProperty&gt; (Microsoft.EntityFrameworkCore.Metadata.IProperty property, TProperty? propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt;&gt; GetEntries&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, !!TProperty propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEntries``1(Microsoft.EntityFrameworkCore.Metadata.IProperty,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntries(Of TProperty) (property As IProperty, propertyValue As TProperty) As IEnumerable(Of EntityEntry(Of TEntity))" />
      <MemberSignature Language="F#" Value="abstract member GetEntries : Microsoft.EntityFrameworkCore.Metadata.IProperty * 'Property -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;&#xA;override this.GetEntries : Microsoft.EntityFrameworkCore.Metadata.IProperty * 'Property -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;" Usage="localView.GetEntries (property, propertyValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyValue" Type="TProperty" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property value.</typeparam>
        <param name="property">The property to match.</param>
        <param name="propertyValue">The value of the property to match.</param>
        <summary>
                Returns an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for each entity being tracked by the context where the value of the given
                property matches the given value. The entries provide access to change tracking information and operations for each entity.
            </summary>
        <returns>An entry for each entity being tracked.</returns>
        <remarks>
          <para>
                    This method is frequently used to get the entities with a given non-null foreign key, primary key, or alternate key values.
                    Lookups using a key property like this are more efficient than lookups on other property values.
                </para>
          <para>
                    By default, accessing <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> will call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to
                    ensure that all entities searched and returned are up-to-date. Calling this method will not result in another call to
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />. Since this method is commonly used for fast lookups, consider reusing
                    the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> object for multiple lookups and/or disabling automatic detecting of changes using
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    Note that modification of entity state while iterating over the returned enumeration may result in
                    an <see cref="T:System.InvalidOperationException" /> indicating that the collection was modified while enumerating.
                    To avoid this, create a defensive copy using <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" /> or similar before iterating.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntries&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt; GetEntries&lt;TProperty&gt; (string propertyName, TProperty? propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt;&gt; GetEntries&lt;TProperty&gt;(string propertyName, !!TProperty propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEntries``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntries(Of TProperty) (propertyName As String, propertyValue As TProperty) As IEnumerable(Of EntityEntry(Of TEntity))" />
      <MemberSignature Language="F#" Value="abstract member GetEntries : string * 'Property -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;&#xA;override this.GetEntries : string * 'Property -&gt; seq&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;" Usage="localView.GetEntries (propertyName, propertyValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyValue" Type="TProperty" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property value.</typeparam>
        <param name="propertyName">The name of the property to match.</param>
        <param name="propertyValue">The value of the property to match.</param>
        <summary>
                Returns an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for each entity being tracked by the context where the value of the given
                property matches the given value. The entries provide access to change tracking information and operations for each entity.
            </summary>
        <returns>An entry for each entity being tracked.</returns>
        <remarks>
          <para>
                    This method is frequently used to get the entities with a given non-null foreign key, primary key, or alternate key values.
                    Lookups using a key property like this are more efficient than lookups on other property values.
                </para>
          <para>
                    By default, accessing <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> will call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to
                    ensure that all entities searched and returned are up-to-date. Calling this method will not result in another call to
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" />. Since this method is commonly used for fast lookups, consider reusing
                    the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> object for multiple lookups and/or disabling automatic detecting of changes using
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
          <para>
                    Note that modification of entity state while iterating over the returned enumeration may result in
                    an <see cref="T:System.InvalidOperationException" /> indicating that the collection was modified while enumerating.
                    To avoid this, create a defensive copy using <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" /> or similar before iterating.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="localView.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> for all tracked entities of type TEntity
                that are not marked as deleted.
            </summary>
        <returns>An enumerator for the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.LocalView&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                False, since the collection is not read-only.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCollectionChanged (System.Collections.Specialized.NotifyCollectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCollectionChanged(class System.Collections.Specialized.NotifyCollectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCollectionChanged (e As NotifyCollectionChangedEventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnCollectionChanged : System.Collections.Specialized.NotifyCollectionChangedEventArgs -&gt; unit&#xA;override this.OnCollectionChanged : System.Collections.Specialized.NotifyCollectionChangedEventArgs -&gt; unit" Usage="localView.OnCollectionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Details of the change.</param>
        <summary>
                Raises the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CollectionChanged" /> event.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As PropertyChangedEventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="localView.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Details of the property that changed.</param>
        <summary>
                Raises the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanged" /> event.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (e As PropertyChangingEventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : System.ComponentModel.PropertyChangingEventArgs -&gt; unit&#xA;override this.OnPropertyChanging : System.ComponentModel.PropertyChangingEventArgs -&gt; unit" Usage="localView.OnPropertyChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Details of the property that is changing.</param>
        <summary>
                Raises the <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanging" /> event.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="public virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanged" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Event PropertyChanged As PropertyChangedEventHandler " FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " Usage="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " />
      <MemberSignature Language="C#" Value="public virtual event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="C#" Value="public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Event PropertyChanged As PropertyChangedEventHandler " FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Occurs when a property of this collection (such as <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count" />) changes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanging">
      <MemberSignature Language="C#" Value="public virtual event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangingEventHandler PropertyChanging" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanging" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Event PropertyChanging As PropertyChangingEventHandler " FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.PropertyChanging : System.ComponentModel.PropertyChangingEventHandler " Usage="member this.PropertyChanging : System.ComponentModel.PropertyChangingEventHandler " />
      <MemberSignature Language="C#" Value="public virtual event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="C#" Value="public event System.ComponentModel.PropertyChangingEventHandler? PropertyChanging;" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Event PropertyChanging As PropertyChangingEventHandler " FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Occurs when a property of this collection (such as <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count" />) is changing.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual bool Remove (TEntity item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TEntity item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Remove (item As TEntity) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Entity -&gt; bool&#xA;override this.Remove : 'Entity -&gt; bool" Usage="localView.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="item">The entity to delete.</param>
        <summary>
                Marks the given entity as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />.
            </summary>
        <returns>
          <see langword="true" /> if the entity was being tracked and was not already Deleted.</returns>
        <remarks>
          <para>
                    Entities that are currently marked as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> will be marked
                    as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Detached" /> since the Added state indicates that the entity
                    has not been saved to the database and hence it does not make sense to attempt to
                    delete it from the database.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="localView.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Resets this view, clearing any <see cref="T:System.ComponentModel.IBindingList" /> created with <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList" /> and
                any <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> created with <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection" />, and clearing any
                events registered on <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanged" />, <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanging" />, or <see cref="E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CollectionChanged" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="localView.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> for all tracked entities of type TEntity
                that are not marked as deleted.
            </summary>
        <returns>An enumerator for the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="F#" Value="member this.System.ComponentModel.IListSource.ContainsListCollection : bool" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether the collection is a collection of System.Collections.IList objects.
                Always returns <see langword="false" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList&#xA;override this.System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList" Usage="localView.System.ComponentModel.IListSource.GetList " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This method is called by data binding frameworks when attempting to data bind
                directly to a <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1" />.
            </summary>
        <returns>Never returns, always throws an exception.</returns>
        <remarks>
                This implementation always throws an exception as <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1" />
                does not maintain an ordered list with indexes. Instead call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection" />
                for WPF binding, or <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList" /> for WinForms.
            </remarks>
        <exception cref="T:System.NotSupportedException">Always thrown.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToBindingList">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.BindingList&lt;TEntity&gt; ToBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.BindingList`1&lt;!TEntity&gt; ToBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToBindingList () As BindingList(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member ToBindingList : unit -&gt; System.ComponentModel.BindingList&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.ToBindingList : unit -&gt; System.ComponentModel.BindingList&lt;'Entity (requires 'Entity : null)&gt;" Usage="localView.ToBindingList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("BindingList raises ListChanged events with PropertyDescriptors. PropertyDescriptors require unreferenced code.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("BindingList raises ListChanged events with PropertyDescriptors. PropertyDescriptors require unreferenced code.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.BindingList&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a <see cref="T:System.ComponentModel.BindingList`1" /> implementation that stays in sync with this collection.
                Use this for WinForms data binding.
            </summary>
        <returns>The binding list.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToObservableCollection">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ObservableCollection&lt;TEntity&gt; ToObservableCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ObservableCollection`1&lt;!TEntity&gt; ToObservableCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToObservableCollection () As ObservableCollection(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member ToObservableCollection : unit -&gt; System.Collections.ObjectModel.ObservableCollection&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.ToObservableCollection : unit -&gt; System.Collections.ObjectModel.ObservableCollection&lt;'Entity (requires 'Entity : null)&gt;" Usage="localView.ToObservableCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ObservableCollection&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> implementation that stays in sync with this collection.
                Use this for WPF data binding.
            </summary>
        <returns>The collection.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                examples.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
