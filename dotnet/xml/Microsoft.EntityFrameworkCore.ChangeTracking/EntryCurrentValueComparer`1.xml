<Type Name="EntryCurrentValueComparer&lt;TProperty&gt;" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.EntryCurrentValueComparer&lt;TProperty&gt;">
  <TypeSignature Language="C#" Value="public sealed class EntryCurrentValueComparer&lt;TProperty&gt; : System.Collections.Generic.IComparer&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;, System.Collections.Generic.IEqualityComparer&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EntryCurrentValueComparer`1&lt;TProperty&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntryCurrentValueComparer`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntryCurrentValueComparer(Of TProperty)&#xA;Implements IComparer(Of IUpdateEntry), IEqualityComparer(Of IUpdateEntry)" />
  <TypeSignature Language="F#" Value="type EntryCurrentValueComparer&lt;'Property&gt; = class&#xA;    interface IComparer&lt;IUpdateEntry&gt;&#xA;    interface IEqualityComparer&lt;IUpdateEntry&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TProperty" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TProperty">The type of the property.</typeparam>
    <summary>
      <para>
                    An implementation of <see cref="T:System.Collections.Generic.IComparer`1" /> and <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare current values
                    contained in <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" /> internal tracking entities.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-value-comparers">EF Core value comparers</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntryCurrentValueComparer (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntryCurrentValueComparer`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As IPropertyBase)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.EntryCurrentValueComparer&lt;'Property&gt; : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntryCurrentValueComparer&lt;'Property&gt;" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.EntryCurrentValueComparer&lt;'Property&gt; property" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Parameters>
      <Docs>
        <param name="property">The property to use for comparisons.</param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryCurrentValueComparer" /> instance using a the default comparer for the property type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (Microsoft.EntityFrameworkCore.Update.IUpdateEntry x, Microsoft.EntityFrameworkCore.Update.IUpdateEntry y);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry x, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntryCurrentValueComparer`1.Compare(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As IUpdateEntry, y As IUpdateEntry) As Integer" />
      <MemberSignature Language="F#" Value="abstract member Compare : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; int&#xA;override this.Compare : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; int" Usage="entryCurrentValueComparer.Compare (x, y)" />
      <MemberSignature Language="C#" Value="public int Compare (Microsoft.EntityFrameworkCore.Update.IUpdateEntry? x, Microsoft.EntityFrameworkCore.Update.IUpdateEntry? y);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="y" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
      </Parameters>
      <Docs>
        <param name="x">The first object to compare.</param>
        <param name="y">The second object to compare.</param>
        <summary>
                Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
        <returns>A negative number if 'x' is less than 'y'; a positive number if 'x' is greater than 'y'; zero otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.EntityFrameworkCore.Update.IUpdateEntry x, Microsoft.EntityFrameworkCore.Update.IUpdateEntry y);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry x, class Microsoft.EntityFrameworkCore.Update.IUpdateEntry y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntryCurrentValueComparer`1.Equals(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As IUpdateEntry, y As IUpdateEntry) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; bool" Usage="entryCurrentValueComparer.Equals (x, y)" />
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.EntityFrameworkCore.Update.IUpdateEntry? x, Microsoft.EntityFrameworkCore.Update.IUpdateEntry? y);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="y" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
      </Parameters>
      <Docs>
        <param name="x">The first object to compare.</param>
        <param name="y">The second object to compare.</param>
        <summary>
                Determines whether the specified objects are equal.
            </summary>
        <returns>
          <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (Microsoft.EntityFrameworkCore.Update.IUpdateEntry obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.EntryCurrentValueComparer`1.GetHashCode(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As IUpdateEntry) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; int" Usage="entryCurrentValueComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
      </Parameters>
      <Docs>
        <param name="obj">The for which a hash code is to be returned.</param>
        <summary>
                Returns a hash code for the specified object.
            </summary>
        <returns>A hash code for the specified object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
