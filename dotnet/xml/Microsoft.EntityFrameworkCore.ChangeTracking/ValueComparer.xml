<Type Name="ValueComparer" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer">
  <TypeSignature Language="C#" Value="public abstract class ValueComparer : System.Collections.IEqualityComparer" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValueComparer extends System.Object implements class System.Collections.IEqualityComparer" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueComparer&#xA;Implements IEqualityComparer" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="F#" Value="type ValueComparer = class&#xA;    interface IEqualityComparer" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="C#" Value="public abstract class ValueComparer : System.Collections.Generic.IEqualityComparer&lt;object&gt;, System.Collections.IEqualityComparer" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValueComparer extends System.Object implements class System.Collections.Generic.IEqualityComparer`1&lt;object&gt;, class System.Collections.IEqualityComparer" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueComparer&#xA;Implements IEqualityComparer, IEqualityComparer(Of Object)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type ValueComparer = class&#xA;    interface IEqualityComparer&#xA;    interface IEqualityComparer&lt;obj&gt;" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueComparer extends System.Object implements class System.Collections.Generic.IEqualityComparer`1&lt;object&gt;, class System.Collections.IEqualityComparer" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.Object&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Specifies custom value snapshotting and comparison for
                CLR types that cannot be compared with <see cref="M:System.Object.Equals(System.Object,System.Object)" />
                and/or need a deep/structural copy when taking a snapshot. For example, arrays of primitive types
                will require both if mutation is to be detected.
            </summary>
    <remarks>
      <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-value-comparers">EF Core value comparers</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueComparer (System.Linq.Expressions.LambdaExpression equalsExpression, System.Linq.Expressions.LambdaExpression hashCodeExpression, System.Linq.Expressions.LambdaExpression snapshotExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.LambdaExpression equalsExpression, class System.Linq.Expressions.LambdaExpression hashCodeExpression, class System.Linq.Expressions.LambdaExpression snapshotExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.#ctor(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (equalsExpression As LambdaExpression, hashCodeExpression As LambdaExpression, snapshotExpression As LambdaExpression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer : System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer (equalsExpression, hashCodeExpression, snapshotExpression)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="equalsExpression" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="hashCodeExpression" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="snapshotExpression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="equalsExpression">The comparison expression.</param>
        <param name="hashCodeExpression">The associated hash code generator.</param>
        <param name="snapshotExpression">The snapshot expression.</param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> with the given comparison and
                snapshotting expressions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static HashCode Add (HashCode hash, int code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.HashCode Add(valuetype System.HashCode hash, int32 code) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Add(System.HashCode,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (hash As HashCode, code As Integer) As HashCode" />
      <MemberSignature Language="F#" Value="static member Add : HashCode * int -&gt; HashCode" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Add (hash, code)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.HashCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.HashCode" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="code" Type="System.Int32" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="hash">To be added.</param>
        <param name="code">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoolIdentity">
      <MemberSignature Language="C#" Value="protected static readonly System.Linq.Expressions.Expression&lt;Func&lt;bool,bool&gt;&gt; BoolIdentity;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;bool, bool&gt;&gt; BoolIdentity" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.BoolIdentity" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly BoolIdentity As Expression(Of Func(Of Boolean, Boolean)) " />
      <MemberSignature Language="F#" Value=" staticval mutable BoolIdentity : System.Linq.Expressions.Expression&lt;Func&lt;bool, bool&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.BoolIdentity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;System.Boolean,System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefault">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer CreateDefault (Type type, bool favorStructuralComparisons);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer CreateDefault(class System.Type type, bool favorStructuralComparisons) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.CreateDefault(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDefault (type As Type, favorStructuralComparisons As Boolean) As ValueComparer" />
      <MemberSignature Language="F#" Value="static member CreateDefault : Type * bool -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.CreateDefault (type, favorStructuralComparisons)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="favorStructuralComparisons" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">The type.</param>
        <param name="favorStructuralComparisons">
                If <see langword="true" />, then EF will use <see cref="T:System.Collections.IStructuralEquatable" /> if the type
                implements it. This is usually used when byte arrays act as keys.
            </param>
        <summary>
                Creates a default <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" /> for the given type.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer CreateDefault&lt;T&gt; (bool favorStructuralComparisons);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer CreateDefault&lt;T&gt;(bool favorStructuralComparisons) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.CreateDefault``1(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDefault(Of T) (favorStructuralComparisons As Boolean) As ValueComparer" />
      <MemberSignature Language="F#" Value="static member CreateDefault : bool -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.CreateDefault favorStructuralComparisons" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="favorStructuralComparisons" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type.</typeparam>
        <param name="favorStructuralComparisons">
                If <see langword="true" />, then EF will use <see cref="T:System.Collections.IStructuralEquatable" /> if the type
                implements it. This is usually used when byte arrays act as keys.
            </param>
        <summary>
                Creates a default <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" /> for the given type.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (object left, object right);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object left, object right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (left As Object, right As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj * obj -&gt; bool" Usage="valueComparer.Equals (left, right)" />
      <MemberSignature Language="C#" Value="public abstract bool Equals (object? left, object? right);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Object" />
        <Parameter Name="right" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="left">The first instance.</param>
        <param name="right">The second instance.</param>
        <summary>
                Compares the two instances to determine if they are equal.
            </summary>
        <returns>
          <see langword="true" /> if they are equal; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.LambdaExpression EqualsExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression EqualsExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.EqualsExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EqualsExpression As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.EqualsExpression : System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.EqualsExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The comparison expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractEqualsBody">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractEqualsBody (System.Linq.Expressions.Expression leftExpression, System.Linq.Expressions.Expression rightExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractEqualsBody(class System.Linq.Expressions.Expression leftExpression, class System.Linq.Expressions.Expression rightExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ExtractEqualsBody(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtractEqualsBody (leftExpression As Expression, rightExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ExtractEqualsBody : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractEqualsBody : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="valueComparer.ExtractEqualsBody (leftExpression, rightExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftExpression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="rightExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="leftExpression">The new left expression.</param>
        <param name="rightExpression">The new right expression.</param>
        <summary>
                Takes <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.EqualsExpression" /> and replaces the two parameters with the given expressions,
                returning the transformed body.
            </summary>
        <returns>The body of the lambda with left and right parameters replaced.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractHashCodeBody">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractHashCodeBody (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractHashCodeBody(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ExtractHashCodeBody(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtractHashCodeBody (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ExtractHashCodeBody : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractHashCodeBody : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="valueComparer.ExtractHashCodeBody expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">The new expression.</param>
        <summary>
                Takes the <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.HashCodeExpression" /> and replaces the parameter with the given expression,
                returning the transformed body.
            </summary>
        <returns>The body of the lambda with the parameter replaced.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractSnapshotBody">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractSnapshotBody (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractSnapshotBody(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ExtractSnapshotBody(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtractSnapshotBody (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ExtractSnapshotBody : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractSnapshotBody : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="valueComparer.ExtractSnapshotBody expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">The new expression.</param>
        <summary>
                Takes the <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.SnapshotExpression" /> and replaces the parameter with the given expression,
                returning the transformed body.
            </summary>
        <returns>The body of the lambda with the parameter replaced.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (object instance);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (instance As Object) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : obj -&gt; int" Usage="valueComparer.GetHashCode instance" />
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (object? instance);" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">The instance.</param>
        <summary>
                Returns the hash code for the given instance.
            </summary>
        <returns>The hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashCodeAddMethod">
      <MemberSignature Language="C#" Value="protected static readonly System.Reflection.MethodInfo HashCodeAddMethod;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly class System.Reflection.MethodInfo HashCodeAddMethod" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.HashCodeAddMethod" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly HashCodeAddMethod As MethodInfo " />
      <MemberSignature Language="F#" Value=" staticval mutable HashCodeAddMethod : System.Reflection.MethodInfo" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.HashCodeAddMethod" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashCodeExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.LambdaExpression HashCodeExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression HashCodeExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.HashCodeExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HashCodeExpression As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.HashCodeExpression : System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.HashCodeExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The hash code expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="public abstract object Snapshot (object instance);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Snapshot(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Snapshot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Snapshot (instance As Object) As Object" />
      <MemberSignature Language="F#" Value="abstract member Snapshot : obj -&gt; obj" Usage="valueComparer.Snapshot instance" />
      <MemberSignature Language="C#" Value="public abstract object? Snapshot (object? instance);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">The instance.</param>
        <summary>
                Creates a snapshot of the given instance.
            </summary>
        <returns>The snapshot.</returns>
        <remarks>
                Snapshotting is the process of creating a copy of the value into a snapshot so it can
                later be compared to determine if it has changed. For some types, such as collections,
                this needs to be a deep copy of the collection rather than just a shallow copy of the
                reference.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapshotExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.LambdaExpression SnapshotExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression SnapshotExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.SnapshotExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SnapshotExpression As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.SnapshotExpression : System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.SnapshotExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The snapshot expression.
            </summary>
        <value>To be added.</value>
        <remarks>
                Snapshotting is the process of creating a copy of the value into a snapshot so it can
                later be compared to determine if it has changed. For some types, such as collections,
                this needs to be a deep copy of the collection rather than just a shallow copy of the
                reference.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHashCodeMethod">
      <MemberSignature Language="C#" Value="protected static readonly System.Reflection.MethodInfo ToHashCodeMethod;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly class System.Reflection.MethodInfo ToHashCodeMethod" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ToHashCodeMethod" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly ToHashCodeMethod As MethodInfo " />
      <MemberSignature Language="F#" Value=" staticval mutable ToHashCodeMethod : System.Reflection.MethodInfo" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.ToHashCodeMethod" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
