<Type Name="IDependentKeyValueFactory&lt;TKey&gt;" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory&lt;TKey&gt;">
  <TypeSignature Language="C#" Value="public interface IDependentKeyValueFactory&lt;TKey&gt;" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDependentKeyValueFactory`1&lt;TKey&gt;" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDependentKeyValueFactory(Of TKey)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="F#" Value="type IDependentKeyValueFactory&lt;'Key&gt; = interface" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="C#" Value="public interface IDependentKeyValueFactory&lt;TKey&gt; : Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory" FrameworkAlternate="efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDependentKeyValueFactory`1&lt;TKey&gt; implements class Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory" FrameworkAlternate="efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDependentKeyValueFactory(Of TKey)&#xA;Implements IDependentKeyValueFactory" FrameworkAlternate="efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type IDependentKeyValueFactory&lt;'Key&gt; = interface&#xA;    interface IDependentKeyValueFactory" FrameworkAlternate="efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IDependentKeyValueFactory`1&lt;TKey&gt; implements class Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
  </TypeParameters>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">The generic type of the key.</typeparam>
    <summary>
      <para>
                    A factory for key values based on the foreign key values taken from various forms of entity data.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="EqualityComparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; EqualityComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; EqualityComparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1.EqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EqualityComparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="F#" Value="member this.EqualityComparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory&lt;'Key&gt;.EqualityComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use for comparing key instances.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromBuffer">
      <MemberSignature Language="C#" Value="public bool TryCreateFromBuffer (in Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer, out TKey key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromBuffer([in]valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer, [out] !TKey&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1.TryCreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@|System.Runtime.InteropServices.InAttribute,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCreateFromBuffer (valueBuffer As ValueBuffer, ByRef key As TKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromBuffer : ValueBuffer * 'Key -&gt; bool" Usage="iDependentKeyValueFactory.TryCreateFromBuffer (valueBuffer, key)" />
      <MemberSignature Language="C#" Value="public bool TryCreateFromBuffer (in Microsoft.EntityFrameworkCore.Storage.ValueBuffer? valueBuffer, out TKey? key);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueBuffer" Type="Microsoft.EntityFrameworkCore.Storage.ValueBuffer">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="key" Type="TKey" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="valueBuffer">The value buffer representing the entity instance.</param>
        <param name="key">The key instance.</param>
        <summary>
                Attempts to create a key instance using foreign key values from the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" />.
            </summary>
        <returns>
          <see langword="true" /> if the key instance was created; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromCurrentValues">
      <MemberSignature Language="C#" Value="public bool TryCreateFromCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out TKey key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromCurrentValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] !TKey&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1.TryCreateFromCurrentValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCreateFromCurrentValues (entry As IUpdateEntry, ByRef key As TKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * 'Key -&gt; bool" Usage="iDependentKeyValueFactory.TryCreateFromCurrentValues (entry, key)" />
      <MemberSignature Language="C#" Value="public bool TryCreateFromCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out TKey? key);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="key" Type="TKey" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">The entry tracking an entity instance.</param>
        <param name="key">The key instance.</param>
        <summary>
                Attempts to create a key instance using foreign key values from the given <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />.
            </summary>
        <returns>
          <see langword="true" /> if the key instance was created; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromOriginalValues">
      <MemberSignature Language="C#" Value="public bool TryCreateFromOriginalValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out TKey key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromOriginalValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] !TKey&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1.TryCreateFromOriginalValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCreateFromOriginalValues (entry As IUpdateEntry, ByRef key As TKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromOriginalValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * 'Key -&gt; bool" Usage="iDependentKeyValueFactory.TryCreateFromOriginalValues (entry, key)" />
      <MemberSignature Language="C#" Value="public bool TryCreateFromOriginalValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out TKey? key);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="key" Type="TKey" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">The entry tracking an entity instance.</param>
        <param name="key">The key instance.</param>
        <summary>
                Attempts to create a key instance using original foreign key values from the given <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />.
            </summary>
        <returns>
          <see langword="true" /> if the key instance was created; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromPreStoreGeneratedCurrentValues">
      <MemberSignature Language="C#" Value="public bool TryCreateFromPreStoreGeneratedCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out TKey key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromPreStoreGeneratedCurrentValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] !TKey&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1.TryCreateFromPreStoreGeneratedCurrentValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCreateFromPreStoreGeneratedCurrentValues (entry As IUpdateEntry, ByRef key As TKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromPreStoreGeneratedCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * 'Key -&gt; bool" Usage="iDependentKeyValueFactory.TryCreateFromPreStoreGeneratedCurrentValues (entry, key)" />
      <MemberSignature Language="C#" Value="public bool TryCreateFromPreStoreGeneratedCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out TKey? key);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="key" Type="TKey" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">The entry tracking an entity instance.</param>
        <param name="key">The key instance.</param>
        <summary>
                Attempts to create a key instance from the given <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
                using foreign key values that were set before any store-generated values were propagated.
            </summary>
        <returns>
          <see langword="true" /> if the key instance was created; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromRelationshipSnapshot">
      <MemberSignature Language="C#" Value="public bool TryCreateFromRelationshipSnapshot (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out TKey key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromRelationshipSnapshot(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] !TKey&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1.TryCreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCreateFromRelationshipSnapshot (entry As IUpdateEntry, ByRef key As TKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * 'Key -&gt; bool" Usage="iDependentKeyValueFactory.TryCreateFromRelationshipSnapshot (entry, key)" />
      <MemberSignature Language="C#" Value="public bool TryCreateFromRelationshipSnapshot (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out TKey? key);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="key" Type="TKey" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">The entry tracking an entity instance.</param>
        <param name="key">The key instance.</param>
        <summary>
                Attempts to create a key instance from the given <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
                using foreign key values from the previously known relationship.
            </summary>
        <returns>
          <see langword="true" /> if the key instance was created; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
