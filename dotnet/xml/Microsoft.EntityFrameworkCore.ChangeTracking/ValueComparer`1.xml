<Type Name="ValueComparer&lt;T&gt;" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class ValueComparer&lt;T&gt; : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer, System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ValueComparer`1&lt;T&gt; extends Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer implements class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ValueComparer(Of T)&#xA;Inherits ValueComparer&#xA;Implements IEqualityComparer(Of T)" />
  <TypeSignature Language="F#" Value="type ValueComparer&lt;'T&gt; = class&#xA;    inherit ValueComparer&#xA;    interface IEqualityComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">The type.</typeparam>
    <summary>
                Specifies custom value snapshotting and comparison for
                CLR types that cannot be compared with <see cref="M:System.Object.Equals(System.Object,System.Object)" />
                and/or need a deep copy when taking a snapshot. For example, arrays of primitive types
                will require both if mutation is to be detected.
            </summary>
    <remarks>
      <para>
                    Snapshotting is the process of creating a copy of the value into a snapshot so it can
                    later be compared to determine if it has changed. For some types, such as collections,
                    this needs to be a deep copy of the collection rather than just a shallow copy of the
                    reference.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-value-comparers">EF Core value comparers</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueComparer (bool favorStructuralComparisons);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool favorStructuralComparisons) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (favorStructuralComparisons As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt; : bool -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt;" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt; favorStructuralComparisons" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="favorStructuralComparisons" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="favorStructuralComparisons">
                If <see langword="true" />, then EF will use <see cref="T:System.Collections.IStructuralEquatable" /> if the type
                implements it. This is usually used when byte arrays act as keys.
            </param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" /> with a default comparison
                expression and a shallow copy for the snapshot.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueComparer (System.Linq.Expressions.Expression&lt;Func&lt;T,T,bool&gt;&gt; equalsExpression, System.Linq.Expressions.Expression&lt;Func&lt;T,int&gt;&gt; hashCodeExpression);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!T, !T, bool&gt;&gt; equalsExpression, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, int32&gt;&gt; hashCodeExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (equalsExpression As Expression(Of Func(Of T, T, Boolean)), hashCodeExpression As Expression(Of Func(Of T, Integer)))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt; : System.Linq.Expressions.Expression&lt;Func&lt;'T, 'T, bool&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'T, int&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt;" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt; (equalsExpression, hashCodeExpression)" />
      <MemberSignature Language="C#" Value="public ValueComparer (System.Linq.Expressions.Expression&lt;Func&lt;T?,T?,bool&gt;&gt; equalsExpression, System.Linq.Expressions.Expression&lt;Func&lt;T,int&gt;&gt; hashCodeExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="equalsExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,T,System.Boolean&gt;&gt;" />
        <Parameter Name="hashCodeExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="equalsExpression">The comparison expression.</param>
        <param name="hashCodeExpression">The associated hash code generator.</param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" /> with the given comparison expression.
                A shallow copy will be used for the snapshot.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValueComparer (System.Linq.Expressions.Expression&lt;Func&lt;T,T,bool&gt;&gt; equalsExpression, System.Linq.Expressions.Expression&lt;Func&lt;T,int&gt;&gt; hashCodeExpression, System.Linq.Expressions.Expression&lt;Func&lt;T,T&gt;&gt; snapshotExpression);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!T, !T, bool&gt;&gt; equalsExpression, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, int32&gt;&gt; hashCodeExpression, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, !T&gt;&gt; snapshotExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Linq.Expressions.Expression{System.Func{`0,`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (equalsExpression As Expression(Of Func(Of T, T, Boolean)), hashCodeExpression As Expression(Of Func(Of T, Integer)), snapshotExpression As Expression(Of Func(Of T, T)))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt; : System.Linq.Expressions.Expression&lt;Func&lt;'T, 'T, bool&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'T, int&gt;&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'T, 'T&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt;" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt; (equalsExpression, hashCodeExpression, snapshotExpression)" />
      <MemberSignature Language="C#" Value="public ValueComparer (System.Linq.Expressions.Expression&lt;Func&lt;T?,T?,bool&gt;&gt; equalsExpression, System.Linq.Expressions.Expression&lt;Func&lt;T,int&gt;&gt; hashCodeExpression, System.Linq.Expressions.Expression&lt;Func&lt;T,T&gt;&gt; snapshotExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="equalsExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,T,System.Boolean&gt;&gt;" />
        <Parameter Name="hashCodeExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Int32&gt;&gt;" />
        <Parameter Name="snapshotExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="equalsExpression">The comparison expression.</param>
        <param name="hashCodeExpression">The associated hash code generator.</param>
        <param name="snapshotExpression">The snapshot expression.</param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1" /> with the given comparison and
                snapshotting expressions.
            </summary>
        <remarks>
                Snapshotting is the process of creating a copy of the value into a snapshot so it can
                later be compared to determine if it has changed. For some types, such as collections,
                this needs to be a deep copy of the collection rather than just a shallow copy of the
                reference.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultEqualsExpression">
      <MemberSignature Language="C#" Value="protected static System.Linq.Expressions.Expression&lt;Func&lt;T,T,bool&gt;&gt; CreateDefaultEqualsExpression ();" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!T, !T, bool&gt;&gt; CreateDefaultEqualsExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.CreateDefaultEqualsExpression" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateDefaultEqualsExpression () As Expression(Of Func(Of T, T, Boolean))" />
      <MemberSignature Language="F#" Value="static member CreateDefaultEqualsExpression : unit -&gt; System.Linq.Expressions.Expression&lt;Func&lt;'T, 'T, bool&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt;.CreateDefaultEqualsExpression " />
      <MemberSignature Language="C#" Value="protected static System.Linq.Expressions.Expression&lt;Func&lt;T?,T?,bool&gt;&gt; CreateDefaultEqualsExpression ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;T,T,System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates an expression for equality.
            </summary>
        <returns>The equality expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultHashCodeExpression">
      <MemberSignature Language="C#" Value="protected static System.Linq.Expressions.Expression&lt;Func&lt;T,int&gt;&gt; CreateDefaultHashCodeExpression (bool favorStructuralComparisons);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, int32&gt;&gt; CreateDefaultHashCodeExpression(bool favorStructuralComparisons) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.CreateDefaultHashCodeExpression(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateDefaultHashCodeExpression (favorStructuralComparisons As Boolean) As Expression(Of Func(Of T, Integer))" />
      <MemberSignature Language="F#" Value="static member CreateDefaultHashCodeExpression : bool -&gt; System.Linq.Expressions.Expression&lt;Func&lt;'T, int&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt;.CreateDefaultHashCodeExpression favorStructuralComparisons" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="favorStructuralComparisons" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="favorStructuralComparisons">
                If <see langword="true" />, then <see cref="T:System.Collections.IStructuralEquatable" /> is used if the type implements it.
            </param>
        <summary>
                Creates an expression for generating a hash code.
            </summary>
        <returns>The hash code expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultSnapshotExpression">
      <MemberSignature Language="C#" Value="protected static System.Linq.Expressions.Expression&lt;Func&lt;T,T&gt;&gt; CreateDefaultSnapshotExpression (bool favorStructuralComparisons);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, !T&gt;&gt; CreateDefaultSnapshotExpression(bool favorStructuralComparisons) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.CreateDefaultSnapshotExpression(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateDefaultSnapshotExpression (favorStructuralComparisons As Boolean) As Expression(Of Func(Of T, T))" />
      <MemberSignature Language="F#" Value="static member CreateDefaultSnapshotExpression : bool -&gt; System.Linq.Expressions.Expression&lt;Func&lt;'T, 'T&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt;.CreateDefaultSnapshotExpression favorStructuralComparisons" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;T,T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="favorStructuralComparisons" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="favorStructuralComparisons">To be added.</param>
        <summary>
                Creates an expression for creating a snapshot of a value.
            </summary>
        <returns>The snapshot expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object left, object right);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object left, object right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (left As Object, right As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj * obj -&gt; bool" Usage="valueComparer.Equals (left, right)" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? left, object? right);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Object" />
        <Parameter Name="right" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="left">The first instance.</param>
        <param name="right">The second instance.</param>
        <summary>
                Compares the two instances to determine if they are equal.
            </summary>
        <returns>
          <see langword="true" /> if they are equal; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (T left, T right);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T left, !T right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.Equals(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (left As T, right As T) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : 'T * 'T -&gt; bool" Usage="valueComparer.Equals (left, right)" />
      <MemberSignature Language="C#" Value="public virtual bool Equals (T? left, T? right);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="T" />
        <Parameter Name="right" Type="T" />
      </Parameters>
      <Docs>
        <param name="left">The first instance.</param>
        <param name="right">The second instance.</param>
        <summary>
                Compares the two instances to determine if they are equal.
            </summary>
        <returns>
          <see langword="true" /> if they are equal; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression&lt;Func&lt;T,T,bool&gt;&gt; EqualsExpression { get; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!T, !T, bool&gt;&gt; EqualsExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.EqualsExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EqualsExpression As Expression(Of Func(Of T, T, Boolean))" />
      <MemberSignature Language="F#" Value="member this.EqualsExpression : System.Linq.Expressions.Expression&lt;Func&lt;'T, 'T, bool&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt;.EqualsExpression" />
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression&lt;Func&lt;T?,T?,bool&gt;&gt; EqualsExpression { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;T,T,System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The comparison expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode (object instance);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode (instance As Object) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : obj -&gt; int" Usage="valueComparer.GetHashCode instance" />
      <MemberSignature Language="C#" Value="public override int GetHashCode (object? instance);" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">The instance.</param>
        <summary>
                Returns the hash code for the given instance.
            </summary>
        <returns>The hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (T instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(!T instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.GetHashCode(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (instance As T) As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : 'T -&gt; int" Usage="valueComparer.GetHashCode instance" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="T" />
      </Parameters>
      <Docs>
        <param name="instance">The instance.</param>
        <summary>
                Returns the hash code for the given instance.
            </summary>
        <returns>The hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashCodeExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression&lt;Func&lt;T,int&gt;&gt; HashCodeExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, int32&gt;&gt; HashCodeExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.HashCodeExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HashCodeExpression As Expression(Of Func(Of T, Integer))" />
      <MemberSignature Language="F#" Value="member this.HashCodeExpression : System.Linq.Expressions.Expression&lt;Func&lt;'T, int&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt;.HashCodeExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The hash code expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="public override object Snapshot (object instance);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Snapshot(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.Snapshot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Snapshot (instance As Object) As Object" />
      <MemberSignature Language="F#" Value="override this.Snapshot : obj -&gt; obj" Usage="valueComparer.Snapshot instance" />
      <MemberSignature Language="C#" Value="public override object? Snapshot (object? instance);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">The instance.</param>
        <summary>
                Creates a snapshot of the given instance.
            </summary>
        <returns>The snapshot.</returns>
        <remarks>
                Snapshotting is the process of creating a copy of the value into a snapshot so it can
                later be compared to determine if it has changed. For some types, such as collections,
                this needs to be a deep copy of the collection rather than just a shallow copy of the
                reference.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="public virtual T Snapshot (T instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T Snapshot(!T instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.Snapshot(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Snapshot (instance As T) As T" />
      <MemberSignature Language="F#" Value="override this.Snapshot : 'T -&gt; 'T" Usage="valueComparer.Snapshot instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="T" />
      </Parameters>
      <Docs>
        <param name="instance">The instance.</param>
        <summary>
                Creates a snapshot of the given instance.
            </summary>
        <returns>The snapshot.</returns>
        <remarks>
                Snapshotting is the process of creating a copy of the value into a snapshot so it can
                later be compared to determine if it has changed. For some types, such as collections,
                this needs to be a deep copy of the collection rather than just a shallow copy of the
                reference.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapshotExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression&lt;Func&lt;T,T&gt;&gt; SnapshotExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, !T&gt;&gt; SnapshotExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.SnapshotExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SnapshotExpression As Expression(Of Func(Of T, T))" />
      <MemberSignature Language="F#" Value="member this.SnapshotExpression : System.Linq.Expressions.Expression&lt;Func&lt;'T, 'T&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt;.SnapshotExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;T,T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The snapshot expression.
            </summary>
        <value>To be added.</value>
        <remarks>
                Snapshotting is the process of creating a copy of the value into a snapshot so it can
                later be compared to determine if it has changed. For some types, such as collections,
                this needs to be a deep copy of the collection rather than just a shallow copy of the
                reference.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&lt;'T&gt;.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
