<Type Name="SqlServerAggregateOverSubqueryPostprocessor" FullName="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateOverSubqueryPostprocessor">
  <TypeSignature Language="C#" Value="public class SqlServerAggregateOverSubqueryPostprocessor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlServerAggregateOverSubqueryPostprocessor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateOverSubqueryPostprocessor" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlServerAggregateOverSubqueryPostprocessor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type SqlServerAggregateOverSubqueryPostprocessor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                SQL Server doesn't support aggregate function invocations over subqueries, or other aggregate function invocations; this
                postprocessor lifts such subqueries out to an OUTER APPLY/JOIN on the SELECT to work around this limitation.
            </summary>
    <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlServerAggregateOverSubqueryPostprocessor (Microsoft.EntityFrameworkCore.Query.SqlAliasManager sqlAliasManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.SqlAliasManager sqlAliasManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateOverSubqueryPostprocessor.#ctor(Microsoft.EntityFrameworkCore.Query.SqlAliasManager)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sqlAliasManager As SqlAliasManager)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateOverSubqueryPostprocessor : Microsoft.EntityFrameworkCore.Query.SqlAliasManager -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateOverSubqueryPostprocessor" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateOverSubqueryPostprocessor sqlAliasManager" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sqlAliasManager" Type="Microsoft.EntityFrameworkCore.Query.SqlAliasManager" />
      </Parameters>
      <Docs>
        <param name="sqlAliasManager">To be added.</param>
        <summary>
                SQL Server doesn't support aggregate function invocations over subqueries, or other aggregate function invocations; this
                postprocessor lifts such subqueries out to an OUTER APPLY/JOIN on the SELECT to work around this limitation.
            </summary>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateOverSubqueryPostprocessor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (node As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="sqlServerAggregateOverSubqueryPostprocessor.VisitExtension node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
