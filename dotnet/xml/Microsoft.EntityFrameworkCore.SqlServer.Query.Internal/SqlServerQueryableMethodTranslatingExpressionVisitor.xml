<Type Name="SqlServerQueryableMethodTranslatingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class SqlServerQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlServerQueryableMethodTranslatingExpressionVisitor extends Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlServerQueryableMethodTranslatingExpressionVisitor&#xA;Inherits RelationalQueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="F#" Value="type SqlServerQueryableMethodTranslatingExpressionVisitor = class&#xA;    inherit RelationalQueryableMethodTranslatingExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SqlServerQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor parentVisitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor parentVisitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (parentVisitor As SqlServerQueryableMethodTranslatingExpressionVisitor)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor parentVisitor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentVisitor" Type="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="parentVisitor">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlServerQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryableMethodTranslatingExpressionVisitorDependencies, relationalDependencies As RelationalQueryableMethodTranslatingExpressionVisitorDependencies, queryCompilationContext As QueryCompilationContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.QueryCompilationContext -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor (dependencies, relationalDependencies, queryCompilationContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="relationalDependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="relationalDependencies">To be added.</param>
        <param name="queryCompilationContext">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlServerQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext, Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions sqlServerSingletonOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext, class Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions sqlServerSingletonOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryableMethodTranslatingExpressionVisitorDependencies, relationalDependencies As RelationalQueryableMethodTranslatingExpressionVisitorDependencies, queryCompilationContext As QueryCompilationContext, sqlServerSingletonOptions As ISqlServerSingletonOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.QueryCompilationContext * Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor (dependencies, relationalDependencies, queryCompilationContext, sqlServerSingletonOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="relationalDependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="sqlServerSingletonOptions" Type="Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions" Index="3" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="relationalDependencies">To be added.</param>
        <param name="queryCompilationContext">To be added.</param>
        <param name="sqlServerSingletonOptions">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyInferredTypeMappings">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression ApplyInferredTypeMappings (System.Linq.Expressions.Expression expression, System.Collections.Generic.IReadOnlyDictionary&lt;(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string),Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping?&gt; inferredTypeMappings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression ApplyInferredTypeMappings(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IReadOnlyDictionary`2&lt;valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; inferredTypeMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.ApplyInferredTypeMappings(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.ValueTuple{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ApplyInferredTypeMappings (expression As Expression, inferredTypeMappings As IReadOnlyDictionary(Of ValueTuple(Of TableExpressionBase, String), RelationalTypeMapping)) As Expression" />
      <MemberSignature Language="F#" Value="override this.ApplyInferredTypeMappings : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; System.Linq.Expressions.Expression" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.ApplyInferredTypeMappings (expression, inferredTypeMappings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="inferredTypeMappings" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String&gt;,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="inferredTypeMappings">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubqueryVisitor">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateSubqueryVisitor () As QueryableMethodTranslatingExpressionVisitor" />
      <MemberSignature Language="F#" Value="override this.CreateSubqueryVisitor : unit -&gt; Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNaturallyOrdered">
      <MemberSignature Language="C#" Value="protected override bool IsNaturallyOrdered (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsNaturallyOrdered(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.IsNaturallyOrdered(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsNaturallyOrdered (selectExpression As SelectExpression) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsNaturallyOrdered : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; bool" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.IsNaturallyOrdered selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidSelectExpressionForExecuteDelete">
      <MemberSignature Language="C#" Value="protected override bool IsValidSelectExpressionForExecuteDelete (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, Microsoft.EntityFrameworkCore.Query.EntityShaperExpression entityShaperExpression, out Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression? tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValidSelectExpressionForExecuteDelete(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class Microsoft.EntityFrameworkCore.Query.EntityShaperExpression entityShaperExpression, [out] class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression&amp; tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteDelete(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.EntityShaperExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValidSelectExpressionForExecuteDelete (selectExpression As SelectExpression, entityShaperExpression As EntityShaperExpression, ByRef tableExpression As TableExpression) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsValidSelectExpressionForExecuteDelete : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.EntityShaperExpression * TableExpression -&gt; bool" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteDelete (selectExpression, entityShaperExpression, tableExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="entityShaperExpression" Type="Microsoft.EntityFrameworkCore.Query.EntityShaperExpression" Index="1" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression" RefType="out" Index="2" FrameworkAlternate="efcore-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <param name="entityShaperExpression">To be added.</param>
        <param name="tableExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidSelectExpressionForExecuteDelete">
      <MemberSignature Language="C#" Value="protected override bool IsValidSelectExpressionForExecuteDelete (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression shaper, out Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression? tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValidSelectExpressionForExecuteDelete(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression shaper, [out] class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression&amp; tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteDelete(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValidSelectExpressionForExecuteDelete (selectExpression As SelectExpression, shaper As StructuralTypeShaperExpression, ByRef tableExpression As TableExpression) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsValidSelectExpressionForExecuteDelete : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression * TableExpression -&gt; bool" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteDelete (selectExpression, shaper, tableExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="shaper" Type="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression" RefType="out" Index="2" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <param name="shaper">To be added.</param>
        <param name="tableExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidSelectExpressionForExecuteUpdate">
      <MemberSignature Language="C#" Value="protected override bool IsValidSelectExpressionForExecuteUpdate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, Microsoft.EntityFrameworkCore.Query.EntityShaperExpression entityShaperExpression, out Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression? tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValidSelectExpressionForExecuteUpdate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class Microsoft.EntityFrameworkCore.Query.EntityShaperExpression entityShaperExpression, [out] class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression&amp; tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteUpdate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.EntityShaperExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValidSelectExpressionForExecuteUpdate (selectExpression As SelectExpression, entityShaperExpression As EntityShaperExpression, ByRef tableExpression As TableExpression) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsValidSelectExpressionForExecuteUpdate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.EntityShaperExpression * TableExpression -&gt; bool" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteUpdate (selectExpression, entityShaperExpression, tableExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="entityShaperExpression" Type="Microsoft.EntityFrameworkCore.Query.EntityShaperExpression" Index="1" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression" RefType="out" Index="2" FrameworkAlternate="efcore-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <param name="entityShaperExpression">To be added.</param>
        <param name="tableExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidSelectExpressionForExecuteUpdate">
      <MemberSignature Language="C#" Value="protected override bool IsValidSelectExpressionForExecuteUpdate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase table, out Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression? tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValidSelectExpressionForExecuteUpdate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase table, [out] class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression&amp; tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteUpdate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValidSelectExpressionForExecuteUpdate (selectExpression As SelectExpression, table As TableExpressionBase, ByRef tableExpression As TableExpression) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsValidSelectExpressionForExecuteUpdate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase * TableExpression -&gt; bool" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteUpdate (selectExpression, table, tableExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="table" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression" RefType="out" Index="2" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <param name="table">To be added.</param>
        <param name="tableExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformJsonQueryToTable">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TransformJsonQueryToTable (Microsoft.EntityFrameworkCore.Query.JsonQueryExpression jsonQueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TransformJsonQueryToTable(class Microsoft.EntityFrameworkCore.Query.JsonQueryExpression jsonQueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.TransformJsonQueryToTable(Microsoft.EntityFrameworkCore.Query.JsonQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TransformJsonQueryToTable (jsonQueryExpression As JsonQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TransformJsonQueryToTable : Microsoft.EntityFrameworkCore.Query.JsonQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.TransformJsonQueryToTable jsonQueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jsonQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.JsonQueryExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="jsonQueryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateElementAtOrDefault">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateElementAtOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression index, bool returnDefault);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateElementAtOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression index, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateElementAtOrDefault (source As ShapedQueryExpression, index As Expression, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateElementAtOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault (source, index, returnDefault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="returnDefault" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="index">To be added.</param>
        <param name="returnDefault">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePrimitiveCollection">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslatePrimitiveCollection (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, Microsoft.EntityFrameworkCore.Metadata.IProperty? property, string tableAlias);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslatePrimitiveCollection(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, string tableAlias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.TranslatePrimitiveCollection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslatePrimitiveCollection (sqlExpression As SqlExpression, property As IProperty, tableAlias As String) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslatePrimitiveCollection : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Metadata.IProperty * string -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.TranslatePrimitiveCollection (sqlExpression, property, tableAlias)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="tableAlias" Type="System.String" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <param name="property">To be added.</param>
        <param name="tableAlias">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression extensionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression extensionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (extensionExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="sqlServerQueryableMethodTranslatingExpressionVisitor.VisitExtension extensionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="extensionExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
