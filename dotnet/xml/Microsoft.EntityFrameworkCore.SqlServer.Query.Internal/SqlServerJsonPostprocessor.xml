<Type Name="SqlServerJsonPostprocessor" FullName="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor">
  <TypeSignature Language="C#" Value="public class SqlServerJsonPostprocessor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlServerJsonPostprocessor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlServerJsonPostprocessor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type SqlServerJsonPostprocessor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Converts <see cref="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression" /> expressions with WITH (the default) to OPENJSON without WITH under the following
                conditions:
                * When an ordering still exists on the [key] column, i.e. when the ordering of the original JSON array needs to be preserved
                  (e.g. limit/offset).
                * When the column type in the WITH clause is a SQL Server "CLR type" - these are incompatible with WITH (e.g. hierarchy id).
            </summary>
    <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlServerJsonPostprocessor (Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeMappingSource As IRelationalTypeMappingSource, sqlExpressionFactory As ISqlExpressionFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor : Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource * Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor (typeMappingSource, sqlExpressionFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" />
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
      </Parameters>
      <Docs>
        <param name="typeMappingSource">To be added.</param>
        <param name="sqlExpressionFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Process (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Process(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor.Process(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Process (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member Process : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.Process : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="sqlServerJsonPostprocessor.Process expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression? Visit (System.Linq.Expressions.Expression? expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Visit(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor.Visit(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Visit (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.Visit : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="sqlServerJsonPostprocessor.Visit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullIfNotNull("expression")]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullIfNotNull("expression")&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
