<Type Name="SqlServerParameterBasedSqlProcessor" FullName="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor">
  <TypeSignature Language="C#" Value="public class SqlServerParameterBasedSqlProcessor : Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlServerParameterBasedSqlProcessor extends Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlServerParameterBasedSqlProcessor&#xA;Inherits RelationalParameterBasedSqlProcessor" />
  <TypeSignature Language="F#" Value="type SqlServerParameterBasedSqlProcessor = class&#xA;    inherit RelationalParameterBasedSqlProcessor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlServerParameterBasedSqlProcessor (Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As RelationalParameterBasedSqlProcessorDependencies, useRelationalNulls As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor : Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies * bool -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor (dependencies, useRelationalNulls)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies" />
        <Parameter Name="useRelationalNulls" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="useRelationalNulls">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optimize">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Optimize (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, System.Collections.Generic.IReadOnlyDictionary&lt;string,object&gt; parametersValues, out bool canCache);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Optimize(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; parametersValues, [out] bool&amp; canCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor.Optimize(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Optimize (selectExpression As SelectExpression, parametersValues As IReadOnlyDictionary(Of String, Object), ByRef canCache As Boolean) As SelectExpression" />
      <MemberSignature Language="F#" Value="override this.Optimize : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="sqlServerParameterBasedSqlProcessor.Optimize (selectExpression, parametersValues, canCache)" />
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Optimize (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, System.Collections.Generic.IReadOnlyDictionary&lt;string,object?&gt; parametersValues, out bool canCache);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="parametersValues" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="canCache" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <param name="parametersValues">To be added.</param>
        <param name="canCache">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optimize">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Optimize (System.Linq.Expressions.Expression queryExpression, System.Collections.Generic.IReadOnlyDictionary&lt;string,object?&gt; parametersValues, out bool canCache);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Optimize(class System.Linq.Expressions.Expression queryExpression, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; parametersValues, [out] bool&amp; canCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor.Optimize(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Optimize (queryExpression As Expression, parametersValues As IReadOnlyDictionary(Of String, Object), ByRef canCache As Boolean) As Expression" />
      <MemberSignature Language="F#" Value="override this.Optimize : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; * bool -&gt; System.Linq.Expressions.Expression" Usage="sqlServerParameterBasedSqlProcessor.Optimize (queryExpression, parametersValues, canCache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="parametersValues" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="canCache" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="queryExpression">To be added.</param>
        <param name="parametersValues">To be added.</param>
        <param name="canCache">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessSqlNullability">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression ProcessSqlNullability (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, System.Collections.Generic.IReadOnlyDictionary&lt;string,object?&gt; parametersValues, out bool canCache);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression ProcessSqlNullability(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; parametersValues, [out] bool&amp; canCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor.ProcessSqlNullability(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessSqlNullability (selectExpression As SelectExpression, parametersValues As IReadOnlyDictionary(Of String, Object), ByRef canCache As Boolean) As SelectExpression" />
      <MemberSignature Language="F#" Value="override this.ProcessSqlNullability : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="sqlServerParameterBasedSqlProcessor.ProcessSqlNullability (selectExpression, parametersValues, canCache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="parametersValues" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="canCache" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <param name="parametersValues">To be added.</param>
        <param name="canCache">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessSqlNullability">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression ProcessSqlNullability (System.Linq.Expressions.Expression selectExpression, System.Collections.Generic.IReadOnlyDictionary&lt;string,object?&gt; parametersValues, out bool canCache);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression ProcessSqlNullability(class System.Linq.Expressions.Expression selectExpression, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; parametersValues, [out] bool&amp; canCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor.ProcessSqlNullability(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessSqlNullability (selectExpression As Expression, parametersValues As IReadOnlyDictionary(Of String, Object), ByRef canCache As Boolean) As Expression" />
      <MemberSignature Language="F#" Value="override this.ProcessSqlNullability : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; * bool -&gt; System.Linq.Expressions.Expression" Usage="sqlServerParameterBasedSqlProcessor.ProcessSqlNullability (selectExpression, parametersValues, canCache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="parametersValues" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="canCache" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <param name="parametersValues">To be added.</param>
        <param name="canCache">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
