<Type Name="TemporalBetweenQueryRootExpression" FullName="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression">
  <TypeSignature Language="C#" Value="public class TemporalBetweenQueryRootExpression : Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TemporalBetweenQueryRootExpression extends Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class TemporalBetweenQueryRootExpression&#xA;Inherits TemporalRangeQueryRootExpression" />
  <TypeSignature Language="F#" Value="type TemporalBetweenQueryRootExpression = class&#xA;    inherit TemporalRangeQueryRootExpression" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TemporalBetweenQueryRootExpression (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, DateTime from, DateTime to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, valuetype System.DateTime from, valuetype System.DateTime to) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (entityType As IEntityType, from As DateTime, to As DateTime)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression : Microsoft.EntityFrameworkCore.Metadata.IEntityType * DateTime * DateTime -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression (entityType, from, to)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="from" Type="System.DateTime" />
        <Parameter Name="to" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TemporalBetweenQueryRootExpression (Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider queryProvider, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, DateTime from, DateTime to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider queryProvider, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, valuetype System.DateTime from, valuetype System.DateTime to) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryProvider As IAsyncQueryProvider, entityType As IEntityType, from As DateTime, to As DateTime)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression : Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider * Microsoft.EntityFrameworkCore.Metadata.IEntityType * DateTime * DateTime -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression (queryProvider, entityType, from, to)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryProvider" Type="Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider" />
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="from" Type="System.DateTime" />
        <Parameter Name="to" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="queryProvider">To be added.</param>
        <param name="entityType">To be added.</param>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachQueryProvider">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression DetachQueryProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression DetachQueryProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.DetachQueryProvider" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DetachQueryProvider () As Expression" />
      <MemberSignature Language="F#" Value="override this.DetachQueryProvider : unit -&gt; System.Linq.Expressions.Expression" Usage="temporalBetweenQueryRootExpression.DetachQueryProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="temporalBetweenQueryRootExpression.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="temporalBetweenQueryRootExpression.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="protected override void Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Print (expressionPrinter As ExpressionPrinter)" />
      <MemberSignature Language="F#" Value="override this.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="temporalBetweenQueryRootExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateEntityType">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Query.QueryRootExpression UpdateEntityType (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.QueryRootExpression UpdateEntityType(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.UpdateEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UpdateEntityType (entityType As IEntityType) As QueryRootExpression" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="override this.UpdateEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Query.QueryRootExpression" Usage="temporalBetweenQueryRootExpression.UpdateEntityType entityType" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression UpdateEntityType (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression UpdateEntityType(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UpdateEntityType (entityType As IEntityType) As EntityQueryRootExpression" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.UpdateEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression" Usage="temporalBetweenQueryRootExpression.UpdateEntityType entityType" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-6.0">Microsoft.EntityFrameworkCore.Query.QueryRootExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
