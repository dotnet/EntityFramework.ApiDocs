<Type Name="SqlServerSqlNullabilityProcessor" FullName="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor">
  <TypeSignature Language="C#" Value="public class SqlServerSqlNullabilityProcessor : Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlServerSqlNullabilityProcessor extends Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlServerSqlNullabilityProcessor&#xA;Inherits SqlNullabilityProcessor" />
  <TypeSignature Language="F#" Value="type SqlServerSqlNullabilityProcessor = class&#xA;    inherit SqlNullabilityProcessor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlServerSqlNullabilityProcessor (Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As RelationalParameterBasedSqlProcessorDependencies, useRelationalNulls As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor : Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies * bool -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor (dependencies, useRelationalNulls)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies" />
        <Parameter Name="useRelationalNulls" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="useRelationalNulls">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase Visit (Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase tableExpressionBase);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase Visit(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase tableExpressionBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor.Visit(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Visit (tableExpressionBase As TableExpressionBase) As TableExpressionBase" />
      <MemberSignature Language="F#" Value="override this.Visit : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Usage="sqlServerSqlNullabilityProcessor.Visit tableExpressionBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpressionBase" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" />
      </Parameters>
      <Docs>
        <param name="tableExpressionBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
