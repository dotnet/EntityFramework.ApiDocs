<Type Name="SearchConditionConvertingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class SearchConditionConvertingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SearchConditionConvertingExpressionVisitor extends Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class SearchConditionConvertingExpressionVisitor&#xA;Inherits SqlExpressionVisitor" />
  <TypeSignature Language="F#" Value="type SearchConditionConvertingExpressionVisitor = class&#xA;    inherit SqlExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SearchConditionConvertingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sqlExpressionFactory As ISqlExpressionFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor sqlExpressionFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
      </Parameters>
      <Docs>
        <param name="sqlExpressionFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAtTimeZone">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitAtTimeZone (Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression atTimeZoneExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitAtTimeZone(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression atTimeZoneExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitAtTimeZone(Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitAtTimeZone (atTimeZoneExpression As AtTimeZoneExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitAtTimeZone : Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitAtTimeZone atTimeZoneExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="atTimeZoneExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="atTimeZoneExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCase">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitCase (Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression caseExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitCase(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression caseExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitCase(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCase (caseExpression As CaseExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitCase : Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitCase caseExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" />
      </Parameters>
      <Docs>
        <param name="caseExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCollate">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitCollate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression collateExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitCollate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression collateExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitCollate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCollate (collateExpression As CollateExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitCollate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitCollate collateExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collateExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="collateExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitColumn">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitColumn (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression columnExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitColumn(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression columnExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitColumn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitColumn (columnExpression As ColumnExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitColumn : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitColumn columnExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression" />
      </Parameters>
      <Docs>
        <param name="columnExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrossApply">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitCrossApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression crossApplyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitCrossApply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression crossApplyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitCrossApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCrossApply (crossApplyExpression As CrossApplyExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitCrossApply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitCrossApply crossApplyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="crossApplyExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression" />
      </Parameters>
      <Docs>
        <param name="crossApplyExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrossJoin">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitCrossJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression crossJoinExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitCrossJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression crossJoinExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCrossJoin (crossJoinExpression As CrossJoinExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitCrossJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitCrossJoin crossJoinExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="crossJoinExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression" />
      </Parameters>
      <Docs>
        <param name="crossJoinExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDelete">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitDelete (Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression deleteExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitDelete(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression deleteExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitDelete(Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitDelete (deleteExpression As DeleteExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitDelete : Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitDelete deleteExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="deleteExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDistinct">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitDistinct (Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression distinctExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitDistinct(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression distinctExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitDistinct(Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitDistinct (distinctExpression As DistinctExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitDistinct : Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitDistinct distinctExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distinctExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="distinctExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExcept">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExcept (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression exceptExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExcept(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression exceptExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitExcept(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExcept (exceptExpression As ExceptExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExcept : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitExcept exceptExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression" />
      </Parameters>
      <Docs>
        <param name="exceptExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExists">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExists (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression existsExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExists(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression existsExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitExists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExists (existsExpression As ExistsExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExists : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitExists existsExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existsExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression" />
      </Parameters>
      <Docs>
        <param name="existsExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFromSql">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitFromSql (Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression fromSqlExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitFromSql(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression fromSqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitFromSql(Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitFromSql (fromSqlExpression As FromSqlExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitFromSql : Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitFromSql fromSqlExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromSqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" />
      </Parameters>
      <Docs>
        <param name="fromSqlExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIn">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitIn (Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression inExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitIn(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression inExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitIn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitIn (inExpression As InExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitIn : Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitIn inExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" />
      </Parameters>
      <Docs>
        <param name="inExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInnerJoin">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitInnerJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression innerJoinExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitInnerJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression innerJoinExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitInnerJoin (innerJoinExpression As InnerJoinExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitInnerJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitInnerJoin innerJoinExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerJoinExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression" />
      </Parameters>
      <Docs>
        <param name="innerJoinExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIntersect">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitIntersect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression intersectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitIntersect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression intersectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitIntersect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitIntersect (intersectExpression As IntersectExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitIntersect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitIntersect intersectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intersectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression" />
      </Parameters>
      <Docs>
        <param name="intersectExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitJsonScalar">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitJsonScalar (Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression jsonScalarExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitJsonScalar(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression jsonScalarExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitJsonScalar(Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitJsonScalar (jsonScalarExpression As JsonScalarExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitJsonScalar : Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitJsonScalar jsonScalarExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jsonScalarExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="jsonScalarExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLeftJoin">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLeftJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression leftJoinExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLeftJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression leftJoinExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitLeftJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLeftJoin (leftJoinExpression As LeftJoinExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLeftJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitLeftJoin leftJoinExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftJoinExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression" />
      </Parameters>
      <Docs>
        <param name="leftJoinExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLike">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLike (Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression likeExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLike(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression likeExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitLike(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLike (likeExpression As LikeExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLike : Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitLike likeExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="likeExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression" />
      </Parameters>
      <Docs>
        <param name="likeExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOrdering">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitOrdering (Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitOrdering(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitOrdering (orderingExpression As OrderingExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitOrdering : Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitOrdering orderingExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderingExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression" />
      </Parameters>
      <Docs>
        <param name="orderingExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOuterApply">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitOuterApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression outerApplyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitOuterApply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression outerApplyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitOuterApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitOuterApply (outerApplyExpression As OuterApplyExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitOuterApply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitOuterApply outerApplyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outerApplyExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression" />
      </Parameters>
      <Docs>
        <param name="outerApplyExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitProjection">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitProjection (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression projectionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitProjection(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression projectionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitProjection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitProjection (projectionExpression As ProjectionExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitProjection : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitProjection projectionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression" />
      </Parameters>
      <Docs>
        <param name="projectionExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRowNumber">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitRowNumber (Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression rowNumberExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitRowNumber(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression rowNumberExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitRowNumber(Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitRowNumber (rowNumberExpression As RowNumberExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitRowNumber : Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitRowNumber rowNumberExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowNumberExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression" />
      </Parameters>
      <Docs>
        <param name="rowNumberExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRowValue">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitRowValue (Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression rowValueExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitRowValue(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression rowValueExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitRowValue(Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitRowValue (rowValueExpression As RowValueExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitRowValue : Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitRowValue rowValueExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowValueExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="rowValueExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitScalarSubquery">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitScalarSubquery (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression scalarSubqueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitScalarSubquery(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression scalarSubqueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitScalarSubquery(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitScalarSubquery (scalarSubqueryExpression As ScalarSubqueryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitScalarSubquery : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitScalarSubquery scalarSubqueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalarSubqueryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="scalarSubqueryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSelect">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSelect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSelect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSelect (selectExpression As SelectExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSelect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitSelect selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSqlBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlBinary (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression sqlBinaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlBinary(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression sqlBinaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlBinary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlBinary (sqlBinaryExpression As SqlBinaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlBinary : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitSqlBinary sqlBinaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlBinaryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" />
      </Parameters>
      <Docs>
        <param name="sqlBinaryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSqlConstant">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlConstant (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression sqlConstantExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlConstant(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression sqlConstantExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlConstant(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlConstant (sqlConstantExpression As SqlConstantExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlConstant : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitSqlConstant sqlConstantExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlConstantExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression" />
      </Parameters>
      <Docs>
        <param name="sqlConstantExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSqlFragment">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlFragment (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression sqlFragmentExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlFragment(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression sqlFragmentExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlFragment(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlFragment (sqlFragmentExpression As SqlFragmentExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlFragment : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitSqlFragment sqlFragmentExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlFragmentExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression" />
      </Parameters>
      <Docs>
        <param name="sqlFragmentExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSqlFunction">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlFunction (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression sqlFunctionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlFunction(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression sqlFunctionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlFunction (sqlFunctionExpression As SqlFunctionExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlFunction : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitSqlFunction sqlFunctionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlFunctionExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" />
      </Parameters>
      <Docs>
        <param name="sqlFunctionExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSqlParameter">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlParameter (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression sqlParameterExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlParameter(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression sqlParameterExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlParameter(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlParameter (sqlParameterExpression As SqlParameterExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlParameter : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitSqlParameter sqlParameterExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlParameterExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression" />
      </Parameters>
      <Docs>
        <param name="sqlParameterExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSqlUnary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlUnary (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression sqlUnaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlUnary(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression sqlUnaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlUnary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlUnary (sqlUnaryExpression As SqlUnaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlUnary : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitSqlUnary sqlUnaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlUnaryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" />
      </Parameters>
      <Docs>
        <param name="sqlUnaryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSubSelect">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSubSelect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression scalarSubqueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSubSelect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression scalarSubqueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSubSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSubSelect (scalarSubqueryExpression As ScalarSubqueryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSubSelect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitSubSelect scalarSubqueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalarSubqueryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="scalarSubqueryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTable">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitTable (Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitTable(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitTable(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitTable (tableExpression As TableExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitTable : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitTable tableExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression" />
      </Parameters>
      <Docs>
        <param name="tableExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTableValuedFunction">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitTableValuedFunction (Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression tableValuedFunctionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitTableValuedFunction(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression tableValuedFunctionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitTableValuedFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitTableValuedFunction (tableValuedFunctionExpression As TableValuedFunctionExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitTableValuedFunction : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitTableValuedFunction tableValuedFunctionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableValuedFunctionExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="tableValuedFunctionExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUnion">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitUnion (Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression unionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitUnion(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression unionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitUnion(Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitUnion (unionExpression As UnionExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitUnion : Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitUnion unionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unionExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression" />
      </Parameters>
      <Docs>
        <param name="unionExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUpdate">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitUpdate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression updateExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitUpdate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression updateExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitUpdate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitUpdate (updateExpression As UpdateExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitUpdate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitUpdate updateExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updateExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="updateExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitValues">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitValues (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression valuesExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitValues(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression valuesExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitValues(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitValues (valuesExpression As ValuesExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitValues : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression -&gt; System.Linq.Expressions.Expression" Usage="searchConditionConvertingExpressionVisitor.VisitValues valuesExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valuesExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="valuesExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
