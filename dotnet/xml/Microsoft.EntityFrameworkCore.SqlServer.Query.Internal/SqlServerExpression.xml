<Type Name="SqlServerExpression" FullName="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerExpression">
  <TypeSignature Language="C#" Value="public static class SqlServerExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SqlServerExpression extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlServerExpression" />
  <TypeSignature Language="F#" Value="type SqlServerExpression = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AggregateFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression AggregateFunction (Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, string name, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, Microsoft.EntityFrameworkCore.Query.EnumerableExpression enumerableExpression, int enumerableArgumentIndex, bool nullable, System.Collections.Generic.IEnumerable&lt;bool&gt; argumentsPropagateNullability, Type returnType, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression AggregateFunction(class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, string name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, class Microsoft.EntityFrameworkCore.Query.EnumerableExpression enumerableExpression, int32 enumerableArgumentIndex, bool nullable, class System.Collections.Generic.IEnumerable`1&lt;bool&gt; argumentsPropagateNullability, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerExpression.AggregateFunction(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.EnumerableExpression,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AggregateFunction (sqlExpressionFactory As ISqlExpressionFactory, name As String, arguments As IEnumerable(Of SqlExpression), enumerableExpression As EnumerableExpression, enumerableArgumentIndex As Integer, nullable As Boolean, argumentsPropagateNullability As IEnumerable(Of Boolean), returnType As Type, Optional typeMapping As RelationalTypeMapping = Nothing) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="static member AggregateFunction : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory * string * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Query.EnumerableExpression * int * bool * seq&lt;bool&gt; * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" Usage="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerExpression.AggregateFunction (sqlExpressionFactory, name, arguments, enumerableExpression, enumerableArgumentIndex, nullable, argumentsPropagateNullability, returnType, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" />
        <Parameter Name="enumerableExpression" Type="Microsoft.EntityFrameworkCore.Query.EnumerableExpression" />
        <Parameter Name="enumerableArgumentIndex" Type="System.Int32" />
        <Parameter Name="nullable" Type="System.Boolean" />
        <Parameter Name="argumentsPropagateNullability" Type="System.Collections.Generic.IEnumerable&lt;System.Boolean&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="sqlExpressionFactory">To be added.</param>
        <param name="name">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="enumerableExpression">To be added.</param>
        <param name="enumerableArgumentIndex">To be added.</param>
        <param name="nullable">To be added.</param>
        <param name="argumentsPropagateNullability">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AggregateFunctionWithOrdering">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression AggregateFunctionWithOrdering (Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, string name, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, Microsoft.EntityFrameworkCore.Query.EnumerableExpression enumerableExpression, int enumerableArgumentIndex, bool nullable, System.Collections.Generic.IEnumerable&lt;bool&gt; argumentsPropagateNullability, Type returnType, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression AggregateFunctionWithOrdering(class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, string name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, class Microsoft.EntityFrameworkCore.Query.EnumerableExpression enumerableExpression, int32 enumerableArgumentIndex, bool nullable, class System.Collections.Generic.IEnumerable`1&lt;bool&gt; argumentsPropagateNullability, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerExpression.AggregateFunctionWithOrdering(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.EnumerableExpression,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AggregateFunctionWithOrdering (sqlExpressionFactory As ISqlExpressionFactory, name As String, arguments As IEnumerable(Of SqlExpression), enumerableExpression As EnumerableExpression, enumerableArgumentIndex As Integer, nullable As Boolean, argumentsPropagateNullability As IEnumerable(Of Boolean), returnType As Type, Optional typeMapping As RelationalTypeMapping = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="static member AggregateFunctionWithOrdering : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory * string * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Query.EnumerableExpression * int * bool * seq&lt;bool&gt; * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerExpression.AggregateFunctionWithOrdering (sqlExpressionFactory, name, arguments, enumerableExpression, enumerableArgumentIndex, nullable, argumentsPropagateNullability, returnType, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" />
        <Parameter Name="enumerableExpression" Type="Microsoft.EntityFrameworkCore.Query.EnumerableExpression" />
        <Parameter Name="enumerableArgumentIndex" Type="System.Int32" />
        <Parameter Name="nullable" Type="System.Boolean" />
        <Parameter Name="argumentsPropagateNullability" Type="System.Collections.Generic.IEnumerable&lt;System.Boolean&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="sqlExpressionFactory">To be added.</param>
        <param name="name">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="enumerableExpression">To be added.</param>
        <param name="enumerableArgumentIndex">To be added.</param>
        <param name="nullable">To be added.</param>
        <param name="argumentsPropagateNullability">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
