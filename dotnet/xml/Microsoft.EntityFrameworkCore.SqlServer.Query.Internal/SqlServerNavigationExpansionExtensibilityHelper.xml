<Type Name="SqlServerNavigationExpansionExtensibilityHelper" FullName="Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper">
  <TypeSignature Language="C#" Value="public class SqlServerNavigationExpansionExtensibilityHelper : Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlServerNavigationExpansionExtensibilityHelper extends Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelper" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlServerNavigationExpansionExtensibilityHelper&#xA;Inherits NavigationExpansionExtensibilityHelper" />
  <TypeSignature Language="F#" Value="type SqlServerNavigationExpansionExtensibilityHelper = class&#xA;    inherit NavigationExpansionExtensibilityHelper" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelper</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlServerNavigationExpansionExtensibilityHelper (Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelperDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelperDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper.#ctor(Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelperDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As NavigationExpansionExtensibilityHelperDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper : Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelperDependencies -&gt; Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelperDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreQueryRootsCompatible">
      <MemberSignature Language="C#" Value="public override bool AreQueryRootsCompatible (Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression? first, Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression? second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool AreQueryRootsCompatible(class Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression first, class Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper.AreQueryRootsCompatible(Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression,Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AreQueryRootsCompatible (first As EntityQueryRootExpression, second As EntityQueryRootExpression) As Boolean" />
      <MemberSignature Language="F#" Value="override this.AreQueryRootsCompatible : Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression * Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression -&gt; bool" Usage="sqlServerNavigationExpansionExtensibilityHelper.AreQueryRootsCompatible (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="second" Type="Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="first">To be added.</param>
        <param name="second">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreQueryRootsCompatible">
      <MemberSignature Language="C#" Value="public override bool AreQueryRootsCompatible (Microsoft.EntityFrameworkCore.Query.QueryRootExpression? first, Microsoft.EntityFrameworkCore.Query.QueryRootExpression? second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool AreQueryRootsCompatible(class Microsoft.EntityFrameworkCore.Query.QueryRootExpression first, class Microsoft.EntityFrameworkCore.Query.QueryRootExpression second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper.AreQueryRootsCompatible(Microsoft.EntityFrameworkCore.Query.QueryRootExpression,Microsoft.EntityFrameworkCore.Query.QueryRootExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AreQueryRootsCompatible (first As QueryRootExpression, second As QueryRootExpression) As Boolean" />
      <MemberSignature Language="F#" Value="override this.AreQueryRootsCompatible : Microsoft.EntityFrameworkCore.Query.QueryRootExpression * Microsoft.EntityFrameworkCore.Query.QueryRootExpression -&gt; bool" Usage="sqlServerNavigationExpansionExtensibilityHelper.AreQueryRootsCompatible (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="Microsoft.EntityFrameworkCore.Query.QueryRootExpression" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="second" Type="Microsoft.EntityFrameworkCore.Query.QueryRootExpression" Index="1" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="first">To be added.</param>
        <param name="second">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryRoot">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression CreateQueryRoot (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression? source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression CreateQueryRoot(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper.CreateQueryRoot(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateQueryRoot (entityType As IEntityType, source As EntityQueryRootExpression) As EntityQueryRootExpression" />
      <MemberSignature Language="F#" Value="override this.CreateQueryRoot : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression -&gt; Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression" Usage="sqlServerNavigationExpansionExtensibilityHelper.CreateQueryRoot (entityType, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="source">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryRoot">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Query.QueryRootExpression CreateQueryRoot (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Query.QueryRootExpression? source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.QueryRootExpression CreateQueryRoot(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Query.QueryRootExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper.CreateQueryRoot(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.QueryRootExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateQueryRoot (entityType As IEntityType, source As QueryRootExpression) As QueryRootExpression" />
      <MemberSignature Language="F#" Value="override this.CreateQueryRoot : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Query.QueryRootExpression -&gt; Microsoft.EntityFrameworkCore.Query.QueryRootExpression" Usage="sqlServerNavigationExpansionExtensibilityHelper.CreateQueryRoot (entityType, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryRootExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.QueryRootExpression" Index="1" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="source">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateQueryRootCreation">
      <MemberSignature Language="C#" Value="public override void ValidateQueryRootCreation (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression? source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ValidateQueryRootCreation(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper.ValidateQueryRootCreation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ValidateQueryRootCreation (entityType As IEntityType, source As EntityQueryRootExpression)" />
      <MemberSignature Language="F#" Value="override this.ValidateQueryRootCreation : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression -&gt; unit" Usage="sqlServerNavigationExpansionExtensibilityHelper.ValidateQueryRootCreation (entityType, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="source">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
