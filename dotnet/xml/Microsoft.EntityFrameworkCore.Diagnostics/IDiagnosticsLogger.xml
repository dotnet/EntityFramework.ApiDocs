<Type Name="IDiagnosticsLogger" FullName="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger">
  <TypeSignature Language="C#" Value="public interface IDiagnosticsLogger" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDiagnosticsLogger" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDiagnosticsLogger" />
  <TypeSignature Language="F#" Value="type IDiagnosticsLogger = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IDiagnosticsLogger" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                Combines <see cref="T:Microsoft.Extensions.Logging.ILogger" /> and <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" />
                for use by all EF Core logging so that events can be sent to both <see cref="T:Microsoft.Extensions.Logging.ILogger" />
                for ASP.NET and <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" /> for everything else.
            </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                    for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DbContextLogger">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger DbContextLogger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger DbContextLogger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DbContextLogger" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DbContextLogger As IDbContextLogger" />
      <MemberSignature Language="F#" Value="member this.DbContextLogger : Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" Usage="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DbContextLogger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Definitions">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions Definitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions Definitions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Definitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Definitions As LoggingDefinitions" />
      <MemberSignature Language="F#" Value="member this.Definitions : Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions" Usage="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Definitions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Caching for logging definitions.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiagnosticSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.DiagnosticSource DiagnosticSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.DiagnosticSource DiagnosticSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DiagnosticSource As DiagnosticSource" />
      <MemberSignature Language="F#" Value="member this.DiagnosticSource : System.Diagnostics.DiagnosticSource" Usage="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DiagnosticSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchEventData">
      <MemberSignature Language="C#" Value="public virtual void DispatchEventData (Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase definition, Microsoft.EntityFrameworkCore.Diagnostics.EventData eventData, bool diagnosticSourceEnabled, bool simpleLogEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchEventData(class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase definition, class Microsoft.EntityFrameworkCore.Diagnostics.EventData eventData, bool diagnosticSourceEnabled, bool simpleLogEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DispatchEventData(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DispatchEventData (definition As EventDefinitionBase, eventData As EventData, diagnosticSourceEnabled As Boolean, simpleLogEnabled As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DispatchEventData : Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase * Microsoft.EntityFrameworkCore.Diagnostics.EventData * bool * bool -&gt; unit&#xA;override this.DispatchEventData : Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase * Microsoft.EntityFrameworkCore.Diagnostics.EventData * bool * bool -&gt; unit" Usage="iDiagnosticsLogger.DispatchEventData (definition, eventData, diagnosticSourceEnabled, simpleLogEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.EventData" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="diagnosticSourceEnabled" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="simpleLogEnabled" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="definition">The definition of the event to log.</param>
        <param name="eventData">The event data.</param>
        <param name="diagnosticSourceEnabled">True to dispatch to a <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" />; <see langword="false" /> otherwise.</param>
        <param name="simpleLogEnabled">True to dispatch to a <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" />; <see langword="false" /> otherwise.</param>
        <summary>
                Dispatches the given <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EventData" /> to a <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" />, if enabled, and
                a <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" />, if enabled.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interceptors">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors Interceptors { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors Interceptors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Interceptors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Interceptors As IInterceptors" />
      <MemberSignature Language="F#" Value="member this.Interceptors : Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors" Usage="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Interceptors" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors? Interceptors { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Holds registered interceptors, if any.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logger">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.ILogger Logger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILogger Logger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Logger" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Logger As ILogger" />
      <MemberSignature Language="F#" Value="member this.Logger : Microsoft.Extensions.Logging.ILogger" Usage="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Logger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The underlying <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedsEventData">
      <MemberSignature Language="C#" Value="public virtual bool NeedsEventData (Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase definition, out bool diagnosticSourceEnabled, out bool simpleLogEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NeedsEventData(class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase definition, [out] bool&amp; diagnosticSourceEnabled, [out] bool&amp; simpleLogEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.NeedsEventData(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Boolean@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NeedsEventData (definition As EventDefinitionBase, ByRef diagnosticSourceEnabled As Boolean, ByRef simpleLogEnabled As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member NeedsEventData : Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase * bool * bool -&gt; bool&#xA;override this.NeedsEventData : Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase * bool * bool -&gt; bool" Usage="iDiagnosticsLogger.NeedsEventData (definition, diagnosticSourceEnabled, simpleLogEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="diagnosticSourceEnabled" Type="System.Boolean" RefType="out" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="simpleLogEnabled" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="definition">The definition of the event.</param>
        <param name="diagnosticSourceEnabled">
                Set to <see langword="true" /> if a <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" /> is enabled;
                <see langword="false" /> otherwise.
            </param>
        <param name="simpleLogEnabled">
                True to <see langword="true" /> if a <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" /> is enabled; <see langword="false" />
                otherwise.
            </param>
        <summary>
                Determines whether or not an <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EventData" /> instance is needed based on whether or
                not there is a <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" /> or an <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" /> enabled for
                the given event.
            </summary>
        <returns>
          <see langword="true" /> if either a diagnostic source or a LogTo logger is enabled; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedsEventData&lt;TInterceptor&gt;">
      <MemberSignature Language="C#" Value="public virtual bool NeedsEventData&lt;TInterceptor&gt; (Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase definition, out TInterceptor interceptor, out bool diagnosticSourceEnabled, out bool simpleLogEnabled) where TInterceptor : class, Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NeedsEventData&lt;class (class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor) TInterceptor&gt;(class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase definition, [out] !!TInterceptor&amp; interceptor, [out] bool&amp; diagnosticSourceEnabled, [out] bool&amp; simpleLogEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.NeedsEventData``1(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,``0@,System.Boolean@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NeedsEventData(Of TInterceptor As {Class, IInterceptor}) (definition As EventDefinitionBase, ByRef interceptor As TInterceptor, ByRef diagnosticSourceEnabled As Boolean, ByRef simpleLogEnabled As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member NeedsEventData : Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase * 'Interceptor * bool * bool -&gt; bool (requires 'Interceptor : null and 'Interceptor :&gt; Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor)&#xA;override this.NeedsEventData : Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase * 'Interceptor * bool * bool -&gt; bool (requires 'Interceptor : null and 'Interceptor :&gt; Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor)" Usage="iDiagnosticsLogger.NeedsEventData (definition, interceptor, diagnosticSourceEnabled, simpleLogEnabled)" />
      <MemberSignature Language="C#" Value="public virtual bool NeedsEventData&lt;TInterceptor&gt; (Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase definition, out TInterceptor? interceptor, out bool diagnosticSourceEnabled, out bool simpleLogEnabled) where TInterceptor : class, Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInterceptor">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="definition" Type="Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="interceptor" Type="TInterceptor" RefType="out" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="diagnosticSourceEnabled" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="simpleLogEnabled" Type="System.Boolean" RefType="out" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TInterceptor">To be added.</typeparam>
        <param name="definition">The definition of the event.</param>
        <param name="interceptor">The <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> to use if enabled; otherwise null.</param>
        <param name="diagnosticSourceEnabled">
                Set to <see langword="true" /> if a <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" /> is enabled;
                <see langword="false" /> otherwise.
            </param>
        <param name="simpleLogEnabled">
                True to <see langword="true" /> if a <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" /> is enabled; <see langword="false" />
                otherwise.
            </param>
        <summary>
                Determines whether or not an <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EventData" /> instance is needed based on whether or
                not there is a <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource" />, an <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" />, or an <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> enabled for
                the given event.
            </summary>
        <returns>
          <see langword="true" /> if either a diagnostic source, a LogTo logger, or an interceptor is enabled; <see langword="false" />
                otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions Options" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As ILoggingOptions" />
      <MemberSignature Language="F#" Value="member this.Options : Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions" Usage="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Entity Framework logging options.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldLog">
      <MemberSignature Language="C#" Value="public virtual bool ShouldLog (Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldLog(class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.ShouldLog(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldLog (definition As EventDefinitionBase) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldLog : Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase -&gt; bool&#xA;override this.ShouldLog : Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase -&gt; bool" Usage="iDiagnosticsLogger.ShouldLog definition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="definition">The definition of the event to log.</param>
        <summary>
                Checks whether or not the message should be sent to the <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            </summary>
        <returns>
          <see langword="true" /> if <see cref="T:Microsoft.Extensions.Logging.ILogger" /> logging is enabled and the event should not be ignored;
                <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldLogSensitiveData">
      <MemberSignature Language="C#" Value="public bool ShouldLogSensitiveData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldLogSensitiveData() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.ShouldLogSensitiveData" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldLogSensitiveData () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldLogSensitiveData : unit -&gt; bool" Usage="iDiagnosticsLogger.ShouldLogSensitiveData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a value indicating whether sensitive information should be written
                to the underlying logger. This also has the side effect of writing a warning
                to the log the first time sensitive data is logged.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
