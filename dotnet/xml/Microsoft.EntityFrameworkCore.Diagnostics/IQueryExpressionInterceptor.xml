<Type Name="IQueryExpressionInterceptor" FullName="Microsoft.EntityFrameworkCore.Diagnostics.IQueryExpressionInterceptor">
  <TypeSignature Language="C#" Value="public interface IQueryExpressionInterceptor : Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryExpressionInterceptor implements class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" FrameworkAlternate="efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.IQueryExpressionInterceptor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryExpressionInterceptor&#xA;Implements IInterceptor" />
  <TypeSignature Language="F#" Value="type IQueryExpressionInterceptor = interface&#xA;    interface IInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IQueryExpressionInterceptor implements class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Allows interception of query expression trees and resulting compiled delegates.
            </summary>
    <remarks>
      <para>
                    Use <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.AddInterceptors(Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])" />
                    to register application interceptors.
                </para>
      <para>
                    Extensions can also register interceptors in the internal service provider.
                    If both injected and application interceptors are found, then the injected interceptors are run in the
                    order that they are resolved from the service provider, and then the application interceptors are run last.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-interceptors">EF Core interceptors</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="QueryCompilationStarting">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression QueryCompilationStarting (System.Linq.Expressions.Expression queryExpression, Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression QueryCompilationStarting(class System.Linq.Expressions.Expression queryExpression, class Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IQueryExpressionInterceptor.QueryCompilationStarting(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryCompilationStarting (queryExpression As Expression, eventData As QueryExpressionEventData) As Expression" />
      <MemberSignature Language="F#" Value="abstract member QueryCompilationStarting : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData -&gt; System.Linq.Expressions.Expression&#xA;override this.QueryCompilationStarting : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData -&gt; System.Linq.Expressions.Expression" Usage="iQueryExpressionInterceptor.QueryCompilationStarting (queryExpression, eventData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData" />
      </Parameters>
      <Docs>
        <param name="queryExpression">The query expression.</param>
        <param name="eventData">Contextual information about the query environment.</param>
        <summary>
                Called with the LINQ expression tree for a query before it is compiled.
            </summary>
        <returns>The query expression tree to continue with, which may have been changed by the interceptor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
