<Type Name="IDbContextLogger" FullName="Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger">
  <TypeSignature Language="C#" Value="public interface IDbContextLogger" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbContextLogger" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbContextLogger" />
  <TypeSignature Language="F#" Value="type IDbContextLogger = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IDbContextLogger" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                A simple logging interface for Entity Framework events.
                Used by <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" /></summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-simple-logging">EF Core simple logging</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public void Log (Microsoft.EntityFrameworkCore.Diagnostics.EventData eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Log(class Microsoft.EntityFrameworkCore.Diagnostics.EventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger.Log(Microsoft.EntityFrameworkCore.Diagnostics.EventData)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Log (eventData As EventData)" />
      <MemberSignature Language="F#" Value="abstract member Log : Microsoft.EntityFrameworkCore.Diagnostics.EventData -&gt; unit" Usage="iDbContextLogger.Log eventData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.EventData" />
      </Parameters>
      <Docs>
        <param name="eventData">The event to log.</param>
        <summary>
                Logs the given <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EventData" />.
            </summary>
        <remarks>
          <para>
                    This method is only called if <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger.ShouldLog(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel)" /> returns true.
                </para>
          <para>
                    The specific subtype of the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EventData" /> argument is dependent on the event
                    being logged. See <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId" /> for the type of event data used for each core event.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldLog">
      <MemberSignature Language="C#" Value="public bool ShouldLog (Microsoft.Extensions.Logging.EventId eventId, Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldLog(valuetype Microsoft.Extensions.Logging.EventId eventId, valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger.ShouldLog(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldLog (eventId As EventId, logLevel As LogLevel) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldLog : Microsoft.Extensions.Logging.EventId * Microsoft.Extensions.Logging.LogLevel -&gt; bool" Usage="iDbContextLogger.ShouldLog (eventId, logLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="eventId">The ID of the event.</param>
        <param name="logLevel">The level of the event.</param>
        <summary>
                Determines whether or not the given event should be logged.
            </summary>
        <returns>Returns <see langword="true" /> if the event should be logged; <see langword="false" /> if it should be filtered out.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
