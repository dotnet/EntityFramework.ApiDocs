<Type Name="InterceptorAggregator&lt;TInterceptor&gt;" FullName="Microsoft.EntityFrameworkCore.Diagnostics.InterceptorAggregator&lt;TInterceptor&gt;">
  <TypeSignature Language="C#" Value="public abstract class InterceptorAggregator&lt;TInterceptor&gt; : Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator where TInterceptor : class, IInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit InterceptorAggregator`1&lt;class (class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor) TInterceptor&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.InterceptorAggregator`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class InterceptorAggregator(Of TInterceptor)&#xA;Implements IInterceptorAggregator" />
  <TypeSignature Language="F#" Value="type InterceptorAggregator&lt;'Interceptor (requires 'Interceptor : null and 'Interceptor :&gt; IInterceptor)&gt; = class&#xA;    interface IInterceptorAggregator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInterceptor">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TInterceptor">The interceptor type.</typeparam>
    <summary>
                Abstract base class for implementations of the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator" /> service.
            </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> and multiple registrations
                    are allowed. This means that each <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own
                    set of instances of this service.
                    The implementations may depend on other services registered with any lifetime.
                    The implementations do not need to be thread-safe.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-interceptors">EF Core interceptors</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InterceptorAggregator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptorAggregator`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AggregateInterceptors">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor AggregateInterceptors (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; interceptors);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor AggregateInterceptors(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; interceptors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptorAggregator`1.AggregateInterceptors(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AggregateInterceptors (interceptors As IReadOnlyList(Of IInterceptor)) As IInterceptor" />
      <MemberSignature Language="F#" Value="abstract member AggregateInterceptors : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&#xA;override this.AggregateInterceptors : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" Usage="interceptorAggregator.AggregateInterceptors interceptors" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor? AggregateInterceptors (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; interceptors);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator.AggregateInterceptors(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interceptors" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt;" />
      </Parameters>
      <Docs>
        <param name="interceptors">The interceptors to combine.</param>
        <summary>
                Resolves a single <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> /&gt; from all those registered on
                the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> or in the internal service provider.
            </summary>
        <returns>The combined interceptor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChain">
      <MemberSignature Language="C#" Value="protected abstract TInterceptor CreateChain (System.Collections.Generic.IEnumerable&lt;TInterceptor&gt; interceptors);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TInterceptor CreateChain(class System.Collections.Generic.IEnumerable`1&lt;!TInterceptor&gt; interceptors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptorAggregator`1.CreateChain(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateChain (interceptors As IEnumerable(Of TInterceptor)) As TInterceptor" />
      <MemberSignature Language="F#" Value="abstract member CreateChain : seq&lt;'Interceptor (requires 'Interceptor : null and 'Interceptor :&gt; Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor)&gt; -&gt; 'Interceptor" Usage="interceptorAggregator.CreateChain interceptors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TInterceptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interceptors" Type="System.Collections.Generic.IEnumerable&lt;TInterceptor&gt;" />
      </Parameters>
      <Docs>
        <param name="interceptors">The interceptors to combine.</param>
        <summary>
                Must be implemented by the inheriting type to create a single interceptor from the given list.
            </summary>
        <returns>The combined interceptor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterceptorType">
      <MemberSignature Language="C#" Value="public virtual Type InterceptorType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type InterceptorType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptorAggregator`1.InterceptorType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InterceptorType As Type" />
      <MemberSignature Language="F#" Value="member this.InterceptorType : Type" Usage="Microsoft.EntityFrameworkCore.Diagnostics.InterceptorAggregator&lt;'Interceptor (requires 'Interceptor : null and 'Interceptor :&gt; Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor)&gt;.InterceptorType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator.InterceptorType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The interceptor type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
