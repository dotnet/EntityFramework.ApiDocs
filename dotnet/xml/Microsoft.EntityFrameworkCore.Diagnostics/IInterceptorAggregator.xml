<Type Name="IInterceptorAggregator" FullName="Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator">
  <TypeSignature Language="C#" Value="public interface IInterceptorAggregator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInterceptorAggregator" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInterceptorAggregator" />
  <TypeSignature Language="F#" Value="type IInterceptorAggregator = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IInterceptorAggregator" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    A service to resolve a single <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> from all those registered on
                    the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> or in the internal service provider.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
      <para>
                    Instances should be registered on the internal service provider as multiple <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator" />
                    interfaces.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> and multiple registrations
                    are allowed. This means that each <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own
                    set of instances of this service.
                    The implementations may depend on other services registered with any lifetime.
                    The implementations do not need to be thread-safe.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-interceptors">EF Core interceptors</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AggregateInterceptors">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor AggregateInterceptors (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; interceptors);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor AggregateInterceptors(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; interceptors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator.AggregateInterceptors(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor})" />
      <MemberSignature Language="VB.NET" Value="Public Function AggregateInterceptors (interceptors As IReadOnlyList(Of IInterceptor)) As IInterceptor" />
      <MemberSignature Language="F#" Value="abstract member AggregateInterceptors : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" Usage="iInterceptorAggregator.AggregateInterceptors interceptors" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor? AggregateInterceptors (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; interceptors);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interceptors" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt;" />
      </Parameters>
      <Docs>
        <param name="interceptors">The interceptors to combine.</param>
        <summary>
                Resolves a single <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> from all those registered on
                the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> or in the internal service provider.
            </summary>
        <returns>The combined interceptor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterceptorType">
      <MemberSignature Language="C#" Value="public Type InterceptorType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type InterceptorType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator.InterceptorType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InterceptorType As Type" />
      <MemberSignature Language="F#" Value="member this.InterceptorType : Type" Usage="Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator.InterceptorType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The interceptor type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
