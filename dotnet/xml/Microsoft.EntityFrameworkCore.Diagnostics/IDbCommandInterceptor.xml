<Type Name="IDbCommandInterceptor" FullName="Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor">
  <TypeSignature Language="C#" Value="public interface IDbCommandInterceptor : Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbCommandInterceptor implements class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbCommandInterceptor&#xA;Implements IInterceptor" />
  <TypeSignature Language="F#" Value="type IDbCommandInterceptor = interface&#xA;    interface IInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IDbCommandInterceptor implements class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Allows interception of commands sent to a relational database.
            </summary>
    <remarks>
      <para>
                    Command interceptors can be used to view, change, or suppress execution of the <see cref="T:System.Data.Common.DbCommand" />, and
                    to modify the result before it is returned to EF.
                </para>
      <para>
                    Consider inheriting from <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor" /> if not implementing all methods.
                </para>
      <para>
                    Use <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.AddInterceptors(Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])" />
                    to register application interceptors.
                </para>
      <para>
                    Extensions can also register interceptors in the internal service provider.
                    If both injected and application interceptors are found, then the injected interceptors are run in the
                    order that they are resolved from the service provider, and then the application interceptors are run last.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-interceptors">EF Core interceptors</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CommandCanceled">
      <MemberSignature Language="C#" Value="public virtual void CommandCanceled (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommandCanceled(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCanceled(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CommandCanceled (command As DbCommand, eventData As CommandEndEventData)" />
      <MemberSignature Language="F#" Value="abstract member CommandCanceled : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData -&gt; unit&#xA;override this.CommandCanceled : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData -&gt; unit" Usage="iDbCommandInterceptor.CommandCanceled (command, eventData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <summary>
                Called when a command was canceled.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandCanceledAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CommandCanceledAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData eventData, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CommandCanceledAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData eventData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCanceledAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CommandCanceledAsync (command As DbCommand, eventData As CommandEndEventData, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member CommandCanceledAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CommandCanceledAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iDbCommandInterceptor.CommandCanceledAsync (command, eventData, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called when a command was canceled.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CommandCreated">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand CommandCreated (Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData eventData, System.Data.Common.DbCommand result);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Common.DbCommand CommandCreated(class Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData eventData, class System.Data.Common.DbCommand result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCreated(Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData,System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Function CommandCreated (eventData As CommandEndEventData, result As DbCommand) As DbCommand" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member CommandCreated : Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData * System.Data.Common.DbCommand -&gt; System.Data.Common.DbCommand" Usage="iDbCommandInterceptor.CommandCreated (eventData, result)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual System.Data.Common.DbCommand CommandCreated (Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData eventData, System.Data.Common.DbCommand result);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CommandCreated (eventData As CommandEndEventData, result As DbCommand) As DbCommand" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member CommandCreated : Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData * System.Data.Common.DbCommand -&gt; System.Data.Common.DbCommand&#xA;override this.CommandCreated : Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData * System.Data.Common.DbCommand -&gt; System.Data.Common.DbCommand" Usage="iDbCommandInterceptor.CommandCreated (eventData, result)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData" />
        <Parameter Name="result" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbConnection.CreateCommand" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbConnection.CreateCommand" />.
            </summary>
        <returns>
                The result that EF will use.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>
                This method is still called if an interceptor suppressed creation of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbCommand})" />.
                In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbCommand})" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandCreating">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt; CommandCreating (Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt; result);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;class System.Data.Common.DbCommand&gt; CommandCreating(class Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;class System.Data.Common.DbCommand&gt; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbCommand})" />
      <MemberSignature Language="VB.NET" Value="Public Function CommandCreating (eventData As CommandCorrelatedEventData, result As InterceptionResult(Of DbCommand)) As InterceptionResult(Of DbCommand)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member CommandCreating : Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt;" Usage="iDbCommandInterceptor.CommandCreating (eventData, result)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt; CommandCreating (Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt; result);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CommandCreating (eventData As CommandCorrelatedEventData, result As InterceptionResult(Of DbCommand)) As InterceptionResult(Of DbCommand)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member CommandCreating : Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt;&#xA;override this.CommandCreating : Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt;" Usage="iDbCommandInterceptor.CommandCreating (eventData, result)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbCommand&gt;" />
      </Parameters>
      <Docs>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.CreateCommand" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandFailed">
      <MemberSignature Language="C#" Value="public void CommandFailed (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData eventData);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommandFailed(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandFailed(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommandFailed (command As DbCommand, eventData As CommandErrorEventData)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member CommandFailed : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData -&gt; unit" Usage="iDbCommandInterceptor.CommandFailed (command, eventData)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual void CommandFailed (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData eventData);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CommandFailed (command As DbCommand, eventData As CommandErrorEventData)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member CommandFailed : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData -&gt; unit&#xA;override this.CommandFailed : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData -&gt; unit" Usage="iDbCommandInterceptor.CommandFailed (command, eventData)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <summary>
                Called when execution of a command has failed with an exception.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandFailedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CommandFailedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData eventData, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CommandFailedAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData eventData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandFailedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CommandFailedAsync (command As DbCommand, eventData As CommandErrorEventData, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member CommandFailedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iDbCommandInterceptor.CommandFailedAsync (command, eventData, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CommandFailedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData eventData, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CommandFailedAsync (command As DbCommand, eventData As CommandErrorEventData, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member CommandFailedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CommandFailedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iDbCommandInterceptor.CommandFailedAsync (command, eventData, cancellationToken)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called when execution of a command has failed with an exception.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CommandInitialized">
      <MemberSignature Language="C#" Value="public virtual System.Data.Common.DbCommand CommandInitialized (Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData eventData, System.Data.Common.DbCommand result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Common.DbCommand CommandInitialized(class Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData eventData, class System.Data.Common.DbCommand result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandInitialized(Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData,System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CommandInitialized (eventData As CommandEndEventData, result As DbCommand) As DbCommand" />
      <MemberSignature Language="F#" Value="abstract member CommandInitialized : Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData * System.Data.Common.DbCommand -&gt; System.Data.Common.DbCommand&#xA;override this.CommandInitialized : Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData * System.Data.Common.DbCommand -&gt; System.Data.Common.DbCommand" Usage="iDbCommandInterceptor.CommandInitialized (eventData, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="result" Type="System.Data.Common.DbCommand" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                The command. This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called after EF has initialized <see cref="P:System.Data.Common.DbCommand.CommandText" /> and other command configuration.
            </summary>
        <returns>
                The result that EF will use.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataReaderClosing">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult DataReaderClosing (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult DataReaderClosing(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.DataReaderClosing(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DataReaderClosing (command As DbCommand, eventData As DataReaderClosingEventData, result As InterceptionResult) As InterceptionResult" />
      <MemberSignature Language="F#" Value="abstract member DataReaderClosing : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&#xA;override this.DataReaderClosing : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" Usage="iDbCommandInterceptor.DataReaderClosing (command, eventData, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbDataReader.Close" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is <see langword="false" />, then EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is <see langword="true" />, then EF will suppress the operation
                it was about to perform.
                An implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataReaderClosingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; DataReaderClosingAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; DataReaderClosingAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.DataReaderClosingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DataReaderClosingAsync (command As DbCommand, eventData As DataReaderClosingEventData, result As InterceptionResult) As ValueTask(Of InterceptionResult)" />
      <MemberSignature Language="F#" Value="abstract member DataReaderClosingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;&#xA;override this.DataReaderClosingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;" Usage="iDbCommandInterceptor.DataReaderClosingAsync (command, eventData, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.DataReaderClosingEventData" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbDataReader.CloseAsync" /> in an async context.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is <see langword="false" />, then EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is <see langword="true" />, then EF will suppress the operation
                it was about to perform.
                An implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataReaderDisposing">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult DataReaderDisposing (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult DataReaderDisposing(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.DataReaderDisposing(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function DataReaderDisposing (command As DbCommand, eventData As DataReaderDisposingEventData, result As InterceptionResult) As InterceptionResult" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member DataReaderDisposing : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" Usage="iDbCommandInterceptor.DataReaderDisposing (command, eventData, result)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult DataReaderDisposing (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DataReaderDisposing (command As DbCommand, eventData As DataReaderDisposingEventData, result As InterceptionResult) As InterceptionResult" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member DataReaderDisposing : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&#xA;override this.DataReaderDisposing : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" Usage="iDbCommandInterceptor.DataReaderDisposing (command, eventData, result)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and reader.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called when execution of a <see cref="T:System.Data.Common.DbDataReader" /> is about to be disposed.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is <see langword="false" />, then EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is <see langword="true" />, then EF will suppress the operation
                it was about to perform.
                An implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonQueryExecuted">
      <MemberSignature Language="C#" Value="public int NonQueryExecuted (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, int result);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 NonQueryExecuted(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, int32 result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function NonQueryExecuted (command As DbCommand, eventData As CommandExecutedEventData, result As Integer) As Integer" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecuted : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * int -&gt; int" Usage="iDbCommandInterceptor.NonQueryExecuted (command, eventData, result)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual int NonQueryExecuted (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, int result);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NonQueryExecuted (command As DbCommand, eventData As CommandExecutedEventData, result As Integer) As Integer" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecuted : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * int -&gt; int&#xA;override this.NonQueryExecuted : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * int -&gt; int" Usage="iDbCommandInterceptor.NonQueryExecuted (command, eventData, result)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData" />
        <Parameter Name="result" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
        <returns>
                The result that EF will use.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>
                This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})" />.
                In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonQueryExecutedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; NonQueryExecutedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, int result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; NonQueryExecutedAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, int32 result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function NonQueryExecutedAsync (command As DbCommand, eventData As CommandExecutedEventData, result As Integer, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Integer)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="iDbCommandInterceptor.NonQueryExecutedAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;int&gt; NonQueryExecutedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, int result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; NonQueryExecutedAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, int32 result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function NonQueryExecutedAsync (command As DbCommand, eventData As CommandExecutedEventData, result As Integer, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Integer)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="iDbCommandInterceptor.NonQueryExecutedAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;int&gt; NonQueryExecutedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, int result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NonQueryExecutedAsync (command As DbCommand, eventData As CommandExecutedEventData, result As Integer, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Integer)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;&#xA;override this.NonQueryExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="iDbCommandInterceptor.NonQueryExecutedAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData" />
        <Parameter Name="result" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />.
            </summary>
        <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" /></returns>
        <remarks>
                This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)" />.
                In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)" />.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="NonQueryExecuting">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; NonQueryExecuting (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; result);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;int32&gt; NonQueryExecuting(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;int32&gt; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function NonQueryExecuting (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of Integer)) As InterceptionResult(Of Integer)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecuting : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt;" Usage="iDbCommandInterceptor.NonQueryExecuting (command, eventData, result)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; NonQueryExecuting (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; result);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NonQueryExecuting (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of Integer)) As InterceptionResult(Of Integer)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecuting : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt;&#xA;override this.NonQueryExecuting : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt;" Usage="iDbCommandInterceptor.NonQueryExecuting (command, eventData, result)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonQueryExecutingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt;&gt; NonQueryExecutingAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;int32&gt;&gt; NonQueryExecutingAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;int32&gt; result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function NonQueryExecutingAsync (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of Integer), Optional cancellationToken As CancellationToken = Nothing) As Task(Of InterceptionResult(Of Integer))" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt;&gt;" Usage="iDbCommandInterceptor.NonQueryExecutingAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt;&gt; NonQueryExecutingAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;int32&gt;&gt; NonQueryExecutingAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;int32&gt; result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function NonQueryExecutingAsync (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of Integer), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of InterceptionResult(Of Integer))" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt;&gt;" Usage="iDbCommandInterceptor.NonQueryExecutingAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt;&gt; NonQueryExecutingAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NonQueryExecutingAsync (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of Integer), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of InterceptionResult(Of Integer))" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt;&gt;&#xA;override this.NonQueryExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;int&gt;&gt;" Usage="iDbCommandInterceptor.NonQueryExecutingAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Int32&gt;&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReaderExecuted">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbDataReader ReaderExecuted (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, System.Data.Common.DbDataReader result);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Common.DbDataReader ReaderExecuted(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, class System.Data.Common.DbDataReader result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReaderExecuted (command As DbCommand, eventData As CommandExecutedEventData, result As DbDataReader) As DbDataReader" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecuted : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * System.Data.Common.DbDataReader -&gt; System.Data.Common.DbDataReader" Usage="iDbCommandInterceptor.ReaderExecuted (command, eventData, result)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual System.Data.Common.DbDataReader ReaderExecuted (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, System.Data.Common.DbDataReader result);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReaderExecuted (command As DbCommand, eventData As CommandExecutedEventData, result As DbDataReader) As DbDataReader" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecuted : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * System.Data.Common.DbDataReader -&gt; System.Data.Common.DbDataReader&#xA;override this.ReaderExecuted : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * System.Data.Common.DbDataReader -&gt; System.Data.Common.DbDataReader" Usage="iDbCommandInterceptor.ReaderExecuted (command, eventData, result)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData" />
        <Parameter Name="result" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
            </summary>
        <returns>
                The result that EF will use.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>
                This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader})" />.
                In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader})" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderExecutedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ReaderExecutedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, System.Data.Common.DbDataReader result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Data.Common.DbDataReader&gt; ReaderExecutedAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, class System.Data.Common.DbDataReader result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReaderExecutedAsync (command As DbCommand, eventData As CommandExecutedEventData, result As DbDataReader, Optional cancellationToken As CancellationToken = Nothing) As Task(Of DbDataReader)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;" Usage="iDbCommandInterceptor.ReaderExecutedAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;System.Data.Common.DbDataReader&gt; ReaderExecutedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, System.Data.Common.DbDataReader result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Data.Common.DbDataReader&gt; ReaderExecutedAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, class System.Data.Common.DbDataReader result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function ReaderExecutedAsync (command As DbCommand, eventData As CommandExecutedEventData, result As DbDataReader, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of DbDataReader)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Data.Common.DbDataReader&gt;" Usage="iDbCommandInterceptor.ReaderExecutedAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;System.Data.Common.DbDataReader&gt; ReaderExecutedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, System.Data.Common.DbDataReader result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReaderExecutedAsync (command As DbCommand, eventData As CommandExecutedEventData, result As DbDataReader, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of DbDataReader)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Data.Common.DbDataReader&gt;&#xA;override this.ReaderExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Data.Common.DbDataReader&gt;" Usage="iDbCommandInterceptor.ReaderExecutedAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData" />
        <Parameter Name="result" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync" />.
            </summary>
        <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" /></returns>
        <remarks>
                This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader},System.Threading.CancellationToken)" />.
                In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader},System.Threading.CancellationToken)" />.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReaderExecuting">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; ReaderExecuting (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; result);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;class System.Data.Common.DbDataReader&gt; ReaderExecuting(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;class System.Data.Common.DbDataReader&gt; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReaderExecuting (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of DbDataReader)) As InterceptionResult(Of DbDataReader)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecuting : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;" Usage="iDbCommandInterceptor.ReaderExecuting (command, eventData, result)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; ReaderExecuting (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; result);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReaderExecuting (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of DbDataReader)) As InterceptionResult(Of DbDataReader)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecuting : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;&#xA;override this.ReaderExecuting : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;" Usage="iDbCommandInterceptor.ReaderExecuting (command, eventData, result)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderExecutingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;&gt; ReaderExecutingAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;class System.Data.Common.DbDataReader&gt;&gt; ReaderExecutingAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;class System.Data.Common.DbDataReader&gt; result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReaderExecutingAsync (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of DbDataReader), Optional cancellationToken As CancellationToken = Nothing) As Task(Of InterceptionResult(Of DbDataReader))" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;&gt;" Usage="iDbCommandInterceptor.ReaderExecutingAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;&gt; ReaderExecutingAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;class System.Data.Common.DbDataReader&gt;&gt; ReaderExecutingAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;class System.Data.Common.DbDataReader&gt; result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function ReaderExecutingAsync (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of DbDataReader), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of InterceptionResult(Of DbDataReader))" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;&gt;" Usage="iDbCommandInterceptor.ReaderExecutingAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;&gt; ReaderExecutingAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReaderExecutingAsync (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of DbDataReader), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of InterceptionResult(Of DbDataReader))" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;&gt;&#xA;override this.ReaderExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;&gt;" Usage="iDbCommandInterceptor.ReaderExecutingAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbDataReader&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ScalarExecuted">
      <MemberSignature Language="C#" Value="public object ScalarExecuted (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, object result);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ScalarExecuted(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ScalarExecuted (command As DbCommand, eventData As CommandExecutedEventData, result As Object) As Object" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecuted : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * obj -&gt; obj" Usage="iDbCommandInterceptor.ScalarExecuted (command, eventData, result)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public object? ScalarExecuted (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, object? result);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual object? ScalarExecuted (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, object? result);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ScalarExecuted (command As DbCommand, eventData As CommandExecutedEventData, result As Object) As Object" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecuted : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * obj -&gt; obj&#xA;override this.ScalarExecuted : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * obj -&gt; obj" Usage="iDbCommandInterceptor.ScalarExecuted (command, eventData, result)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData" />
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
        <returns>
                The result that EF will use.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>
                This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object})" />.
                In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object})" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalarExecutedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;object&gt; ScalarExecutedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, object result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ScalarExecutedAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, object result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ScalarExecutedAsync (command As DbCommand, eventData As CommandExecutedEventData, result As Object, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Object)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="iDbCommandInterceptor.ScalarExecutedAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;object&gt; ScalarExecutedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, object result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; ScalarExecutedAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, object result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function ScalarExecutedAsync (command As DbCommand, eventData As CommandExecutedEventData, result As Object, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Object)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="iDbCommandInterceptor.ScalarExecutedAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;object?&gt; ScalarExecutedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, object? result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;object?&gt; ScalarExecutedAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData eventData, object? result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ScalarExecutedAsync (command As DbCommand, eventData As CommandExecutedEventData, result As Object, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Object)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;&#xA;override this.ScalarExecutedAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="iDbCommandInterceptor.ScalarExecutedAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData" />
        <Parameter Name="result" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync" />.
            </summary>
        <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" /></returns>
        <remarks>
                This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object},System.Threading.CancellationToken)" />.
                In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object},System.Threading.CancellationToken)" />.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ScalarExecuting">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;object&gt; ScalarExecuting (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;object&gt; result);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;object&gt; ScalarExecuting(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;object&gt; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function ScalarExecuting (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of Object)) As InterceptionResult(Of Object)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecuting : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt;" Usage="iDbCommandInterceptor.ScalarExecuting (command, eventData, result)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;object&gt; ScalarExecuting (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;object&gt; result);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ScalarExecuting (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of Object)) As InterceptionResult(Of Object)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecuting : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt;&#xA;override this.ScalarExecuting : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt;" Usage="iDbCommandInterceptor.ScalarExecuting (command, eventData, result)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalarExecutingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;object&gt;&gt; ScalarExecutingAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;object&gt; result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;object&gt;&gt; ScalarExecutingAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;object&gt; result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ScalarExecutingAsync (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of Object), Optional cancellationToken As CancellationToken = Nothing) As Task(Of InterceptionResult(Of Object))" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt;&gt;" Usage="iDbCommandInterceptor.ScalarExecutingAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;object&gt;&gt; ScalarExecutingAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;object&gt; result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;object&gt;&gt; ScalarExecutingAsync(class System.Data.Common.DbCommand command, class Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;object&gt; result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function ScalarExecutingAsync (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of Object), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of InterceptionResult(Of Object))" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt;&gt;" Usage="iDbCommandInterceptor.ScalarExecutingAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;object&gt;&gt; ScalarExecutingAsync (System.Data.Common.DbCommand command, Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;object&gt; result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ScalarExecutingAsync (command As DbCommand, eventData As CommandEventData, result As InterceptionResult(Of Object), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of InterceptionResult(Of Object))" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt;&gt;&#xA;override this.ScalarExecutingAsync : System.Data.Common.DbCommand * Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;obj&gt;&gt;" Usage="iDbCommandInterceptor.ScalarExecutingAsync (command, eventData, result, cancellationToken)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Object&gt;&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Object&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="command">The command.</param>
        <param name="eventData">Contextual information about the command and execution.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                An implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
