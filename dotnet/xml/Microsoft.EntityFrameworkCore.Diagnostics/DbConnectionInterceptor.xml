<Type Name="DbConnectionInterceptor" FullName="Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor">
  <TypeSignature Language="C#" Value="public abstract class DbConnectionInterceptor : Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor, Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbConnectionInterceptor extends System.Object implements class Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor, class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbConnectionInterceptor&#xA;Implements IDbConnectionInterceptor, IInterceptor" />
  <TypeSignature Language="F#" Value="type DbConnectionInterceptor = class&#xA;    interface IDbConnectionInterceptor&#xA;    interface IInterceptor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Abstract base class for <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor" /> for use when implementing a subset
                of the interface methods.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-interceptors">EF Core interceptors</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbConnectionInterceptor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionClosed">
      <MemberSignature Language="C#" Value="public virtual void ConnectionClosed (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionClosed(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionClosed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionClosed (connection As DbConnection, eventData As ConnectionEndEventData)" />
      <MemberSignature Language="F#" Value="abstract member ConnectionClosed : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData -&gt; unit&#xA;override this.ConnectionClosed : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData -&gt; unit" Usage="dbConnectionInterceptor.ConnectionClosed (connection, eventData)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionClosed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="eventData">Contextual information about the connection.</param>
        <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.Close" /> in an async context.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionClosedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ConnectionClosedAsync (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ConnectionClosedAsync(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionClosedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionClosedAsync (connection As DbConnection, eventData As ConnectionEndEventData) As Task" />
      <MemberSignature Language="F#" Value="abstract member ConnectionClosedAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData -&gt; System.Threading.Tasks.Task&#xA;override this.ConnectionClosedAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData -&gt; System.Threading.Tasks.Task" Usage="dbConnectionInterceptor.ConnectionClosedAsync (connection, eventData)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionClosedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="eventData">Contextual information about the connection.</param>
        <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.CloseAsync" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionClosing">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult ConnectionClosing (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult ConnectionClosing(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionClosing(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionClosing (connection As DbConnection, eventData As ConnectionEventData, result As InterceptionResult) As InterceptionResult" />
      <MemberSignature Language="F#" Value="abstract member ConnectionClosing : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&#xA;override this.ConnectionClosing : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" Usage="dbConnectionInterceptor.ConnectionClosing (connection, eventData, result)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionClosing(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="eventData">Contextual information about the connection.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.Close" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionClosingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; ConnectionClosingAsync (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; ConnectionClosingAsync(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionClosingAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionClosingAsync (connection As DbConnection, eventData As ConnectionEventData, result As InterceptionResult) As Task(Of InterceptionResult)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member ConnectionClosingAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;&#xA;override this.ConnectionClosingAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;" Usage="dbConnectionInterceptor.ConnectionClosingAsync (connection, eventData, result)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; ConnectionClosingAsync (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; ConnectionClosingAsync(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionClosingAsync (connection As DbConnection, eventData As ConnectionEventData, result As InterceptionResult) As ValueTask(Of InterceptionResult)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ConnectionClosingAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;&#xA;override this.ConnectionClosingAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;" Usage="dbConnectionInterceptor.ConnectionClosingAsync (connection, eventData, result)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionClosingAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="eventData">Contextual information about the connection.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.CloseAsync" /> in an async context.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionCreated">
      <MemberSignature Language="C#" Value="public virtual System.Data.Common.DbConnection ConnectionCreated (Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatedEventData eventData, System.Data.Common.DbConnection result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Common.DbConnection ConnectionCreated(class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatedEventData eventData, class System.Data.Common.DbConnection result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionCreated(Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatedEventData,System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionCreated (eventData As ConnectionCreatedEventData, result As DbConnection) As DbConnection" />
      <MemberSignature Language="F#" Value="abstract member ConnectionCreated : Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatedEventData * System.Data.Common.DbConnection -&gt; System.Data.Common.DbConnection&#xA;override this.ConnectionCreated : Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatedEventData * System.Data.Common.DbConnection -&gt; System.Data.Common.DbConnection" Usage="dbConnectionInterceptor.ConnectionCreated (eventData, result)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionCreated(Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatedEventData,System.Data.Common.DbConnection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatedEventData" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="result" Type="System.Data.Common.DbConnection" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="eventData">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionCreating">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbConnection&gt; ConnectionCreating (Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatingEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbConnection&gt; result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;class System.Data.Common.DbConnection&gt; ConnectionCreating(class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatingEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;class System.Data.Common.DbConnection&gt; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionCreating(Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbConnection})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionCreating (eventData As ConnectionCreatingEventData, result As InterceptionResult(Of DbConnection)) As InterceptionResult(Of DbConnection)" />
      <MemberSignature Language="F#" Value="abstract member ConnectionCreating : Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatingEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbConnection&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbConnection&gt;&#xA;override this.ConnectionCreating : Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatingEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbConnection&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbConnection&gt;" Usage="dbConnectionInterceptor.ConnectionCreating (eventData, result)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionCreating(Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbConnection})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbConnection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionCreatingEventData" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;System.Data.Common.DbConnection&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="eventData">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionDisposed">
      <MemberSignature Language="C#" Value="public virtual void ConnectionDisposed (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionDisposed(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionDisposed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionDisposed (connection As DbConnection, eventData As ConnectionEndEventData)" />
      <MemberSignature Language="F#" Value="abstract member ConnectionDisposed : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData -&gt; unit&#xA;override this.ConnectionDisposed : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData -&gt; unit" Usage="dbConnectionInterceptor.ConnectionDisposed (connection, eventData)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionDisposed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="eventData">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionDisposedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ConnectionDisposedAsync (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ConnectionDisposedAsync(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionDisposedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionDisposedAsync (connection As DbConnection, eventData As ConnectionEndEventData) As Task" />
      <MemberSignature Language="F#" Value="abstract member ConnectionDisposedAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData -&gt; System.Threading.Tasks.Task&#xA;override this.ConnectionDisposedAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData -&gt; System.Threading.Tasks.Task" Usage="dbConnectionInterceptor.ConnectionDisposedAsync (connection, eventData)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionDisposedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="eventData">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionDisposing">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult ConnectionDisposing (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult ConnectionDisposing(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionDisposing(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionDisposing (connection As DbConnection, eventData As ConnectionEventData, result As InterceptionResult) As InterceptionResult" />
      <MemberSignature Language="F#" Value="abstract member ConnectionDisposing : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&#xA;override this.ConnectionDisposing : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" Usage="dbConnectionInterceptor.ConnectionDisposing (connection, eventData, result)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionDisposing(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="eventData">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionDisposingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; ConnectionDisposingAsync (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; ConnectionDisposingAsync(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionDisposingAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionDisposingAsync (connection As DbConnection, eventData As ConnectionEventData, result As InterceptionResult) As ValueTask(Of InterceptionResult)" />
      <MemberSignature Language="F#" Value="abstract member ConnectionDisposingAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;&#xA;override this.ConnectionDisposingAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;" Usage="dbConnectionInterceptor.ConnectionDisposingAsync (connection, eventData, result)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionDisposingAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="eventData">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionFailed">
      <MemberSignature Language="C#" Value="public virtual void ConnectionFailed (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionFailed(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionFailed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionFailed (connection As DbConnection, eventData As ConnectionErrorEventData)" />
      <MemberSignature Language="F#" Value="abstract member ConnectionFailed : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData -&gt; unit&#xA;override this.ConnectionFailed : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData -&gt; unit" Usage="dbConnectionInterceptor.ConnectionFailed (connection, eventData)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionFailed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="eventData">Contextual information about the connection.</param>
        <summary>
                Called when opening of a connection has failed with an exception.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionFailedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ConnectionFailedAsync (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData eventData, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ConnectionFailedAsync(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData eventData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionFailedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionFailedAsync (connection As DbConnection, eventData As ConnectionErrorEventData, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member ConnectionFailedAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.ConnectionFailedAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="dbConnectionInterceptor.ConnectionFailedAsync (connection, eventData, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionFailedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="eventData">Contextual information about the connection.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called when opening of a connection has failed with an exception.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionOpened">
      <MemberSignature Language="C#" Value="public virtual void ConnectionOpened (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionOpened(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionOpened(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConnectionOpened (connection As DbConnection, eventData As ConnectionEndEventData)" />
      <MemberSignature Language="F#" Value="abstract member ConnectionOpened : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData -&gt; unit&#xA;override this.ConnectionOpened : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData -&gt; unit" Usage="dbConnectionInterceptor.ConnectionOpened (connection, eventData)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionOpened(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="eventData">Contextual information about the connection.</param>
        <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.Open" />.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionOpenedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ConnectionOpenedAsync (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ConnectionOpenedAsync(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData eventData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionOpenedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionOpenedAsync (connection As DbConnection, eventData As ConnectionEndEventData, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member ConnectionOpenedAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.ConnectionOpenedAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="dbConnectionInterceptor.ConnectionOpenedAsync (connection, eventData, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionOpenedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="eventData">Contextual information about the connection.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.OpenAsync" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionOpening">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult ConnectionOpening (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult ConnectionOpening(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionOpening(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionOpening (connection As DbConnection, eventData As ConnectionEventData, result As InterceptionResult) As InterceptionResult" />
      <MemberSignature Language="F#" Value="abstract member ConnectionOpening : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&#xA;override this.ConnectionOpening : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" Usage="dbConnectionInterceptor.ConnectionOpening (connection, eventData, result)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionOpening(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="eventData">Contextual information about the connection.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.Open" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConnectionOpeningAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; ConnectionOpeningAsync (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; ConnectionOpeningAsync(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionOpeningAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionOpeningAsync (connection As DbConnection, eventData As ConnectionEventData, result As InterceptionResult, Optional cancellationToken As CancellationToken = Nothing) As Task(Of InterceptionResult)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member ConnectionOpeningAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;&#xA;override this.ConnectionOpeningAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;" Usage="dbConnectionInterceptor.ConnectionOpeningAsync (connection, eventData, result, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; ConnectionOpeningAsync (System.Data.Common.DbConnection connection, Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt; ConnectionOpeningAsync(class System.Data.Common.DbConnection connection, class Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData eventData, valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult result, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConnectionOpeningAsync (connection As DbConnection, eventData As ConnectionEventData, result As InterceptionResult, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of InterceptionResult)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ConnectionOpeningAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;&#xA;override this.ConnectionOpeningAsync : System.Data.Common.DbConnection * Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData * Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;" Usage="dbConnectionInterceptor.ConnectionOpeningAsync (connection, eventData, result, cancellationToken)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionOpeningAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData" />
        <Parameter Name="result" Type="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="eventData">Contextual information about the connection.</param>
        <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.OpenAsync" />.
            </summary>
        <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
