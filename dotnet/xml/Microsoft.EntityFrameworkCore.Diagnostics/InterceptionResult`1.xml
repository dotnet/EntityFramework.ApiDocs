<Type Name="InterceptionResult&lt;TResult&gt;" FullName="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;TResult&gt;">
  <TypeSignature Language="C#" Value="public readonly struct InterceptionResult&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit InterceptionResult`1&lt;TResult&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure InterceptionResult(Of TResult)" />
  <TypeSignature Language="F#" Value="type InterceptionResult&lt;'Result&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-3.0;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TResult">The new result to use.</typeparam>
    <summary>
                Represents a result from an <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> such as an <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ISaveChangesInterceptor" /> to allow
                suppression of the normal operation being intercepted.
            </summary>
    <remarks>
      <para>
                    A value of this type is passed to all interceptor methods that are called before the operation
                    being intercepted is executed.
                    Typically the interceptor should return the value passed in.
                    However, creating a result with <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" /> causes the operation being
                    intercepted to be suppressed; that is, the operation is not executed.
                    The value in the result is then used as a substitute return value for the operation that was suppressed.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-interceptors">EF Core interceptors</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HasResult">
      <MemberSignature Language="C#" Value="public bool HasResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasResult" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasResult As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasResult : bool" Usage="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;'Result&gt;.HasResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                If true, then interception is suppressed, and <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> contains the result to use.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public TResult Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TResult Result" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As TResult" />
      <MemberSignature Language="F#" Value="member this.Result : 'Result" Usage="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;'Result&gt;.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The result to use.
            </summary>
        <value>To be added.</value>
        <remarks>
                The property can only be accessed if <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true. The concept here
                is the same as <see cref="P:System.Nullable`1.Value" /> and <see cref="P:System.Nullable`1.HasValue" /></remarks>
        <exception cref="T:System.InvalidOperationException">when <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> is <see langword="false" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SuppressWithResult">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;TResult&gt; SuppressWithResult (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1&lt;!TResult&gt; SuppressWithResult(!TResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SuppressWithResult (result As TResult) As InterceptionResult(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SuppressWithResult : 'Result -&gt; Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;'Result&gt;.SuppressWithResult result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <param name="result">The result to use.</param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1" /> instance indicating that
                execution should be suppressed and the given result should be used instead.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
