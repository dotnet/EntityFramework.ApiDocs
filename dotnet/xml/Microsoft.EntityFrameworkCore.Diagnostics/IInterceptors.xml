<Type Name="IInterceptors" FullName="Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors">
  <TypeSignature Language="C#" Value="public interface IInterceptors" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInterceptors" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInterceptors" />
  <TypeSignature Language="F#" Value="type IInterceptors = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IInterceptors" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    A service that resolves a single <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> from all those registered on
                    the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> or in the internal service provider.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceLifetime" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-interceptors">EF Core interceptors</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Aggregate&lt;TInterceptor&gt;">
      <MemberSignature Language="C#" Value="public TInterceptor Aggregate&lt;TInterceptor&gt; () where TInterceptor : class, Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TInterceptor Aggregate&lt;class (class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor) TInterceptor&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors.Aggregate``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate(Of TInterceptor As {Class, IInterceptor}) () As TInterceptor" />
      <MemberSignature Language="F#" Value="abstract member Aggregate : unit -&gt; 'Interceptor (requires 'Interceptor : null and 'Interceptor :&gt; Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor)" Usage="iInterceptors.Aggregate " />
      <MemberSignature Language="C#" Value="public TInterceptor? Aggregate&lt;TInterceptor&gt; () where TInterceptor : class, Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TInterceptor</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInterceptor">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInterceptor">The interceptor type to resolve.</typeparam>
        <summary>
                Resolves a single <typeparamref name="TInterceptor" /> from all those registered on
                the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> or in the internal service provider.
            </summary>
        <returns>The resolved interceptor, which may be <see langword="null" /> if none are registered.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
