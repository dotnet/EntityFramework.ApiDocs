<Type Name="IncludeExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IncludeExpressionVisitor">
  <TypeSignature Language="C#" Value="public class IncludeExpressionVisitor : Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IncludeExpressionVisitor extends Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IncludeExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class IncludeExpressionVisitor&#xA;Inherits ExpressionVisitorBase" />
  <TypeSignature Language="F#" Value="type IncludeExpressionVisitor = class&#xA;    inherit ExpressionVisitorBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.ExpressionVisitorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IncludeExpressionVisitor (Microsoft.EntityFrameworkCore.Query.Expressions.ISelectExpressionFactory selectExpressionFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ICompositePredicateExpressionVisitorFactory compositePredicateExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory materializerFactory, Microsoft.EntityFrameworkCore.Query.Internal.IShaperCommandContextFactory shaperCommandContextFactory, Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider relationalAnnotationProvider, Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory querySqlGeneratorFactory, Remotion.Linq.Clauses.IQuerySource querySource, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; navigationPath, Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext, System.Collections.Generic.IReadOnlyList&lt;int&gt; queryIndexes, bool querySourceRequiresTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.Expressions.ISelectExpressionFactory selectExpressionFactory, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ICompositePredicateExpressionVisitorFactory compositePredicateExpressionVisitorFactory, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory materializerFactory, class Microsoft.EntityFrameworkCore.Query.Internal.IShaperCommandContextFactory shaperCommandContextFactory, class Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider relationalAnnotationProvider, class Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory querySqlGeneratorFactory, class Remotion.Linq.Clauses.IQuerySource querySource, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; navigationPath, class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext, class System.Collections.Generic.IReadOnlyList`1&lt;int32&gt; queryIndexes, bool querySourceRequiresTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IncludeExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.Expressions.ISelectExpressionFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ICompositePredicateExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory,Microsoft.EntityFrameworkCore.Query.Internal.IShaperCommandContextFactory,Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider,Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory,Remotion.Linq.Clauses.IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation},Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext,System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (selectExpressionFactory As ISelectExpressionFactory, compositePredicateExpressionVisitorFactory As ICompositePredicateExpressionVisitorFactory, materializerFactory As IMaterializerFactory, shaperCommandContextFactory As IShaperCommandContextFactory, relationalAnnotationProvider As IRelationalAnnotationProvider, querySqlGeneratorFactory As IQuerySqlGeneratorFactory, querySource As IQuerySource, navigationPath As IReadOnlyList(Of INavigation), queryCompilationContext As RelationalQueryCompilationContext, queryIndexes As IReadOnlyList(Of Integer), querySourceRequiresTracking As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IncludeExpressionVisitor : Microsoft.EntityFrameworkCore.Query.Expressions.ISelectExpressionFactory * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ICompositePredicateExpressionVisitorFactory * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory * Microsoft.EntityFrameworkCore.Query.Internal.IShaperCommandContextFactory * Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider * Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory * Remotion.Linq.Clauses.IQuerySource * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt; * Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext * System.Collections.Generic.IReadOnlyList&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IncludeExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IncludeExpressionVisitor (selectExpressionFactory, compositePredicateExpressionVisitorFactory, materializerFactory, shaperCommandContextFactory, relationalAnnotationProvider, querySqlGeneratorFactory, querySource, navigationPath, queryCompilationContext, queryIndexes, querySourceRequiresTracking)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selectExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.Expressions.ISelectExpressionFactory" />
        <Parameter Name="compositePredicateExpressionVisitorFactory" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ICompositePredicateExpressionVisitorFactory" />
        <Parameter Name="materializerFactory" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory" />
        <Parameter Name="shaperCommandContextFactory" Type="Microsoft.EntityFrameworkCore.Query.Internal.IShaperCommandContextFactory" />
        <Parameter Name="relationalAnnotationProvider" Type="Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider" />
        <Parameter Name="querySqlGeneratorFactory" Type="Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
        <Parameter Name="navigationPath" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.INavigation&gt;" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext" />
        <Parameter Name="queryIndexes" Type="System.Collections.Generic.IReadOnlyList&lt;System.Int32&gt;" />
        <Parameter Name="querySourceRequiresTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selectExpressionFactory">To be added.</param>
        <param name="compositePredicateExpressionVisitorFactory">To be added.</param>
        <param name="materializerFactory">To be added.</param>
        <param name="shaperCommandContextFactory">To be added.</param>
        <param name="relationalAnnotationProvider">To be added.</param>
        <param name="querySqlGeneratorFactory">To be added.</param>
        <param name="querySource">To be added.</param>
        <param name="navigationPath">To be added.</param>
        <param name="queryCompilationContext">To be added.</param>
        <param name="queryIndexes">To be added.</param>
        <param name="querySourceRequiresTracking">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodCall">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IncludeExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMethodCall (methodCallExpression As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="includeExpressionVisitor.VisitMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
