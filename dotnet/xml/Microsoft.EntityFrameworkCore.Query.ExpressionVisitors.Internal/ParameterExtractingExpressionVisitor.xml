<Type Name="ParameterExtractingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class ParameterExtractingExpressionVisitor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParameterExtractingExpressionVisitor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class ParameterExtractingExpressionVisitor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type ParameterExtractingExpressionVisitor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParameterExtractingExpressionVisitor (Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter evaluatableExpressionFilter, Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues parameterValues, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger, bool parameterize, bool generateContextAccessors = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter evaluatableExpressionFilter, class Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues parameterValues, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger, bool parameterize, bool generateContextAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.#ctor(Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter,Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (evaluatableExpressionFilter As IEvaluatableExpressionFilter, parameterValues As IParameterValues, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query), parameterize As Boolean, Optional generateContextAccessors As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor : Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter * Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * bool * bool -&gt; Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor (evaluatableExpressionFilter, parameterValues, logger, parameterize, generateContextAccessors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="evaluatableExpressionFilter" Type="Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter" Index="0" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="parameterValues" Type="Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues" Index="1" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" Index="2" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="parameterize" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="generateContextAccessors" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="evaluatableExpressionFilter">To be added.</param>
        <param name="parameterValues">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="parameterize">To be added.</param>
        <param name="generateContextAccessors">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParameterExtractingExpressionVisitor (Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter evaluatableExpressionFilter, Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues parameterValues, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger, Microsoft.EntityFrameworkCore.DbContext context, bool parameterize, bool generateContextAccessors = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter evaluatableExpressionFilter, class Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues parameterValues, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger, class Microsoft.EntityFrameworkCore.DbContext context, bool parameterize, bool generateContextAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.#ctor(Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter,Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.DbContext,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (evaluatableExpressionFilter As IEvaluatableExpressionFilter, parameterValues As IParameterValues, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query), context As DbContext, parameterize As Boolean, Optional generateContextAccessors As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor : Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter * Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Microsoft.EntityFrameworkCore.DbContext * bool * bool -&gt; Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor (evaluatableExpressionFilter, parameterValues, logger, context, parameterize, generateContextAccessors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="evaluatableExpressionFilter" Type="Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter" Index="0" FrameworkAlternate="efcore-2.2;efcore-2.1" />
        <Parameter Name="parameterValues" Type="Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues" Index="1" FrameworkAlternate="efcore-2.2;efcore-2.1" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" Index="2" FrameworkAlternate="efcore-2.2;efcore-2.1" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="3" FrameworkAlternate="efcore-2.2;efcore-2.1" />
        <Parameter Name="parameterize" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-2.2;efcore-2.1" />
        <Parameter Name="generateContextAccessors" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-2.2;efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="evaluatableExpressionFilter">To be added.</param>
        <param name="parameterValues">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="context">To be added.</param>
        <param name="parameterize">To be added.</param>
        <param name="generateContextAccessors">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public static object Evaluate (System.Linq.Expressions.Expression expression, out string parameterName);" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Evaluate(class System.Linq.Expressions.Expression expression, [out] string&amp; parameterName) cil managed" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.Evaluate(System.Linq.Expressions.Expression,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Evaluate (expression As Expression, ByRef parameterName As String) As Object" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="F#" Value="static member Evaluate : System.Linq.Expressions.Expression * string -&gt; obj" Usage="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.Evaluate (expression, parameterName)" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="C#" Value="public object Evaluate (System.Linq.Expressions.Expression expression, out string parameterName);" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Evaluate(class System.Linq.Expressions.Expression expression, [out] string&amp; parameterName) cil managed" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate (expression As Expression, ByRef parameterName As String) As Object" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="F#" Value="member this.Evaluate : System.Linq.Expressions.Expression * string -&gt; obj" Usage="parameterExtractingExpressionVisitor.Evaluate (expression, parameterName)" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="C#" Value="public virtual object Evaluate (System.Linq.Expressions.Expression expression, out string parameterName);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate(class System.Linq.Expressions.Expression expression, [out] string&amp; parameterName) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Evaluate (expression As Expression, ByRef parameterName As String) As Object" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.Linq.Expressions.Expression * string -&gt; obj&#xA;override this.Evaluate : System.Linq.Expressions.Expression * string -&gt; obj" Usage="parameterExtractingExpressionVisitor.Evaluate (expression, parameterName)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameterName" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="parameterName">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.ExtractParameters(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExtractParameters (expression As Expression) As Expression" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="F#" Value="member this.ExtractParameters : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.ExtractParameters expression" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtractParameters (expression As Expression) As Expression" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member ExtractParameters : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractParameters : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.ExtractParameters expression" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression expression, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter evaluatableExpressionFilter, Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger logger);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression expression, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, class Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter evaluatableExpressionFilter, class Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryContext,Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter,Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractParameters (expression As Expression, queryContext As QueryContext, evaluatableExpressionFilter As IEvaluatableExpressionFilter, logger As ISensitiveDataLogger) As Expression" />
      <MemberSignature Language="F#" Value="static member ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.QueryContext * Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter * Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.ExtractParameters (expression, queryContext, evaluatableExpressionFilter, logger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="evaluatableExpressionFilter" Type="Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="evaluatableExpressionFilter">To be added.</param>
        <param name="logger">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBinary (System.Linq.Expressions.BinaryExpression binaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBinary(class System.Linq.Expressions.BinaryExpression binaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitBinary (binaryExpression As BinaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.VisitBinary binaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryExpression" Type="System.Linq.Expressions.BinaryExpression" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="binaryExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditional">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConditional (System.Linq.Expressions.ConditionalExpression conditionalExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConditional(class System.Linq.Expressions.ConditionalExpression conditionalExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConditional (conditionalExpression As ConditionalExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitConditional : System.Linq.Expressions.ConditionalExpression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.VisitConditional conditionalExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditionalExpression" Type="System.Linq.Expressions.ConditionalExpression" Index="0" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="conditionalExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstant">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConstant (System.Linq.Expressions.ConstantExpression constantExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConstant(class System.Linq.Expressions.ConstantExpression constantExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConstant (constantExpression As ConstantExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitConstant : System.Linq.Expressions.ConstantExpression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.VisitConstant constantExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constantExpression" Type="System.Linq.Expressions.ConstantExpression" />
      </Parameters>
      <Docs>
        <param name="constantExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLambda&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLambda&lt;T&gt; (System.Linq.Expressions.Expression&lt;T&gt; node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLambda&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;!!T&gt; node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLambda(Of T) (node As Expression(Of T)) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLambda : System.Linq.Expressions.Expression&lt;'T&gt; -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.VisitLambda node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="node">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMember">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMember (System.Linq.Expressions.MemberExpression memberExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMember(class System.Linq.Expressions.MemberExpression memberExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMember (memberExpression As MemberExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMember : System.Linq.Expressions.MemberExpression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.VisitMember memberExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" />
      </Parameters>
      <Docs>
        <param name="memberExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodCall">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMethodCall (methodCallExpression As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.VisitMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNew">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitNew (System.Linq.Expressions.NewExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitNew(class System.Linq.Expressions.NewExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitNew (node As NewExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitNew : System.Linq.Expressions.NewExpression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.VisitNew node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.NewExpression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUnary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitUnary (System.Linq.Expressions.UnaryExpression unaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitUnary(class System.Linq.Expressions.UnaryExpression unaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ParameterExtractingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitUnary (unaryExpression As UnaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitUnary : System.Linq.Expressions.UnaryExpression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.VisitUnary unaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryExpression" Type="System.Linq.Expressions.UnaryExpression" />
      </Parameters>
      <Docs>
        <param name="unaryExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
