<Type Name="InMemoryQueryExpression" FullName="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression">
  <TypeSignature Language="C#" Value="public class InMemoryQueryExpression : System.Linq.Expressions.Expression, Microsoft.EntityFrameworkCore.Query.IPrintableExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InMemoryQueryExpression extends System.Linq.Expressions.Expression implements class Microsoft.EntityFrameworkCore.Query.IPrintableExpression" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class InMemoryQueryExpression&#xA;Inherits Expression&#xA;Implements IPrintableExpression" />
  <TypeSignature Language="F#" Value="type InMemoryQueryExpression = class&#xA;    inherit Expression&#xA;    interface IPrintableExpression" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IPrintableExpression</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InMemoryQueryExpression (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (entityType As IEntityType)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression" Usage="new Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression entityType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInnerJoin">
      <MemberSignature Language="C#" Value="public virtual void AddInnerJoin (Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, Type transparentIdentifierType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddInnerJoin(class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddInnerJoin (innerQueryExpression As InMemoryQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="abstract member AddInnerJoin : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; unit&#xA;override this.AddInnerJoin : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; unit" Usage="inMemoryQueryExpression.AddInnerJoin (innerQueryExpression, outerKeySelector, innerKeySelector, transparentIdentifierType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerQueryExpression" Type="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="innerQueryExpression">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <param name="transparentIdentifierType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInnerJoin">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression AddInnerJoin (Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.Expression outerShaperExpression, System.Linq.Expressions.Expression innerShaperExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression AddInnerJoin(class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.Expression outerShaperExpression, class System.Linq.Expressions.Expression innerShaperExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddInnerJoin (innerQueryExpression As InMemoryQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, outerShaperExpression As Expression, innerShaperExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member AddInnerJoin : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.AddInnerJoin : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="inMemoryQueryExpression.AddInnerJoin (innerQueryExpression, outerKeySelector, innerKeySelector, outerShaperExpression, innerShaperExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerQueryExpression" Type="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="outerShaperExpression" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="innerShaperExpression" Type="System.Linq.Expressions.Expression" Index="4" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerQueryExpression">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <param name="outerShaperExpression">To be added.</param>
        <param name="innerShaperExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLeftJoin">
      <MemberSignature Language="C#" Value="public virtual void AddLeftJoin (Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, Type transparentIdentifierType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLeftJoin(class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.AddLeftJoin(Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddLeftJoin (innerQueryExpression As InMemoryQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="abstract member AddLeftJoin : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; unit&#xA;override this.AddLeftJoin : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; unit" Usage="inMemoryQueryExpression.AddLeftJoin (innerQueryExpression, outerKeySelector, innerKeySelector, transparentIdentifierType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerQueryExpression" Type="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="innerQueryExpression">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <param name="transparentIdentifierType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLeftJoin">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression AddLeftJoin (Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.Expression outerShaperExpression, System.Linq.Expressions.Expression innerShaperExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression AddLeftJoin(class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.Expression outerShaperExpression, class System.Linq.Expressions.Expression innerShaperExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.AddLeftJoin(Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddLeftJoin (innerQueryExpression As InMemoryQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, outerShaperExpression As Expression, innerShaperExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member AddLeftJoin : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.AddLeftJoin : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="inMemoryQueryExpression.AddLeftJoin (innerQueryExpression, outerKeySelector, innerKeySelector, outerShaperExpression, innerShaperExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerQueryExpression" Type="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="outerShaperExpression" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="innerShaperExpression" Type="System.Linq.Expressions.Expression" Index="4" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerQueryExpression">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <param name="outerShaperExpression">To be added.</param>
        <param name="innerShaperExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNavigationToWeakEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.EntityShaperExpression AddNavigationToWeakEntityType (Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression entityProjectionExpression, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.EntityShaperExpression AddNavigationToWeakEntityType(class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression entityProjectionExpression, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.AddNavigationToWeakEntityType(Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddNavigationToWeakEntityType (entityProjectionExpression As EntityProjectionExpression, navigation As INavigation, innerQueryExpression As InMemoryQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression) As EntityShaperExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member AddNavigationToWeakEntityType : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression * Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.EntityShaperExpression&#xA;override this.AddNavigationToWeakEntityType : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression * Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.EntityShaperExpression" Usage="inMemoryQueryExpression.AddNavigationToWeakEntityType (entityProjectionExpression, navigation, innerQueryExpression, outerKeySelector, innerKeySelector)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression AddNavigationToWeakEntityType (Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression entityProjectionExpression, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression AddNavigationToWeakEntityType(class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression entityProjectionExpression, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddNavigationToWeakEntityType (entityProjectionExpression As EntityProjectionExpression, navigation As INavigation, innerQueryExpression As InMemoryQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression) As StructuralTypeShaperExpression" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member AddNavigationToWeakEntityType : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression * Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression&#xA;override this.AddNavigationToWeakEntityType : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression * Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="inMemoryQueryExpression.AddNavigationToWeakEntityType (entityProjectionExpression, navigation, innerQueryExpression, outerKeySelector, innerKeySelector)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0">Microsoft.EntityFrameworkCore.Query.EntityShaperExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityProjectionExpression" Type="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
        <Parameter Name="innerQueryExpression" Type="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="entityProjectionExpression">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="innerQueryExpression">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSelectMany">
      <MemberSignature Language="C#" Value="public virtual void AddSelectMany (Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, Type transparentIdentifierType, bool innerNullable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddSelectMany(class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, class System.Type transparentIdentifierType, bool innerNullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.AddSelectMany(Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddSelectMany (innerQueryExpression As InMemoryQueryExpression, transparentIdentifierType As Type, innerNullable As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member AddSelectMany : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * Type * bool -&gt; unit&#xA;override this.AddSelectMany : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * Type * bool -&gt; unit" Usage="inMemoryQueryExpression.AddSelectMany (innerQueryExpression, transparentIdentifierType, innerNullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerQueryExpression" Type="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="innerNullable" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="innerQueryExpression">To be added.</param>
        <param name="transparentIdentifierType">To be added.</param>
        <param name="innerNullable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSelectMany">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression AddSelectMany (Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, System.Linq.Expressions.Expression outerShaperExpression, System.Linq.Expressions.Expression innerShaperExpression, bool innerNullable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression AddSelectMany(class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression innerQueryExpression, class System.Linq.Expressions.Expression outerShaperExpression, class System.Linq.Expressions.Expression innerShaperExpression, bool innerNullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.AddSelectMany(Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddSelectMany (innerQueryExpression As InMemoryQueryExpression, outerShaperExpression As Expression, innerShaperExpression As Expression, innerNullable As Boolean) As Expression" />
      <MemberSignature Language="F#" Value="abstract member AddSelectMany : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool -&gt; System.Linq.Expressions.Expression&#xA;override this.AddSelectMany : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool -&gt; System.Linq.Expressions.Expression" Usage="inMemoryQueryExpression.AddSelectMany (innerQueryExpression, outerShaperExpression, innerShaperExpression, innerNullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerQueryExpression" Type="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="outerShaperExpression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="innerShaperExpression" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="innerNullable" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerQueryExpression">To be added.</param>
        <param name="outerShaperExpression">To be added.</param>
        <param name="innerShaperExpression">To be added.</param>
        <param name="innerNullable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSubqueryProjection">
      <MemberSignature Language="C#" Value="public virtual int AddSubqueryProjection (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression, out System.Linq.Expressions.Expression innerShaper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddSubqueryProjection(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression, [out] class System.Linq.Expressions.Expression&amp; innerShaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.AddSubqueryProjection(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddSubqueryProjection (shapedQueryExpression As ShapedQueryExpression, ByRef innerShaper As Expression) As Integer" />
      <MemberSignature Language="F#" Value="abstract member AddSubqueryProjection : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Expression -&gt; int&#xA;override this.AddSubqueryProjection : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Expression -&gt; int" Usage="inMemoryQueryExpression.AddSubqueryProjection (shapedQueryExpression, innerShaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapedQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="innerShaper" Type="System.Linq.Expressions.Expression" RefType="out" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="shapedQueryExpression">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,int&gt; AddToProjection (Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression entityProjectionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, int32&gt; AddToProjection(class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression entityProjectionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.AddToProjection(Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddToProjection (entityProjectionExpression As EntityProjectionExpression) As IDictionary(Of IProperty, Integer)" />
      <MemberSignature Language="F#" Value="abstract member AddToProjection : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression -&gt; System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, int&gt;&#xA;override this.AddToProjection : Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression -&gt; System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, int&gt;" Usage="inMemoryQueryExpression.AddToProjection entityProjectionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityProjectionExpression" Type="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityProjectionExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public virtual int AddToProjection (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddToProjection(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.AddToProjection(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddToProjection (expression As Expression) As Integer" />
      <MemberSignature Language="F#" Value="abstract member AddToProjection : System.Linq.Expressions.Expression -&gt; int&#xA;override this.AddToProjection : System.Linq.Expressions.Expression -&gt; int" Usage="inMemoryQueryExpression.AddToProjection expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDefaultIfEmpty">
      <MemberSignature Language="C#" Value="public virtual void ApplyDefaultIfEmpty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDefaultIfEmpty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ApplyDefaultIfEmpty" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ApplyDefaultIfEmpty ()" />
      <MemberSignature Language="F#" Value="abstract member ApplyDefaultIfEmpty : unit -&gt; unit&#xA;override this.ApplyDefaultIfEmpty : unit -&gt; unit" Usage="inMemoryQueryExpression.ApplyDefaultIfEmpty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDistinct">
      <MemberSignature Language="C#" Value="public virtual void ApplyDistinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDistinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ApplyDistinct" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ApplyDistinct ()" />
      <MemberSignature Language="F#" Value="abstract member ApplyDistinct : unit -&gt; unit&#xA;override this.ApplyDistinct : unit -&gt; unit" Usage="inMemoryQueryExpression.ApplyDistinct " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyGrouping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryGroupByShaperExpression ApplyGrouping (System.Linq.Expressions.Expression groupingKey, System.Linq.Expressions.Expression shaperExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryGroupByShaperExpression ApplyGrouping(class System.Linq.Expressions.Expression groupingKey, class System.Linq.Expressions.Expression shaperExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ApplyGrouping(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ApplyGrouping (groupingKey As Expression, shaperExpression As Expression) As InMemoryGroupByShaperExpression" />
      <MemberSignature Language="F#" Value="abstract member ApplyGrouping : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryGroupByShaperExpression&#xA;override this.ApplyGrouping : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryGroupByShaperExpression" Usage="inMemoryQueryExpression.ApplyGrouping (groupingKey, shaperExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryGroupByShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupingKey" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="shaperExpression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="groupingKey">To be added.</param>
        <param name="shaperExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyGrouping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression ApplyGrouping (System.Linq.Expressions.Expression groupingKey, System.Linq.Expressions.Expression shaperExpression, bool defaultElementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression ApplyGrouping(class System.Linq.Expressions.Expression groupingKey, class System.Linq.Expressions.Expression shaperExpression, bool defaultElementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ApplyGrouping(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ApplyGrouping (groupingKey As Expression, shaperExpression As Expression, defaultElementSelector As Boolean) As GroupByShaperExpression" />
      <MemberSignature Language="F#" Value="abstract member ApplyGrouping : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool -&gt; Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression&#xA;override this.ApplyGrouping : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool -&gt; Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression" Usage="inMemoryQueryExpression.ApplyGrouping (groupingKey, shaperExpression, defaultElementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupingKey" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="shaperExpression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="defaultElementSelector" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="groupingKey">To be added.</param>
        <param name="shaperExpression">To be added.</param>
        <param name="defaultElementSelector">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyProjection">
      <MemberSignature Language="C#" Value="public virtual void ApplyProjection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyProjection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ApplyProjection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ApplyProjection ()" />
      <MemberSignature Language="F#" Value="abstract member ApplyProjection : unit -&gt; unit&#xA;override this.ApplyProjection : unit -&gt; unit" Usage="inMemoryQueryExpression.ApplyProjection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplySetOperation">
      <MemberSignature Language="C#" Value="public virtual void ApplySetOperation (System.Reflection.MethodInfo setOperationMethodInfo, Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression source2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplySetOperation(class System.Reflection.MethodInfo setOperationMethodInfo, class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ApplySetOperation(System.Reflection.MethodInfo,Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ApplySetOperation (setOperationMethodInfo As MethodInfo, source2 As InMemoryQueryExpression)" />
      <MemberSignature Language="F#" Value="abstract member ApplySetOperation : System.Reflection.MethodInfo * Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression -&gt; unit&#xA;override this.ApplySetOperation : System.Reflection.MethodInfo * Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression -&gt; unit" Usage="inMemoryQueryExpression.ApplySetOperation (setOperationMethodInfo, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="setOperationMethodInfo" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="setOperationMethodInfo">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression Clone (System.Linq.Expressions.Expression shaperExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression Clone(class System.Linq.Expressions.Expression shaperExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.Clone(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone (shaperExpression As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member Clone : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression&#xA;override this.Clone : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="inMemoryQueryExpression.Clone shaperExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaperExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="shaperExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToEnumerable">
      <MemberSignature Language="C#" Value="public virtual void ConvertToEnumerable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConvertToEnumerable() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ConvertToEnumerable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConvertToEnumerable ()" />
      <MemberSignature Language="F#" Value="abstract member ConvertToEnumerable : unit -&gt; unit&#xA;override this.ConvertToEnumerable : unit -&gt; unit" Usage="inMemoryQueryExpression.ConvertToEnumerable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToSingleResult">
      <MemberSignature Language="C#" Value="public virtual void ConvertToSingleResult (System.Reflection.MethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConvertToSingleResult(class System.Reflection.MethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ConvertToSingleResult(System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConvertToSingleResult (methodInfo As MethodInfo)" />
      <MemberSignature Language="F#" Value="abstract member ConvertToSingleResult : System.Reflection.MethodInfo -&gt; unit&#xA;override this.ConvertToSingleResult : System.Reflection.MethodInfo -&gt; unit" Usage="inMemoryQueryExpression.ConvertToSingleResult methodInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="methodInfo">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentParameter">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ParameterExpression CurrentParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.ParameterExpression CurrentParameter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.CurrentParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CurrentParameter As ParameterExpression" />
      <MemberSignature Language="F#" Value="member this.CurrentParameter : System.Linq.Expressions.ParameterExpression" Usage="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.CurrentParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMappedProjection">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression GetMappedProjection (Microsoft.EntityFrameworkCore.Query.ProjectionMember member);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetMappedProjection(class Microsoft.EntityFrameworkCore.Query.ProjectionMember member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.GetMappedProjection(Microsoft.EntityFrameworkCore.Query.ProjectionMember)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMappedProjection (member As ProjectionMember) As Expression" />
      <MemberSignature Language="F#" Value="abstract member GetMappedProjection : Microsoft.EntityFrameworkCore.Query.ProjectionMember -&gt; System.Linq.Expressions.Expression&#xA;override this.GetMappedProjection : Microsoft.EntityFrameworkCore.Query.ProjectionMember -&gt; System.Linq.Expressions.Expression" Usage="inMemoryQueryExpression.GetMappedProjection member" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="Microsoft.EntityFrameworkCore.Query.ProjectionMember" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="member">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProjection">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression GetProjection (Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression projectionBindingExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetProjection(class Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression projectionBindingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.GetProjection(Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjection (projectionBindingExpression As ProjectionBindingExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member GetProjection : Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.GetProjection : Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression -&gt; System.Linq.Expressions.Expression" Usage="inMemoryQueryExpression.GetProjection projectionBindingExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionBindingExpression" Type="Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="projectionBindingExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSingleScalarProjection">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression GetSingleScalarProjection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetSingleScalarProjection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.GetSingleScalarProjection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSingleScalarProjection () As Expression" />
      <MemberSignature Language="F#" Value="abstract member GetSingleScalarProjection : unit -&gt; System.Linq.Expressions.Expression&#xA;override this.GetSingleScalarProjection : unit -&gt; System.Linq.Expressions.Expression" Usage="inMemoryQueryExpression.GetSingleScalarProjection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print">
      <MemberSignature Language="C#" Value="void IPrintableExpression.Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Sub Print (expressionPrinter As ExpressionPrinter) Implements IPrintableExpression.Print" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit&#xA;override this.Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="inMemoryQueryExpression.Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public virtual void Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Print (expressionPrinter As ExpressionPrinter)" />
      <MemberSignature Language="F#" Value="abstract member Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit&#xA;override this.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="inMemoryQueryExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Projection">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; Projection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; Projection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.Projection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Projection As IReadOnlyList(Of Expression)" />
      <MemberSignature Language="F#" Value="member this.Projection : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" Usage="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.Projection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushdownIntoSubquery">
      <MemberSignature Language="C#" Value="public virtual void PushdownIntoSubquery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushdownIntoSubquery() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.PushdownIntoSubquery" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PushdownIntoSubquery ()" />
      <MemberSignature Language="F#" Value="abstract member PushdownIntoSubquery : unit -&gt; unit&#xA;override this.PushdownIntoSubquery : unit -&gt; unit" Usage="inMemoryQueryExpression.PushdownIntoSubquery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceProjection">
      <MemberSignature Language="C#" Value="public virtual void ReplaceProjection (System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression&gt; projectionMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceProjection(class System.Collections.Generic.IReadOnlyDictionary`2&lt;class Microsoft.EntityFrameworkCore.Query.ProjectionMember, class System.Linq.Expressions.Expression&gt; projectionMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ReplaceProjection(System.Collections.Generic.IReadOnlyDictionary{Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReplaceProjection (projectionMapping As IReadOnlyDictionary(Of ProjectionMember, Expression))" />
      <MemberSignature Language="F#" Value="abstract member ReplaceProjection : System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember, System.Linq.Expressions.Expression&gt; -&gt; unit&#xA;override this.ReplaceProjection : System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember, System.Linq.Expressions.Expression&gt; -&gt; unit" Usage="inMemoryQueryExpression.ReplaceProjection projectionMapping" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionMapping" Type="System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="projectionMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceProjection">
      <MemberSignature Language="C#" Value="public virtual void ReplaceProjection (System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; clientProjections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceProjection(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; clientProjections) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ReplaceProjection(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReplaceProjection (clientProjections As IReadOnlyList(Of Expression))" />
      <MemberSignature Language="F#" Value="abstract member ReplaceProjection : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; -&gt; unit&#xA;override this.ReplaceProjection : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; -&gt; unit" Usage="inMemoryQueryExpression.ReplaceProjection clientProjections" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientProjections" Type="System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="clientProjections">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceProjectionMapping">
      <MemberSignature Language="C#" Value="public virtual void ReplaceProjectionMapping (System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression&gt; projectionMappings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceProjectionMapping(class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Query.ProjectionMember, class System.Linq.Expressions.Expression&gt; projectionMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ReplaceProjectionMapping(System.Collections.Generic.IDictionary{Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReplaceProjectionMapping (projectionMappings As IDictionary(Of ProjectionMember, Expression))" />
      <MemberSignature Language="F#" Value="abstract member ReplaceProjectionMapping : System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember, System.Linq.Expressions.Expression&gt; -&gt; unit&#xA;override this.ReplaceProjectionMapping : System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember, System.Linq.Expressions.Expression&gt; -&gt; unit" Usage="inMemoryQueryExpression.ReplaceProjectionMapping projectionMappings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionMappings" Type="System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="projectionMappings">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerQueryExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ServerQueryExpression { get; set; }" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression ServerQueryExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ServerQueryExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ServerQueryExpression As Expression" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="member this.ServerQueryExpression : System.Linq.Expressions.Expression with get, set" Usage="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ServerQueryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ServerQueryExpression { get; }" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServerQueryExpression As Expression" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.ServerQueryExpression : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.ServerQueryExpression" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateServerQueryExpression">
      <MemberSignature Language="C#" Value="public virtual void UpdateServerQueryExpression (System.Linq.Expressions.Expression serverQueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateServerQueryExpression(class System.Linq.Expressions.Expression serverQueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryExpression.UpdateServerQueryExpression(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateServerQueryExpression (serverQueryExpression As Expression)" />
      <MemberSignature Language="F#" Value="abstract member UpdateServerQueryExpression : System.Linq.Expressions.Expression -&gt; unit&#xA;override this.UpdateServerQueryExpression : System.Linq.Expressions.Expression -&gt; unit" Usage="inMemoryQueryExpression.UpdateServerQueryExpression serverQueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serverQueryExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="serverQueryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
