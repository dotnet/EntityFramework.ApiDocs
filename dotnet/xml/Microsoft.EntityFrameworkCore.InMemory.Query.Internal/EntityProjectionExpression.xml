<Type Name="EntityProjectionExpression" FullName="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression">
  <TypeSignature Language="C#" Value="public class EntityProjectionExpression : System.Linq.Expressions.Expression, Microsoft.EntityFrameworkCore.Query.IPrintableExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityProjectionExpression extends System.Linq.Expressions.Expression implements class Microsoft.EntityFrameworkCore.Query.IPrintableExpression" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityProjectionExpression&#xA;Inherits Expression&#xA;Implements IPrintableExpression" />
  <TypeSignature Language="F#" Value="type EntityProjectionExpression = class&#xA;    inherit Expression&#xA;    interface IPrintableExpression" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IPrintableExpression</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityProjectionExpression (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.Expression&gt; readExpressionMap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class System.Linq.Expressions.Expression&gt; readExpressionMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (entityType As IEntityType, readExpressionMap As IDictionary(Of IProperty, Expression))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, System.Linq.Expressions.Expression&gt; -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression" Usage="new Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression (entityType, readExpressionMap)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="readExpressionMap" Type="System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.Expression&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="readExpressionMap">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityProjectionExpression (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.MethodCallExpression&gt; readExpressionMap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Collections.Generic.IReadOnlyDictionary`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class System.Linq.Expressions.MethodCallExpression&gt; readExpressionMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IReadOnlyDictionary{Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.MethodCallExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (entityType As IEntityType, readExpressionMap As IReadOnlyDictionary(Of IProperty, MethodCallExpression))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, System.Linq.Expressions.MethodCallExpression&gt; -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression" Usage="new Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression (entityType, readExpressionMap)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="readExpressionMap" Type="System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.MethodCallExpression&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="readExpressionMap">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNavigationBinding">
      <MemberSignature Language="C#" Value="public virtual void AddNavigationBinding (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.Query.EntityShaperExpression entityShaper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddNavigationBinding(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.Query.EntityShaperExpression entityShaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.AddNavigationBinding(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Query.EntityShaperExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddNavigationBinding (navigation As INavigation, entityShaper As EntityShaperExpression)" />
      <MemberSignature Language="F#" Value="abstract member AddNavigationBinding : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Query.EntityShaperExpression -&gt; unit&#xA;override this.AddNavigationBinding : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Query.EntityShaperExpression -&gt; unit" Usage="entityProjectionExpression.AddNavigationBinding (navigation, entityShaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="entityShaper" Type="Microsoft.EntityFrameworkCore.Query.EntityShaperExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="entityShaper">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNavigationBinding">
      <MemberSignature Language="C#" Value="public virtual void AddNavigationBinding (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression shaper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddNavigationBinding(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression shaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.AddNavigationBinding(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddNavigationBinding (navigation As INavigation, shaper As StructuralTypeShaperExpression)" />
      <MemberSignature Language="F#" Value="abstract member AddNavigationBinding : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression -&gt; unit&#xA;override this.AddNavigationBinding : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression -&gt; unit" Usage="entityProjectionExpression.AddNavigationBinding (navigation, shaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="shaper" Type="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="shaper">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.EntityShaperExpression BindNavigation (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.EntityShaperExpression BindNavigation(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.BindNavigation(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindNavigation (navigation As INavigation) As EntityShaperExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member BindNavigation : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; Microsoft.EntityFrameworkCore.Query.EntityShaperExpression&#xA;override this.BindNavigation : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; Microsoft.EntityFrameworkCore.Query.EntityShaperExpression" Usage="entityProjectionExpression.BindNavigation navigation" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.EntityShaperExpression? BindNavigation (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression? BindNavigation (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression BindNavigation(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindNavigation (navigation As INavigation) As StructuralTypeShaperExpression" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member BindNavigation : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression&#xA;override this.BindNavigation : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="entityProjectionExpression.BindNavigation navigation" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0">Microsoft.EntityFrameworkCore.Query.EntityShaperExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindProperty">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindProperty (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindProperty(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.BindProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindProperty (property As IProperty) As Expression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member BindProperty : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; System.Linq.Expressions.Expression&#xA;override this.BindProperty : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; System.Linq.Expressions.Expression" Usage="entityProjectionExpression.BindProperty property" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.MethodCallExpression BindProperty (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.MethodCallExpression BindProperty(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindProperty (property As IProperty) As MethodCallExpression" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member BindProperty : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; System.Linq.Expressions.MethodCallExpression&#xA;override this.BindProperty : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; System.Linq.Expressions.MethodCallExpression" Usage="entityProjectionExpression.BindProperty property" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">System.Linq.Expressions.Expression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As EntityProjectionExpression" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression&#xA;override this.Clone : unit -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression" Usage="entityProjectionExpression.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.EntityType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EntityType As IEntityType" />
      <MemberSignature Language="F#" Value="member this.EntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.EntityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print">
      <MemberSignature Language="C#" Value="void IPrintableExpression.Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Sub Print (expressionPrinter As ExpressionPrinter) Implements IPrintableExpression.Print" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit&#xA;override this.Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="entityProjectionExpression.Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public virtual void Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Print (expressionPrinter As ExpressionPrinter)" />
      <MemberSignature Language="F#" Value="abstract member Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit&#xA;override this.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="entityProjectionExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression UpdateEntityType (Microsoft.EntityFrameworkCore.Metadata.IEntityType derivedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression UpdateEntityType(class Microsoft.EntityFrameworkCore.Metadata.IEntityType derivedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression.UpdateEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateEntityType (derivedType As IEntityType) As EntityProjectionExpression" />
      <MemberSignature Language="F#" Value="abstract member UpdateEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression&#xA;override this.UpdateEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression" Usage="entityProjectionExpression.UpdateEntityType derivedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.InMemory.Query.Internal.EntityProjectionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="derivedType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Parameters>
      <Docs>
        <param name="derivedType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
