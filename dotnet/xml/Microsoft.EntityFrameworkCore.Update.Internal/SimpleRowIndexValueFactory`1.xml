<Type Name="SimpleRowIndexValueFactory&lt;TKey&gt;" FullName="Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory&lt;TKey&gt;">
  <TypeSignature Language="C#" Value="public class SimpleRowIndexValueFactory&lt;TKey&gt; : Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory&lt;TKey&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SimpleRowIndexValueFactory`1&lt;TKey&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory, class Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory`1&lt;!TKey&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Class SimpleRowIndexValueFactory(Of TKey)&#xA;Implements IRowIndexValueFactory(Of TKey)" />
  <TypeSignature Language="F#" Value="type SimpleRowIndexValueFactory&lt;'Key&gt; = class&#xA;    interface IRowIndexValueFactory&lt;'Key&gt;&#xA;    interface IRowIndexValueFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory&lt;TKey&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SimpleRowIndexValueFactory (Microsoft.EntityFrameworkCore.Metadata.ITableIndex index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.ITableIndex index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.ITableIndex)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (index As ITableIndex)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory&lt;'Key&gt; : Microsoft.EntityFrameworkCore.Metadata.ITableIndex -&gt; Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory&lt;'Key&gt;" Usage="new Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory&lt;'Key&gt; index" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.ITableIndex" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEquatableIndexValue">
      <MemberSignature Language="C#" Value="public virtual object? CreateEquatableIndexValue (Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues = false);" FrameworkAlternate="efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateEquatableIndexValue(class Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues) cil managed" FrameworkAlternate="efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1.CreateEquatableIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEquatableIndexValue (command As IReadOnlyModificationCommand, Optional fromOriginalValues As Boolean = false) As Object" FrameworkAlternate="efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member CreateEquatableIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; obj&#xA;override this.CreateEquatableIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; obj" Usage="simpleRowIndexValueFactory.CreateEquatableIndexValue (command, fromOriginalValues)" FrameworkAlternate="efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual (object? Value, bool HasNullValue) CreateEquatableIndexValue (Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues = false);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ValueTuple`2&lt;object, bool&gt; CreateEquatableIndexValue(class Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEquatableIndexValue (command As IReadOnlyModificationCommand, Optional fromOriginalValues As Boolean = false) As ValueTuple(Of Object, Boolean)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member CreateEquatableIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; ValueTuple&lt;obj, bool&gt;&#xA;override this.CreateEquatableIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; ValueTuple&lt;obj, bool&gt;" Usage="simpleRowIndexValueFactory.CreateEquatableIndexValue (command, fromOriginalValues)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory.CreateEquatableIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-7.0">System.Object</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">System.ValueTuple&lt;System.Object,System.Boolean&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="efcore-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Value", "HasNullValue" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Value", "HasNullValue" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual object[]? CreateIndexValue (Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues = false);" FrameworkAlternate="efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] CreateIndexValue(class Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues) cil managed" FrameworkAlternate="efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1.CreateIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIndexValue (command As IReadOnlyModificationCommand, Optional fromOriginalValues As Boolean = false) As Object()" FrameworkAlternate="efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member CreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; obj[]&#xA;override this.CreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; obj[]" Usage="simpleRowIndexValueFactory.CreateIndexValue (command, fromOriginalValues)" FrameworkAlternate="efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual (object?[]? Value, bool HasNullValue) CreateIndexValue (Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues = false);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ValueTuple`2&lt;object[], bool&gt; CreateIndexValue(class Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIndexValue (command As IReadOnlyModificationCommand, Optional fromOriginalValues As Boolean = false) As ValueTuple(Of Object(), Boolean)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member CreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; ValueTuple&lt;obj[], bool&gt;&#xA;override this.CreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; ValueTuple&lt;obj[], bool&gt;" Usage="simpleRowIndexValueFactory.CreateIndexValue (command, fromOriginalValues)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory.CreateIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-7.0">System.Object[]</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">System.ValueTuple&lt;System.Object[],System.Boolean&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="efcore-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Value", "HasNullValue" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Value", "HasNullValue" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualityComparer">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEqualityComparer&lt;TKey&gt; EqualityComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; EqualityComparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1.EqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EqualityComparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="F#" Value="member this.EqualityComparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory&lt;'Key&gt;.EqualityComparer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory`1.EqualityComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateIndexValue (System.Collections.Generic.IDictionary&lt;string,object?&gt; keyValues, out TKey? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateIndexValue(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; keyValues, [out] !TKey&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1.TryCreateIndexValue(System.Collections.Generic.IDictionary{System.String,System.Object},`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateIndexValue (keyValues As IDictionary(Of String, Object), ByRef key As TKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateIndexValue : System.Collections.Generic.IDictionary&lt;string, obj&gt; * 'Key -&gt; bool&#xA;override this.TryCreateIndexValue : System.Collections.Generic.IDictionary&lt;string, obj&gt; * 'Key -&gt; bool" Usage="simpleRowIndexValueFactory.TryCreateIndexValue (keyValues, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory`1.TryCreateIndexValue(System.Collections.Generic.IDictionary{System.String,System.Object},`0@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="key" Type="TKey" RefType="out" Index="1" FrameworkAlternate="efcore-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyValues">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateIndexValue (object?[] keyValues, out TKey? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateIndexValue(object[] keyValues, [out] !TKey&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1.TryCreateIndexValue(System.Object[],`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateIndexValue (keyValues As Object(), ByRef key As TKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateIndexValue : obj[] * 'Key -&gt; bool&#xA;override this.TryCreateIndexValue : obj[] * 'Key -&gt; bool" Usage="simpleRowIndexValueFactory.TryCreateIndexValue (keyValues, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory`1.TryCreateIndexValue(System.Object[],`0@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="key" Type="TKey" RefType="out" Index="1" FrameworkAlternate="efcore-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyValues">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateIndexValue (Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues, out TKey? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateIndexValue(class Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues, [out] !TKey&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1.TryCreateIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateIndexValue (command As IReadOnlyModificationCommand, fromOriginalValues As Boolean, ByRef key As TKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool * 'Key -&gt; bool&#xA;override this.TryCreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool * 'Key -&gt; bool" Usage="simpleRowIndexValueFactory.TryCreateIndexValue (command, fromOriginalValues, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory`1.TryCreateIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean,`0@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="key" Type="TKey" RefType="out" Index="2" FrameworkAlternate="efcore-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateIndexValue (System.Collections.Generic.IDictionary&lt;string,object?&gt; keyValues, out TKey? key, out bool hasNullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateIndexValue(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; keyValues, [out] !TKey&amp; key, [out] bool&amp; hasNullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1.TryCreateIndexValue(System.Collections.Generic.IDictionary{System.String,System.Object},`0@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateIndexValue (keyValues As IDictionary(Of String, Object), ByRef key As TKey, ByRef hasNullValue As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateIndexValue : System.Collections.Generic.IDictionary&lt;string, obj&gt; * 'Key * bool -&gt; bool&#xA;override this.TryCreateIndexValue : System.Collections.Generic.IDictionary&lt;string, obj&gt; * 'Key * bool -&gt; bool" Usage="simpleRowIndexValueFactory.TryCreateIndexValue (keyValues, key, hasNullValue)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory`1.TryCreateIndexValue(System.Collections.Generic.IDictionary{System.String,System.Object},`0@,System.Boolean@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="key" Type="TKey" RefType="out" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="hasNullValue" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keyValues">To be added.</param>
        <param name="key">To be added.</param>
        <param name="hasNullValue">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateIndexValue (object?[] keyValues, out TKey? key, out bool hasNullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateIndexValue(object[] keyValues, [out] !TKey&amp; key, [out] bool&amp; hasNullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1.TryCreateIndexValue(System.Object[],`0@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateIndexValue (keyValues As Object(), ByRef key As TKey, ByRef hasNullValue As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateIndexValue : obj[] * 'Key * bool -&gt; bool&#xA;override this.TryCreateIndexValue : obj[] * 'Key * bool -&gt; bool" Usage="simpleRowIndexValueFactory.TryCreateIndexValue (keyValues, key, hasNullValue)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory`1.TryCreateIndexValue(System.Object[],`0@,System.Boolean@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="key" Type="TKey" RefType="out" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="hasNullValue" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keyValues">To be added.</param>
        <param name="key">To be added.</param>
        <param name="hasNullValue">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateIndexValue (Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues, out TKey? key, out bool hasNullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateIndexValue(class Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues, [out] !TKey&amp; key, [out] bool&amp; hasNullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.SimpleRowIndexValueFactory`1.TryCreateIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean,`0@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateIndexValue (command As IReadOnlyModificationCommand, fromOriginalValues As Boolean, ByRef key As TKey, ByRef hasNullValue As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool * 'Key * bool -&gt; bool&#xA;override this.TryCreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool * 'Key * bool -&gt; bool" Usage="simpleRowIndexValueFactory.TryCreateIndexValue (command, fromOriginalValues, key, hasNullValue)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory`1.TryCreateIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean,`0@,System.Boolean@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="key" Type="TKey" RefType="out" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="hasNullValue" Type="System.Boolean" RefType="out" Index="3" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <param name="key">To be added.</param>
        <param name="hasNullValue">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
