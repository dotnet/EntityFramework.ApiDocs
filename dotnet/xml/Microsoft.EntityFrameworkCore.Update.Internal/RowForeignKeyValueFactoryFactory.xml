<Type Name="RowForeignKeyValueFactoryFactory" FullName="Microsoft.EntityFrameworkCore.Update.Internal.RowForeignKeyValueFactoryFactory">
  <TypeSignature Language="C#" Value="public class RowForeignKeyValueFactoryFactory : Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactoryFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RowForeignKeyValueFactoryFactory extends System.Object implements class Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactoryFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Update.Internal.RowForeignKeyValueFactoryFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class RowForeignKeyValueFactoryFactory&#xA;Implements IRowForeignKeyValueFactoryFactory" />
  <TypeSignature Language="F#" Value="type RowForeignKeyValueFactoryFactory = class&#xA;    interface IRowForeignKeyValueFactoryFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactoryFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RowForeignKeyValueFactoryFactory (Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector valueConverterSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector valueConverterSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.RowForeignKeyValueFactoryFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueConverterSelector As IValueConverterSelector)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Update.Internal.RowForeignKeyValueFactoryFactory : Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector -&gt; Microsoft.EntityFrameworkCore.Update.Internal.RowForeignKeyValueFactoryFactory" Usage="new Microsoft.EntityFrameworkCore.Update.Internal.RowForeignKeyValueFactoryFactory valueConverterSelector" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueConverterSelector" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector" />
      </Parameters>
      <Docs>
        <param name="valueConverterSelector">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory Create (Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint foreignKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory Create(class Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.RowForeignKeyValueFactoryFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (foreignKey As IForeignKeyConstraint) As IRowForeignKeyValueFactory" />
      <MemberSignature Language="F#" Value="abstract member Create : Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint -&gt; Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory&#xA;override this.Create : Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint -&gt; Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory" Usage="rowForeignKeyValueFactoryFactory.Create foreignKey" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactoryFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
