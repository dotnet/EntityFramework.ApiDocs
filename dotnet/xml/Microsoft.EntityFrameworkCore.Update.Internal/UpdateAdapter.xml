<Type Name="UpdateAdapter" FullName="Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter">
  <TypeSignature Language="C#" Value="public class UpdateAdapter : Microsoft.EntityFrameworkCore.Update.IUpdateAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UpdateAdapter extends System.Object implements class Microsoft.EntityFrameworkCore.Update.IUpdateAdapter" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Class UpdateAdapter&#xA;Implements IUpdateAdapter" />
  <TypeSignature Language="F#" Value="type UpdateAdapter = class&#xA;    interface IUpdateAdapter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Update.IUpdateAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UpdateAdapter (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stateManager As IStateManager)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager -&gt; Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter" Usage="new Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter stateManager" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CascadeChanges">
      <MemberSignature Language="C#" Value="public virtual void CascadeChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CascadeChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.CascadeChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CascadeChanges ()" />
      <MemberSignature Language="F#" Value="abstract member CascadeChanges : unit -&gt; unit&#xA;override this.CascadeChanges : unit -&gt; unit" Usage="updateAdapter.CascadeChanges " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.CascadeChanges</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CascadeDelete">
      <MemberSignature Language="C#" Value="public virtual void CascadeDelete (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; foreignKeys = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CascadeDelete(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; foreignKeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.CascadeDelete(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CascadeDelete (entry As IUpdateEntry, Optional foreignKeys As IEnumerable(Of IForeignKey) = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member CascadeDelete : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; -&gt; unit&#xA;override this.CascadeDelete : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; -&gt; unit" Usage="updateAdapter.CascadeDelete (entry, foreignKeys)" />
      <MemberSignature Language="C#" Value="public virtual void CascadeDelete (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;? foreignKeys = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.CascadeDelete(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="foreignKeys" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" />
      </Parameters>
      <Docs>
        <param name="entry">The entry.</param>
        <param name="foreignKeys">The foreign keys to consider when cascading.</param>
        <summary>
                Forces immediate cascading deletion of child/dependent entities when they are either
                severed from a required parent/principal entity, or the required parent/principal entity
                is itself deleted. See <see cref="T:Microsoft.EntityFrameworkCore.DeleteBehavior" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CascadeDeleteTiming">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming CascadeDeleteTiming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming CascadeDeleteTiming" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.CascadeDeleteTiming" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CascadeDeleteTiming As CascadeTiming" />
      <MemberSignature Language="F#" Value="member this.CascadeDeleteTiming : Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming with get, set" Usage="Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.CascadeDeleteTiming" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.CascadeDeleteTiming</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating when a dependent/child entity will have its state
                set to <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> once its parent/principal entity has been marked
                as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />. The default value is<see cref="F:Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming.Immediate" />.
            </summary>
        <value>To be added.</value>
        <remarks>
                Dependent/child entities are only deleted automatically when the relationship
                is configured with <see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.Cascade" />. This is set by default
                for required relationships.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEntry">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Update.IUpdateEntry CreateEntry (System.Collections.Generic.IDictionary&lt;string,object&gt; values, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Update.IUpdateEntry CreateEntry(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; values, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.CreateEntry(System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEntry (values As IDictionary(Of String, Object), entityType As IEntityType) As IUpdateEntry" />
      <MemberSignature Language="F#" Value="abstract member CreateEntry : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Update.IUpdateEntry&#xA;override this.CreateEntry : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Usage="updateAdapter.CreateEntry (values, entityType)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Update.IUpdateEntry CreateEntry (System.Collections.Generic.IDictionary&lt;string,object?&gt; values, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.CreateEntry(System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Update.IUpdateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Parameters>
      <Docs>
        <param name="values">To be added.</param>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOrphansTiming">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming DeleteOrphansTiming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming DeleteOrphansTiming" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.DeleteOrphansTiming" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DeleteOrphansTiming As CascadeTiming" />
      <MemberSignature Language="F#" Value="member this.DeleteOrphansTiming : Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming with get, set" Usage="Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.DeleteOrphansTiming" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.DeleteOrphansTiming</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating when a dependent/child entity will have its state
                set to <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> once severed from a parent/principal entity
                through either a navigation or foreign key property being set to null. The default
                value is <see cref="F:Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming.Immediate" />.
            </summary>
        <value>To be added.</value>
        <remarks>
                Dependent/child entities are only deleted automatically when the relationship
                is configured with <see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.Cascade" />. This is set by default
                for required relationships.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public virtual void DetectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DetectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.DetectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DetectChanges ()" />
      <MemberSignature Language="F#" Value="abstract member DetectChanges : unit -&gt; unit&#xA;override this.DetectChanges : unit -&gt; unit" Usage="updateAdapter.DetectChanges " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.DetectChanges</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entries">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; Entries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; Entries" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.Entries" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Entries As IEnumerable(Of IUpdateEntry)" />
      <MemberSignature Language="F#" Value="member this.Entries : seq&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" Usage="Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.Entries" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.Entries</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPrincipal">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Update.IUpdateEntry FindPrincipal (Microsoft.EntityFrameworkCore.Update.IUpdateEntry dependentEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Update.IUpdateEntry FindPrincipal(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry dependentEntry, class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.FindPrincipal(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindPrincipal (dependentEntry As IUpdateEntry, foreignKey As IForeignKey) As IUpdateEntry" />
      <MemberSignature Language="F#" Value="abstract member FindPrincipal : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; Microsoft.EntityFrameworkCore.Update.IUpdateEntry&#xA;override this.FindPrincipal : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Usage="updateAdapter.FindPrincipal (dependentEntry, foreignKey)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Update.IUpdateEntry? FindPrincipal (Microsoft.EntityFrameworkCore.Update.IUpdateEntry dependentEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.FindPrincipal(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Update.IUpdateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependentEntry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Parameters>
      <Docs>
        <param name="dependentEntry">To be added.</param>
        <param name="foreignKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDependents">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; GetDependents (Microsoft.EntityFrameworkCore.Update.IUpdateEntry principalEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; GetDependents(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry principalEntry, class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.GetDependents(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDependents (principalEntry As IUpdateEntry, foreignKey As IForeignKey) As IEnumerable(Of IUpdateEntry)" />
      <MemberSignature Language="F#" Value="abstract member GetDependents : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; seq&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;&#xA;override this.GetDependents : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Microsoft.EntityFrameworkCore.Metadata.IForeignKey -&gt; seq&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" Usage="updateAdapter.GetDependents (principalEntry, foreignKey)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.GetDependents(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
      </Parameters>
      <Docs>
        <param name="principalEntry">To be added.</param>
        <param name="foreignKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntriesToSave">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; GetEntriesToSave ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; GetEntriesToSave() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.GetEntriesToSave" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntriesToSave () As IList(Of IUpdateEntry)" />
      <MemberSignature Language="F#" Value="abstract member GetEntriesToSave : unit -&gt; System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;&#xA;override this.GetEntriesToSave : unit -&gt; System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" Usage="updateAdapter.GetEntriesToSave " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.GetEntriesToSave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IModel Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IModel Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.Model" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Model As IModel" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.Model" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.Model</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetEntry">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Update.IUpdateEntry TryGetEntry (Microsoft.EntityFrameworkCore.Metadata.IKey key, object[] keyValues);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Update.IUpdateEntry TryGetEntry(class Microsoft.EntityFrameworkCore.Metadata.IKey key, object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetEntry (key As IKey, keyValues As Object()) As IUpdateEntry" />
      <MemberSignature Language="F#" Value="abstract member TryGetEntry : Microsoft.EntityFrameworkCore.Metadata.IKey * obj[] -&gt; Microsoft.EntityFrameworkCore.Update.IUpdateEntry&#xA;override this.TryGetEntry : Microsoft.EntityFrameworkCore.Metadata.IKey * obj[] -&gt; Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Usage="updateAdapter.TryGetEntry (key, keyValues)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Update.IUpdateEntry? TryGetEntry (Microsoft.EntityFrameworkCore.Metadata.IKey key, object?[] keyValues);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateAdapter.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Update.IUpdateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" />
        <Parameter Name="keyValues" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="keyValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
