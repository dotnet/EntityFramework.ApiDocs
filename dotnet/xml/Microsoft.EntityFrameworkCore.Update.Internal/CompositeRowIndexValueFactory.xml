<Type Name="CompositeRowIndexValueFactory" FullName="Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory">
  <TypeSignature Language="C#" Value="public class CompositeRowIndexValueFactory : Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowValueFactory, Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory&lt;object[]&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeRowIndexValueFactory extends Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowValueFactory implements class Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory, class Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory`1&lt;object[]&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositeRowIndexValueFactory&#xA;Inherits CompositeRowValueFactory&#xA;Implements IRowIndexValueFactory(Of Object())" />
  <TypeSignature Language="F#" Value="type CompositeRowIndexValueFactory = class&#xA;    inherit CompositeRowValueFactory&#xA;    interface IRowIndexValueFactory&lt;obj[]&gt;&#xA;    interface IRowIndexValueFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowValueFactory</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory&lt;System.Object[]&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeRowIndexValueFactory (Microsoft.EntityFrameworkCore.Metadata.ITableIndex index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.ITableIndex index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.ITableIndex)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (index As ITableIndex)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory : Microsoft.EntityFrameworkCore.Metadata.ITableIndex -&gt; Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory" Usage="new Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory index" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.ITableIndex" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEquatableIndexValue">
      <MemberSignature Language="C#" Value="public virtual object? CreateEquatableIndexValue (Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateEquatableIndexValue(class Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory.CreateEquatableIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEquatableIndexValue (command As IReadOnlyModificationCommand, Optional fromOriginalValues As Boolean = false) As Object" />
      <MemberSignature Language="F#" Value="abstract member CreateEquatableIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; obj&#xA;override this.CreateEquatableIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; obj" Usage="compositeRowIndexValueFactory.CreateEquatableIndexValue (command, fromOriginalValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory.CreateEquatableIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual object[]? CreateIndexValue (Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] CreateIndexValue(class Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory.CreateIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIndexValue (command As IReadOnlyModificationCommand, Optional fromOriginalValues As Boolean = false) As Object()" />
      <MemberSignature Language="F#" Value="abstract member CreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; obj[]&#xA;override this.CreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool -&gt; obj[]" Usage="compositeRowIndexValueFactory.CreateIndexValue (command, fromOriginalValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.Internal.IRowIndexValueFactory.CreateIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateIndexValue (System.Collections.Generic.IDictionary&lt;string,object?&gt; keyValues, out object?[]? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateIndexValue(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; keyValues, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory.TryCreateIndexValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateIndexValue (keyValues As IDictionary(Of String, Object), ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateIndexValue : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Object[] -&gt; bool&#xA;override this.TryCreateIndexValue : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Object[] -&gt; bool" Usage="compositeRowIndexValueFactory.TryCreateIndexValue (keyValues, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="key" Type="System.Object[]" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyValues">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateIndexValue (object?[] keyValues, out object?[]? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateIndexValue(object[] keyValues, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory.TryCreateIndexValue(System.Object[],System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateIndexValue (keyValues As Object(), ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateIndexValue : obj[] * Object[] -&gt; bool&#xA;override this.TryCreateIndexValue : obj[] * Object[] -&gt; bool" Usage="compositeRowIndexValueFactory.TryCreateIndexValue (keyValues, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]" />
        <Parameter Name="key" Type="System.Object[]" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyValues">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateIndexValue">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateIndexValue (Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues, out object?[]? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateIndexValue(class Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand command, bool fromOriginalValues, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.CompositeRowIndexValueFactory.TryCreateIndexValue(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Boolean,System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateIndexValue (command As IReadOnlyModificationCommand, fromOriginalValues As Boolean, ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool * Object[] -&gt; bool&#xA;override this.TryCreateIndexValue : Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand * bool * Object[] -&gt; bool" Usage="compositeRowIndexValueFactory.TryCreateIndexValue (command, fromOriginalValues, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" />
        <Parameter Name="key" Type="System.Object[]" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
