<Type Name="IRowForeignKeyValueFactoryFactory" FullName="Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactoryFactory">
  <TypeSignature Language="C#" Value="public interface IRowForeignKeyValueFactoryFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRowForeignKeyValueFactoryFactory" FrameworkAlternate="efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactoryFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRowForeignKeyValueFactoryFactory" />
  <TypeSignature Language="F#" Value="type IRowForeignKeyValueFactoryFactory = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IRowForeignKeyValueFactoryFactory" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory Create (Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint foreignKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory Create(class Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactoryFactory.Create(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)" />
      <MemberSignature Language="VB.NET" Value="Public Function Create (foreignKey As IForeignKeyConstraint) As IRowForeignKeyValueFactory" />
      <MemberSignature Language="F#" Value="abstract member Create : Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint -&gt; Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory" Usage="iRowForeignKeyValueFactoryFactory.Create foreignKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Update.Internal.IRowForeignKeyValueFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
