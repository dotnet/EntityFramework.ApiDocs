<Type Name="CodeWriter" FullName="Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter">
  <TypeSignature Language="C#" Value="public abstract class CodeWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeWriter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeWriter" />
  <TypeSignature Language="F#" Value="type CodeWriter = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeWriter (Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService fileService);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService fileService) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.#ctor(Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (fileService As IFileService)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter : Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService -&gt; Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter" Usage="new Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter fileService" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileService" Type="Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService" />
      </Parameters>
      <Docs>
        <param name="fileService">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property FileExtension As String" />
      <MemberSignature Language="F#" Value="member this.FileExtension : string with get, set" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileService">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService FileService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService FileService" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileService" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileService As IFileService" />
      <MemberSignature Language="F#" Value="member this.FileService : Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExistingFilePaths">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetExistingFilePaths (string outputPath, string dbContextClassName, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; entityTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetExistingFilePaths(string outputPath, string dbContextClassName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; entityTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetExistingFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExistingFilePaths (outputPath As String, dbContextClassName As String, entityTypes As IEnumerable(Of IEntityType)) As IList(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetExistingFilePaths : string * string * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetExistingFilePaths : string * string * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="codeWriter.GetExistingFilePaths (outputPath, dbContextClassName, entityTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputPath" Type="System.String" />
        <Parameter Name="dbContextClassName" Type="System.String" />
        <Parameter Name="entityTypes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" />
      </Parameters>
      <Docs>
        <param name="outputPath">To be added.</param>
        <param name="dbContextClassName">To be added.</param>
        <param name="entityTypes">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReadOnlyFilePaths">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetReadOnlyFilePaths (string outputPath, string dbContextClassName, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; entityTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetReadOnlyFilePaths(string outputPath, string dbContextClassName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; entityTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetReadOnlyFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReadOnlyFilePaths (outputPath As String, dbContextClassName As String, entityTypes As IEnumerable(Of IEntityType)) As IList(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetReadOnlyFilePaths : string * string * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetReadOnlyFilePaths : string * string * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="codeWriter.GetReadOnlyFilePaths (outputPath, dbContextClassName, entityTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputPath" Type="System.String" />
        <Parameter Name="dbContextClassName" Type="System.String" />
        <Parameter Name="entityTypes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" />
      </Parameters>
      <Docs>
        <param name="outputPath">To be added.</param>
        <param name="dbContextClassName">To be added.</param>
        <param name="entityTypes">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteCodeAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles&gt; WriteCodeAsync (Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration modelConfiguration, string outputPath, string dbContextClassName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles&gt; WriteCodeAsync(class Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration modelConfiguration, string outputPath, string dbContextClassName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.WriteCodeAsync(Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WriteCodeAsync (modelConfiguration As ModelConfiguration, outputPath As String, dbContextClassName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ReverseEngineerFiles)" />
      <MemberSignature Language="F#" Value="abstract member WriteCodeAsync : Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles&gt;" Usage="codeWriter.WriteCodeAsync (modelConfiguration, outputPath, dbContextClassName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelConfiguration" Type="Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration" />
        <Parameter Name="outputPath" Type="System.String" />
        <Parameter Name="dbContextClassName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="modelConfiguration">To be added.</param>
        <param name="outputPath">To be added.</param>
        <param name="dbContextClassName">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
