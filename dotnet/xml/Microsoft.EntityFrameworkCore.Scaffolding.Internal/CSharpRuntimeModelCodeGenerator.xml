<Type Name="CSharpRuntimeModelCodeGenerator" FullName="Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGenerator">
  <TypeSignature Language="C#" Value="public class CSharpRuntimeModelCodeGenerator : Microsoft.EntityFrameworkCore.Scaffolding.ICompiledModelCodeGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CSharpRuntimeModelCodeGenerator extends System.Object implements class Microsoft.EntityFrameworkCore.Design.ILanguageBasedService, class Microsoft.EntityFrameworkCore.Scaffolding.ICompiledModelCodeGenerator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Class CSharpRuntimeModelCodeGenerator&#xA;Implements ICompiledModelCodeGenerator" />
  <TypeSignature Language="F#" Value="type CSharpRuntimeModelCodeGenerator = class&#xA;    interface ICompiledModelCodeGenerator&#xA;    interface ILanguageBasedService" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Design.ILanguageBasedService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Scaffolding.ICompiledModelCodeGenerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CSharpRuntimeModelCodeGenerator (Microsoft.EntityFrameworkCore.Design.Internal.ICSharpRuntimeAnnotationCodeGenerator annotationCodeGenerator, Microsoft.EntityFrameworkCore.Design.ICSharpHelper cSharpHelper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Design.Internal.ICSharpRuntimeAnnotationCodeGenerator annotationCodeGenerator, class Microsoft.EntityFrameworkCore.Design.ICSharpHelper cSharpHelper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGenerator.#ctor(Microsoft.EntityFrameworkCore.Design.Internal.ICSharpRuntimeAnnotationCodeGenerator,Microsoft.EntityFrameworkCore.Design.ICSharpHelper)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (annotationCodeGenerator As ICSharpRuntimeAnnotationCodeGenerator, cSharpHelper As ICSharpHelper)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGenerator : Microsoft.EntityFrameworkCore.Design.Internal.ICSharpRuntimeAnnotationCodeGenerator * Microsoft.EntityFrameworkCore.Design.ICSharpHelper -&gt; Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGenerator" Usage="new Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGenerator (annotationCodeGenerator, cSharpHelper)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.Internal.ICSharpRuntimeAnnotationCodeGenerator" />
        <Parameter Name="cSharpHelper" Type="Microsoft.EntityFrameworkCore.Design.ICSharpHelper" />
      </Parameters>
      <Docs>
        <param name="annotationCodeGenerator">To be added.</param>
        <param name="cSharpHelper">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateModel">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&gt; GenerateModel (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelCodeGenerationOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&gt; GenerateModel(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelCodeGenerationOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGenerator.GenerateModel(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelCodeGenerationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateModel (model As IModel, options As CompiledModelCodeGenerationOptions) As IReadOnlyCollection(Of ScaffoldedFile)" />
      <MemberSignature Language="F#" Value="abstract member GenerateModel : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelCodeGenerationOptions -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&gt;&#xA;override this.GenerateModel : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelCodeGenerationOptions -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&gt;" Usage="cSharpRuntimeModelCodeGenerator.GenerateModel (model, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Scaffolding.ICompiledModelCodeGenerator.GenerateModel(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelCodeGenerationOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelCodeGenerationOptions" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <param name="options">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public virtual string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGenerator.Language" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Language As String" />
      <MemberSignature Language="F#" Value="member this.Language : string" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGenerator.Language" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Design.ILanguageBasedService.Language</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
