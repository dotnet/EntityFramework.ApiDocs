<Type Name="ScaffoldingCodeGenerator" FullName="Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator">
  <TypeSignature Language="C#" Value="public abstract class ScaffoldingCodeGenerator : Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingCodeGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ScaffoldingCodeGenerator extends System.Object implements class Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingCodeGenerator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ScaffoldingCodeGenerator&#xA;Implements IScaffoldingCodeGenerator" />
  <TypeSignature Language="F#" Value="type ScaffoldingCodeGenerator = class&#xA;    interface IScaffoldingCodeGenerator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingCodeGenerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ScaffoldingCodeGenerator (Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService fileService);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService fileService) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator.#ctor(Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (fileService As IFileService)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator : Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService -&gt; Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator" Usage="new Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator fileService" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileService" Type="Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService" />
      </Parameters>
      <Docs>
        <param name="fileService">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public abstract string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FileExtension As String" />
      <MemberSignature Language="F#" Value="member this.FileExtension : string" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator.FileExtension" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingCodeGenerator.FileExtension</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileService">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService FileService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService FileService" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator.FileService" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileService As IFileService" />
      <MemberSignature Language="F#" Value="member this.FileService : Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator.FileService" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingCodeGenerator.FileService</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExistingFilePaths">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetExistingFilePaths (string outputPath, string dbContextClassName, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; entityTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetExistingFilePaths(string outputPath, string dbContextClassName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; entityTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator.GetExistingFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExistingFilePaths (outputPath As String, dbContextClassName As String, entityTypes As IEnumerable(Of IEntityType)) As IList(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetExistingFilePaths : string * string * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetExistingFilePaths : string * string * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="scaffoldingCodeGenerator.GetExistingFilePaths (outputPath, dbContextClassName, entityTypes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingCodeGenerator.GetExistingFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputPath" Type="System.String" />
        <Parameter Name="dbContextClassName" Type="System.String" />
        <Parameter Name="entityTypes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" />
      </Parameters>
      <Docs>
        <param name="outputPath">To be added.</param>
        <param name="dbContextClassName">To be added.</param>
        <param name="entityTypes">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReadOnlyFilePaths">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetReadOnlyFilePaths (string outputPath, string dbContextClassName, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; entityTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetReadOnlyFilePaths(string outputPath, string dbContextClassName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; entityTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator.GetReadOnlyFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReadOnlyFilePaths (outputPath As String, dbContextClassName As String, entityTypes As IEnumerable(Of IEntityType)) As IList(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetReadOnlyFilePaths : string * string * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetReadOnlyFilePaths : string * string * seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="scaffoldingCodeGenerator.GetReadOnlyFilePaths (outputPath, dbContextClassName, entityTypes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingCodeGenerator.GetReadOnlyFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputPath" Type="System.String" />
        <Parameter Name="dbContextClassName" Type="System.String" />
        <Parameter Name="entityTypes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" />
      </Parameters>
      <Docs>
        <param name="outputPath">To be added.</param>
        <param name="dbContextClassName">To be added.</param>
        <param name="entityTypes">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteCode">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles WriteCode (Microsoft.EntityFrameworkCore.Metadata.IModel model, string outputPath, string namespace, string contextName, string connectionString, bool dataAnnotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles WriteCode(class Microsoft.EntityFrameworkCore.Metadata.IModel model, string outputPath, string namespace, string contextName, string connectionString, bool dataAnnotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.ScaffoldingCodeGenerator.WriteCode(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WriteCode (model As IModel, outputPath As String, namespace As String, contextName As String, connectionString As String, dataAnnotations As Boolean) As ReverseEngineerFiles" />
      <MemberSignature Language="F#" Value="abstract member WriteCode : Microsoft.EntityFrameworkCore.Metadata.IModel * string * string * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles" Usage="scaffoldingCodeGenerator.WriteCode (model, outputPath, namespace, contextName, connectionString, dataAnnotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IScaffoldingCodeGenerator.WriteCode(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String,System.String,System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="outputPath" Type="System.String" />
        <Parameter Name="namespace" Type="System.String" />
        <Parameter Name="contextName" Type="System.String" />
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="dataAnnotations" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <param name="outputPath">To be added.</param>
        <param name="namespace">To be added.</param>
        <param name="contextName">To be added.</param>
        <param name="connectionString">To be added.</param>
        <param name="dataAnnotations">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
