<Type Name="TextTemplatingEngineHost" FullName="Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost">
  <TypeSignature Language="C#" Value="public class TextTemplatingEngineHost : IServiceProvider, Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost, Microsoft.VisualStudio.TextTemplating.ITextTemplatingSessionHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextTemplatingEngineHost extends System.Object implements class Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost, class Microsoft.VisualStudio.TextTemplating.ITextTemplatingSessionHost, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost" />
  <TypeSignature Language="VB.NET" Value="Public Class TextTemplatingEngineHost&#xA;Implements IServiceProvider, ITextTemplatingEngineHost, ITextTemplatingSessionHost" />
  <TypeSignature Language="F#" Value="type TextTemplatingEngineHost = class&#xA;    interface ITextTemplatingSessionHost&#xA;    interface ITextTemplatingEngineHost&#xA;    interface IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualStudio.TextTemplating.ITextTemplatingSessionHost</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTemplatingEngineHost (IServiceProvider? serviceProvider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional serviceProvider As IServiceProvider = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost : IServiceProvider -&gt; Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost" Usage="new Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSession">
      <MemberSignature Language="C#" Value="public virtual Microsoft.VisualStudio.TextTemplating.ITextTemplatingSession CreateSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.VisualStudio.TextTemplating.ITextTemplatingSession CreateSession() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.CreateSession" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSession () As ITextTemplatingSession" />
      <MemberSignature Language="F#" Value="abstract member CreateSession : unit -&gt; Microsoft.VisualStudio.TextTemplating.ITextTemplatingSession&#xA;override this.CreateSession : unit -&gt; Microsoft.VisualStudio.TextTemplating.ITextTemplatingSession" Usage="textTemplatingEngineHost.CreateSession " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualStudio.TextTemplating.ITextTemplatingSessionHost.CreateSession</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualStudio.TextTemplating.ITextTemplatingSession</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerErrorCollection Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.CompilerErrorCollection Errors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.Errors" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Errors As CompilerErrorCollection" />
      <MemberSignature Language="F#" Value="member this.Errors : System.CodeDom.Compiler.CompilerErrorCollection" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.Errors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Extension">
      <MemberSignature Language="C#" Value="public virtual string Extension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Extension" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.Extension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Extension As String" />
      <MemberSignature Language="F#" Value="member this.Extension : string" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.Extension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHostOption">
      <MemberSignature Language="C#" Value="public virtual object? GetHostOption (string optionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetHostOption(string optionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.GetHostOption(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHostOption (optionName As String) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetHostOption : string -&gt; obj&#xA;override this.GetHostOption : string -&gt; obj" Usage="textTemplatingEngineHost.GetHostOption optionName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.GetHostOption(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="optionName">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public virtual object? GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="textTemplatingEngineHost.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize ()" />
      <MemberSignature Language="F#" Value="abstract member Initialize : unit -&gt; unit&#xA;override this.Initialize : unit -&gt; unit" Usage="textTemplatingEngineHost.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadIncludeText">
      <MemberSignature Language="C#" Value="public virtual bool LoadIncludeText (string requestFileName, out string content, out string location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadIncludeText(string requestFileName, [out] string&amp; content, [out] string&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.LoadIncludeText(System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LoadIncludeText (requestFileName As String, ByRef content As String, ByRef location As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member LoadIncludeText : string * string * string -&gt; bool&#xA;override this.LoadIncludeText : string * string * string -&gt; bool" Usage="textTemplatingEngineHost.LoadIncludeText (requestFileName, content, location)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.LoadIncludeText(System.String,System.String@,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestFileName" Type="System.String" />
        <Parameter Name="content" Type="System.String" RefType="out" />
        <Parameter Name="location" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="requestFileName">To be added.</param>
        <param name="content">To be added.</param>
        <param name="location">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogErrors">
      <MemberSignature Language="C#" Value="public virtual void LogErrors (System.CodeDom.Compiler.CompilerErrorCollection errors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LogErrors(class System.CodeDom.Compiler.CompilerErrorCollection errors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.LogErrors(System.CodeDom.Compiler.CompilerErrorCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LogErrors (errors As CompilerErrorCollection)" />
      <MemberSignature Language="F#" Value="abstract member LogErrors : System.CodeDom.Compiler.CompilerErrorCollection -&gt; unit&#xA;override this.LogErrors : System.CodeDom.Compiler.CompilerErrorCollection -&gt; unit" Usage="textTemplatingEngineHost.LogErrors errors" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.LogErrors(System.CodeDom.Compiler.CompilerErrorCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errors" Type="System.CodeDom.Compiler.CompilerErrorCollection" />
      </Parameters>
      <Docs>
        <param name="errors">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding OutputEncoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding OutputEncoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.OutputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OutputEncoding As Encoding" />
      <MemberSignature Language="F#" Value="member this.OutputEncoding : System.Text.Encoding" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.OutputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideTemplatingAppDomain">
      <MemberSignature Language="C#" Value="public virtual AppDomain ProvideTemplatingAppDomain (string content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.AppDomain ProvideTemplatingAppDomain(string content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.ProvideTemplatingAppDomain(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ProvideTemplatingAppDomain (content As String) As AppDomain" />
      <MemberSignature Language="F#" Value="abstract member ProvideTemplatingAppDomain : string -&gt; AppDomain&#xA;override this.ProvideTemplatingAppDomain : string -&gt; AppDomain" Usage="textTemplatingEngineHost.ProvideTemplatingAppDomain content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="content">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveAssemblyReference">
      <MemberSignature Language="C#" Value="public virtual string ResolveAssemblyReference (string assemblyReference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ResolveAssemblyReference(string assemblyReference) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.ResolveAssemblyReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveAssemblyReference (assemblyReference As String) As String" />
      <MemberSignature Language="F#" Value="abstract member ResolveAssemblyReference : string -&gt; string&#xA;override this.ResolveAssemblyReference : string -&gt; string" Usage="textTemplatingEngineHost.ResolveAssemblyReference assemblyReference" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.ResolveAssemblyReference(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyReference" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyReference">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveDirectiveProcessor">
      <MemberSignature Language="C#" Value="public virtual Type ResolveDirectiveProcessor (string processorName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type ResolveDirectiveProcessor(string processorName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.ResolveDirectiveProcessor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveDirectiveProcessor (processorName As String) As Type" />
      <MemberSignature Language="F#" Value="abstract member ResolveDirectiveProcessor : string -&gt; Type&#xA;override this.ResolveDirectiveProcessor : string -&gt; Type" Usage="textTemplatingEngineHost.ResolveDirectiveProcessor processorName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.ResolveDirectiveProcessor(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processorName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processorName">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveParameterValue">
      <MemberSignature Language="C#" Value="public virtual string ResolveParameterValue (string directiveId, string processorName, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ResolveParameterValue(string directiveId, string processorName, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.ResolveParameterValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveParameterValue (directiveId As String, processorName As String, parameterName As String) As String" />
      <MemberSignature Language="F#" Value="abstract member ResolveParameterValue : string * string * string -&gt; string&#xA;override this.ResolveParameterValue : string * string * string -&gt; string" Usage="textTemplatingEngineHost.ResolveParameterValue (directiveId, processorName, parameterName)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.ResolveParameterValue(System.String,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directiveId" Type="System.String" />
        <Parameter Name="processorName" Type="System.String" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directiveId">To be added.</param>
        <param name="processorName">To be added.</param>
        <param name="parameterName">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolvePath">
      <MemberSignature Language="C#" Value="public virtual string ResolvePath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ResolvePath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.ResolvePath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolvePath (path As String) As String" />
      <MemberSignature Language="F#" Value="abstract member ResolvePath : string -&gt; string&#xA;override this.ResolvePath : string -&gt; string" Usage="textTemplatingEngineHost.ResolvePath path" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.ResolvePath(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public virtual Microsoft.VisualStudio.TextTemplating.ITextTemplatingSession Session { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualStudio.TextTemplating.ITextTemplatingSession Session" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.Session" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Session As ITextTemplatingSession" />
      <MemberSignature Language="F#" Value="member this.Session : Microsoft.VisualStudio.TextTemplating.ITextTemplatingSession with get, set" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.Session" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.VisualStudio.TextTemplating.ITextTemplatingSessionHost.Session</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualStudio.TextTemplating.ITextTemplatingSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFileExtension">
      <MemberSignature Language="C#" Value="public virtual void SetFileExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFileExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.SetFileExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetFileExtension (extension As String)" />
      <MemberSignature Language="F#" Value="abstract member SetFileExtension : string -&gt; unit&#xA;override this.SetFileExtension : string -&gt; unit" Usage="textTemplatingEngineHost.SetFileExtension extension" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.SetFileExtension(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputEncoding">
      <MemberSignature Language="C#" Value="public virtual void SetOutputEncoding (System.Text.Encoding encoding, bool fromOutputDirective);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOutputEncoding(class System.Text.Encoding encoding, bool fromOutputDirective) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.SetOutputEncoding(System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOutputEncoding (encoding As Encoding, fromOutputDirective As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetOutputEncoding : System.Text.Encoding * bool -&gt; unit&#xA;override this.SetOutputEncoding : System.Text.Encoding * bool -&gt; unit" Usage="textTemplatingEngineHost.SetOutputEncoding (encoding, fromOutputDirective)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.SetOutputEncoding(System.Text.Encoding,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="fromOutputDirective" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoding">To be added.</param>
        <param name="fromOutputDirective">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StandardAssemblyReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; StandardAssemblyReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; StandardAssemblyReferences" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.StandardAssemblyReferences" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StandardAssemblyReferences As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.StandardAssemblyReferences : System.Collections.Generic.IList&lt;string&gt;" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.StandardAssemblyReferences" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.StandardAssemblyReferences</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StandardImports">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; StandardImports { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; StandardImports" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.StandardImports" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StandardImports As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.StandardImports : System.Collections.Generic.IList&lt;string&gt;" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.StandardImports" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost.StandardImports</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TemplateFile">
      <MemberSignature Language="C#" Value="public virtual string? TemplateFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TemplateFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.TemplateFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TemplateFile As String" />
      <MemberSignature Language="F#" Value="member this.TemplateFile : string with get, set" Usage="Microsoft.EntityFrameworkCore.Scaffolding.Internal.TextTemplatingEngineHost.TemplateFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
