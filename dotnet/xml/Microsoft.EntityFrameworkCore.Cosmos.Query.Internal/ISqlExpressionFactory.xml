<Type Name="ISqlExpressionFactory" FullName="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory">
  <TypeSignature Language="C#" Value="public interface ISqlExpressionFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISqlExpressionFactory" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISqlExpressionFactory" />
  <TypeSignature Language="F#" Value="type ISqlExpressionFactory = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ISqlExpressionFactory" FrameworkAlternate="efcore-8.0;efcore-9.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Add (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Add(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Add(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Add : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.Add (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Add (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Add (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Add(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Add : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Add (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression And (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression And(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.And(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member And : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.And (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression And (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression And (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression And(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function And (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member And : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.And (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression AndAlso (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression AndAlso(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.AndAlso(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AndAlso (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member AndAlso : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.AndAlso (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression AndAlso (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression AndAlso(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function AndAlso (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member AndAlso : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.AndAlso (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDefaultTypeMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ApplyDefaultTypeMapping (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression sqlExpression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ApplyDefaultTypeMapping(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression sqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.ApplyDefaultTypeMapping(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyDefaultTypeMapping (sqlExpression As SqlExpression) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member ApplyDefaultTypeMapping : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.ApplyDefaultTypeMapping sqlExpression" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? ApplyDefaultTypeMapping (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? sqlExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0;efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTypeMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ApplyTypeMapping (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression sqlExpression, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ApplyTypeMapping(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression sqlExpression, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTypeMapping (sqlExpression As SqlExpression, typeMapping As CoreTypeMapping) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member ApplyTypeMapping : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.ApplyTypeMapping (sqlExpression, typeMapping)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? ApplyTypeMapping (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? sqlExpression, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0;efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTypeMappingsOnItemAndArray">
      <MemberSignature Language="C#" Value="public (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression) ApplyTypeMappingsOnItemAndArray (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; ApplyTypeMappingsOnItemAndArray(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression array) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.ApplyTypeMappingsOnItemAndArray(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTypeMappingsOnItemAndArray (item As SqlExpression, array As SqlExpression) As ValueTuple(Of SqlExpression, SqlExpression)" />
      <MemberSignature Language="F#" Value="abstract member ApplyTypeMappingsOnItemAndArray : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; ValueTuple&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt;" Usage="iSqlExpressionFactory.ApplyTypeMappingsOnItemAndArray (item, array)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="array" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="array">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ArrayIndex (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Type type, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ArrayIndex(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.ArrayIndex(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function ArrayIndex (left As SqlExpression, right As SqlExpression, type As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member ArrayIndex : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.ArrayIndex (left, right, type, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="type" Type="System.Type" Index="2" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="type">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Coalesce (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Coalesce(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Coalesce(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coalesce (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Coalesce : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.Coalesce (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoalesceUndefined">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression CoalesceUndefined (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression CoalesceUndefined(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.CoalesceUndefined(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoalesceUndefined (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member CoalesceUndefined : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.CoalesceUndefined (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="2" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConditionalExpression Condition (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression test, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifTrue, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifFalse);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConditionalExpression Condition(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression test, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifTrue, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifFalse) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Condition(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Condition (test As SqlExpression, ifTrue As SqlExpression, ifFalse As SqlExpression) As SqlConditionalExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Condition : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConditionalExpression" Usage="iSqlExpressionFactory.Condition (test, ifTrue, ifFalse)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Condition (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression test, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifTrue, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifFalse);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Condition(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression test, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifTrue, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifFalse) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Condition (test As SqlExpression, ifTrue As SqlExpression, ifFalse As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Condition : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Condition (test, ifTrue, ifFalse)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConditionalExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="ifTrue" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="ifFalse" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="test">To be added.</param>
        <param name="ifTrue">To be added.</param>
        <param name="ifFalse">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression Constant (object value, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression Constant(object value, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Constant(System.Object,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Constant (value As Object, Optional typeMapping As CoreTypeMapping = Nothing) As SqlConstantExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Constant : obj * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression" Usage="iSqlExpressionFactory.Constant (value, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression Constant (object? value, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Constant (object value, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Constant(object value, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Constant (value As Object, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Constant : obj * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Constant (value, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Constant (object? value, Type type, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Constant(object value, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Constant(System.Object,System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Constant (value As Object, type As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member Constant : obj * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Constant (value, type, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="2" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="type">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Convert (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand, Type type, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Convert(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Convert(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (operand As SqlExpression, type As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlUnaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Convert : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression" Usage="iSqlExpressionFactory.Convert (operand, type, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Convert (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand, Type type, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Convert (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand, Type type, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Convert(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (operand As SqlExpression, type As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Convert : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Convert (operand, type, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <param name="type">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Divide (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Divide(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Divide(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Divide (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Divide : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.Divide (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Divide (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Divide (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Divide(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Divide (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Divide : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Divide (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Equal (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Equal(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Equal(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equal (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Equal : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.Equal (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Equal (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Equal(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Equal (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Equal : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Equal (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Exists (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression subquery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Exists(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression subquery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Exists(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (subquery As SelectExpression) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member Exists : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Exists subquery" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subquery" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression" Index="0" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="subquery">A subquery to check existence of.</param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ExistsExpression" /> which represents an EXISTS operation in a SQL tree.
            </summary>
        <returns>An expression representing an EXISTS operation in a SQL tree.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.FindMapping(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMapping (type As Type) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Type -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="iSqlExpressionFactory.FindMapping type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression Function (string functionName, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; arguments, Type returnType, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression Function(string functionName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; arguments, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Function (functionName As String, arguments As IEnumerable(Of SqlExpression), returnType As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member Function : string * seq&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression" Usage="iSqlExpressionFactory.Function (functionName, arguments, returnType, typeMapping)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression Function (string functionName, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; arguments, Type returnType, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="returnType" Type="System.Type" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="functionName">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Function (string functionName, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, Type returnType, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Function(string functionName, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Function (functionName As String, arguments As IEnumerable(Of Expression), returnType As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member Function : string * seq&lt;System.Linq.Expressions.Expression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Function (functionName, arguments, returnType, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="returnType" Type="System.Type" Index="2" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="functionName">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression GreaterThan (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression GreaterThan(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.GreaterThan(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function GreaterThan (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member GreaterThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.GreaterThan (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression GreaterThan (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression GreaterThan(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GreaterThan (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member GreaterThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.GreaterThan (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression GreaterThanOrEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression GreaterThanOrEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.GreaterThanOrEqual(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function GreaterThanOrEqual (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member GreaterThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.GreaterThanOrEqual (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression GreaterThanOrEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression GreaterThanOrEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GreaterThanOrEqual (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member GreaterThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.GreaterThanOrEqual (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression valuesParameter);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression valuesParameter) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function In (item As SqlExpression, valuesParameter As SqlParameterExpression) As InExpression" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression" Usage="iSqlExpressionFactory.In (item, valuesParameter)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression In (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression valuesParameter);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression In(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression valuesParameter) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function In (item As SqlExpression, valuesParameter As SqlParameterExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.In (item, valuesParameter)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0;efcore-9.0" />
        <Parameter Name="valuesParameter" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression" Index="1" FrameworkAlternate="efcore-8.0;efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="valuesParameter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; values);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; values) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Function In (item As SqlExpression, values As IReadOnlyList(Of SqlExpression)) As InExpression" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression" Usage="iSqlExpressionFactory.In (item, values)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression In (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; values);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression In(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; values) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function In (item As SqlExpression, values As IReadOnlyList(Of SqlExpression)) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.In (item, values)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0;efcore-9.0" />
        <Parameter Name="values" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt;" Index="1" FrameworkAlternate="efcore-8.0;efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="values">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression values, bool negated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression values, bool negated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function In (item As SqlExpression, values As SqlExpression, negated As Boolean) As InExpression" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * bool -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression" Usage="iSqlExpressionFactory.In (item, values, negated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="values" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="negated" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="values">To be added.</param>
        <param name="negated">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression IsNotNull (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression IsNotNull(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.IsNotNull(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNotNull (operand As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member IsNotNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.IsNotNull operand" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression IsNotNull (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression IsNotNull(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNotNull (operand As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member IsNotNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.IsNotNull operand" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression IsNull (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression IsNull(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.IsNull(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNull (operand As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member IsNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.IsNull operand" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression IsNull (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression IsNull(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNull (operand As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member IsNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.IsNull operand" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression LessThan (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression LessThan(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.LessThan(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function LessThan (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member LessThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.LessThan (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression LessThan (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression LessThan(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function LessThan (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member LessThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.LessThan (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression LessThanOrEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression LessThanOrEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.LessThanOrEqual(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function LessThanOrEqual (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member LessThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.LessThanOrEqual (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression LessThanOrEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression LessThanOrEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function LessThanOrEqual (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member LessThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.LessThanOrEqual (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType operatorType, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType operatorType, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.MakeBinary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function MakeBinary (operatorType As ExpressionType, left As SqlExpression, right As SqlExpression, typeMapping As CoreTypeMapping) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member MakeBinary : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.MakeBinary (operatorType, left, right, typeMapping)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType operatorType, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="System.Linq.Expressions.ExpressionType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? MakeBinary (System.Linq.Expressions.ExpressionType operatorType, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? existingExpression = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType operatorType, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression existingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.MakeBinary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function MakeBinary (operatorType As ExpressionType, left As SqlExpression, right As SqlExpression, typeMapping As CoreTypeMapping, Optional existingExpression As SqlExpression = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member MakeBinary : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.MakeBinary (operatorType, left, right, typeMapping, existingExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="System.Linq.Expressions.ExpressionType" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="2" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="existingExpression" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="4" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <param name="existingExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Modulo (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Modulo(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Modulo(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Modulo (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Modulo : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.Modulo (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Modulo (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Modulo (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Modulo(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Modulo (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Modulo : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Modulo (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Multiply (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Multiply(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Multiply(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Multiply (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Multiply : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.Multiply (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Multiply (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Multiply (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Multiply(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Multiply (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Multiply : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Multiply (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Negate (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Negate(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Negate(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Negate (operand As SqlExpression) As SqlUnaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Negate : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression" Usage="iSqlExpressionFactory.Negate operand" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Negate (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Negate(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Negate (operand As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Negate : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Negate operand" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Not (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Not(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Not(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Not (operand As SqlExpression) As SqlUnaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Not : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression" Usage="iSqlExpressionFactory.Not operand" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Not (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Not(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Not (operand As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Not : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Not operand" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression NotEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression NotEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.NotEqual(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function NotEqual (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member NotEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.NotEqual (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression NotEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression NotEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function NotEqual (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member NotEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.NotEqual (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Or (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Or(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Or(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Or : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.Or (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Or (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Or (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Or(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Or : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Or (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression OrElse (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression OrElse(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.OrElse(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function OrElse (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member OrElse : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.OrElse (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression OrElse (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression OrElse(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function OrElse (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member OrElse : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.OrElse (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression Select (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression Select(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (entityType As IEntityType) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member Select : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression" Usage="iSqlExpressionFactory.Select entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression Select (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string sql, System.Linq.Expressions.Expression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression Select(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string sql, class System.Linq.Expressions.Expression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (entityType As IEntityType, sql As String, argument As Expression) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member Select : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression" Usage="iSqlExpressionFactory.Select (entityType, sql, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="argument" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="sql">To be added.</param>
        <param name="argument">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Subtract (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Subtract(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Subtract(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Subtract : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="iSqlExpressionFactory.Subtract (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Subtract (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Subtract (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Subtract(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Subtract : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="iSqlExpressionFactory.Subtract (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
