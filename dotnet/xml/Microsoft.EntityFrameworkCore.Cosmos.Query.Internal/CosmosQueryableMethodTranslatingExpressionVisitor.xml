<Type Name="CosmosQueryableMethodTranslatingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class CosmosQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CosmosQueryableMethodTranslatingExpressionVisitor extends Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosQueryableMethodTranslatingExpressionVisitor&#xA;Inherits QueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="F#" Value="type CosmosQueryableMethodTranslatingExpressionVisitor = class&#xA;    inherit QueryableMethodTranslatingExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CosmosQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor parentVisitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor parentVisitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (parentVisitor As CosmosQueryableMethodTranslatingExpressionVisitor)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor parentVisitor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentVisitor" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="parentVisitor">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CosmosQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory sqlExpressionFactory, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider memberTranslatorProvider, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider methodCallTranslatorProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory sqlExpressionFactory, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider memberTranslatorProvider, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider methodCallTranslatorProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryableMethodTranslatingExpressionVisitorDependencies, model As IModel, sqlExpressionFactory As ISqlExpressionFactory, memberTranslatorProvider As IMemberTranslatorProvider, methodCallTranslatorProvider As IMethodCallTranslatorProvider)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor (dependencies, model, sqlExpressionFactory, memberTranslatorProvider, methodCallTranslatorProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="memberTranslatorProvider" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="methodCallTranslatorProvider" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="model">To be added.</param>
        <param name="sqlExpressionFactory">To be added.</param>
        <param name="memberTranslatorProvider">To be added.</param>
        <param name="methodCallTranslatorProvider">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CosmosQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory sqlExpressionFactory, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider memberTranslatorProvider, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider methodCallTranslatorProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory sqlExpressionFactory, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider memberTranslatorProvider, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider methodCallTranslatorProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryableMethodTranslatingExpressionVisitorDependencies, queryCompilationContext As QueryCompilationContext, sqlExpressionFactory As ISqlExpressionFactory, memberTranslatorProvider As IMemberTranslatorProvider, methodCallTranslatorProvider As IMethodCallTranslatorProvider)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.QueryCompilationContext * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor (dependencies, queryCompilationContext, sqlExpressionFactory, memberTranslatorProvider, methodCallTranslatorProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="memberTranslatorProvider" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="methodCallTranslatorProvider" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="queryCompilationContext">To be added.</param>
        <param name="sqlExpressionFactory">To be added.</param>
        <param name="memberTranslatorProvider">To be added.</param>
        <param name="methodCallTranslatorProvider">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateShapedQueryExpression">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateShapedQueryExpression (entityType As IEntityType) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.CreateShapedQueryExpression : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateShapedQueryExpression">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression (Type elementType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression(class System.Type elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateShapedQueryExpression (elementType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.CreateShapedQueryExpression : Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression elementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use overload which takes IEntityType.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use overload which takes IEntityType.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubqueryVisitor">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateSubqueryVisitor () As QueryableMethodTranslatingExpressionVisitor" />
      <MemberSignature Language="F#" Value="override this.CreateSubqueryVisitor : unit -&gt; Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAll">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAll (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAll(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateAll(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateAll (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateAll : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateAll (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAny">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAny (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAny(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateAny(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateAny (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateAny : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateAny (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAverage">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAverage (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAverage(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateAverage(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateAverage (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateAverage : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateAverage (source, selector, resultType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateCast">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCast (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type resultType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCast(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateCast(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateCast (source As ShapedQueryExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateCast : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateCast (source, resultType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateConcat">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateConcat (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateConcat(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateConcat(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateConcat (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateConcat : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateConcat (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateContains">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateContains (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateContains(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateContains(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateContains (source As ShapedQueryExpression, item As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateContains : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateContains (source, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="item" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="item">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateCount">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCount(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateCount(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateCount (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateCount : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateDefaultIfEmpty">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDefaultIfEmpty (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDefaultIfEmpty(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateDefaultIfEmpty(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateDefaultIfEmpty (source As ShapedQueryExpression, defaultValue As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateDefaultIfEmpty : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateDefaultIfEmpty (source, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="defaultValue">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateDistinct">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDistinct (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDistinct(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateDistinct(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateDistinct (source As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateDistinct : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateDistinct source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateElementAtOrDefault">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateElementAtOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression index, bool returnDefault);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateElementAtOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression index, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateElementAtOrDefault (source As ShapedQueryExpression, index As Expression, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateElementAtOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault (source, index, returnDefault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="index">To be added.</param>
        <param name="returnDefault">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateExcept">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateExcept (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateExcept(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateExcept(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateExcept (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateExcept : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateExcept (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateFirstOrDefault">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateFirstOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate, Type returnType, bool returnDefault);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateFirstOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate, class System.Type returnType, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateFirstOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateFirstOrDefault (source As ShapedQueryExpression, predicate As LambdaExpression, returnType As Type, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateFirstOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateFirstOrDefault (source, predicate, returnType, returnDefault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="returnDefault">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateGroupBy">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, System.Linq.Expressions.LambdaExpression elementSelector, System.Linq.Expressions.LambdaExpression resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, class System.Linq.Expressions.LambdaExpression elementSelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateGroupBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateGroupBy (source As ShapedQueryExpression, keySelector As LambdaExpression, elementSelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateGroupBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateGroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="elementSelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="keySelector">To be added.</param>
        <param name="elementSelector">To be added.</param>
        <param name="resultSelector">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateGroupJoin">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateGroupJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateGroupJoin (outer As ShapedQueryExpression, inner As ShapedQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateGroupJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateGroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="inner" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="outer">To be added.</param>
        <param name="inner">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <param name="resultSelector">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateIntersect">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateIntersect (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateIntersect(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateIntersect(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateIntersect (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateIntersect : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateIntersect (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateJoin">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateJoin (outer As ShapedQueryExpression, inner As ShapedQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="inner" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="outer">To be added.</param>
        <param name="inner">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <param name="resultSelector">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateLastOrDefault">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLastOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate, Type returnType, bool returnDefault);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLastOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate, class System.Type returnType, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateLastOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateLastOrDefault (source As ShapedQueryExpression, predicate As LambdaExpression, returnType As Type, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateLastOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateLastOrDefault (source, predicate, returnType, returnDefault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="returnDefault">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateLeftJoin">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLeftJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLeftJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateLeftJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateLeftJoin (outer As ShapedQueryExpression, inner As ShapedQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateLeftJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateLeftJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="inner" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="outer">To be added.</param>
        <param name="inner">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <param name="resultSelector">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateLongCount">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLongCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLongCount(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateLongCount(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateLongCount (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateLongCount : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateLongCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateMax">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMax (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMax(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateMax(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateMax (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateMax : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateMax (source, selector, resultType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateMin">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateMin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateMin (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateMin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateMin (source, selector, resultType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateOfType">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOfType (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type resultType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOfType(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateOfType(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateOfType (source As ShapedQueryExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateOfType : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateOfType (source, resultType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateOrderBy">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOrderBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOrderBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, bool ascending) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateOrderBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateOrderBy (source As ShapedQueryExpression, keySelector As LambdaExpression, ascending As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateOrderBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateOrderBy (source, keySelector, ascending)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="ascending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="keySelector">To be added.</param>
        <param name="ascending">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateReverse">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateReverse (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateReverse(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateReverse(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateReverse (source As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateReverse : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateReverse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSelect">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelect (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelect(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateSelect(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSelect (source As ShapedQueryExpression, selector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSelect : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateSelect (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSelectMany">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSelectMany (source As ShapedQueryExpression, selector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSelectMany : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSelectMany">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression collectionSelector, System.Linq.Expressions.LambdaExpression resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression collectionSelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSelectMany (source As ShapedQueryExpression, collectionSelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSelectMany : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="collectionSelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="collectionSelector">To be added.</param>
        <param name="resultSelector">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSingleOrDefault">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSingleOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate, Type returnType, bool returnDefault);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSingleOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate, class System.Type returnType, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateSingleOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSingleOrDefault (source As ShapedQueryExpression, predicate As LambdaExpression, returnType As Type, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSingleOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateSingleOrDefault (source, predicate, returnType, returnDefault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="returnDefault">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSkip">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkip (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression count);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkip(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateSkip(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSkip (source As ShapedQueryExpression, count As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSkip : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateSkip (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="count" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSkipWhile">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkipWhile (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkipWhile(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateSkipWhile(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSkipWhile (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSkipWhile : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateSkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSubquery">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSubquery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSubquery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateSubquery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TranslateSubquery (expression As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSubquery : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateSubquery expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSum">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSum (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSum(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateSum(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSum (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSum : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateSum (source, selector, resultType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTake">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTake (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression count);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTake(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateTake(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateTake (source As ShapedQueryExpression, count As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateTake : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateTake (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="count" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTakeWhile">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTakeWhile (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTakeWhile(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateTakeWhile(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateTakeWhile (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateTakeWhile : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateTakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateThenBy">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateThenBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateThenBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, bool ascending) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateThenBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateThenBy (source As ShapedQueryExpression, keySelector As LambdaExpression, ascending As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateThenBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateThenBy (source, keySelector, ascending)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="ascending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="keySelector">To be added.</param>
        <param name="ascending">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateUnion">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateUnion (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateUnion(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateUnion(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateUnion (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateUnion : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateUnion (source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateWhere">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateWhere (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateWhere(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.TranslateWhere(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateWhere (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateWhere : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.TranslateWhere (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Visit (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Visit(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Visit (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.Visit : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.Visit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression extensionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression extensionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (extensionExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="cosmosQueryableMethodTranslatingExpressionVisitor.VisitExtension extensionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="extensionExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
