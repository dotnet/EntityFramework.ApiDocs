<Type Name="SqlExpressionFactory" FullName="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory">
  <TypeSignature Language="C#" Value="public class SqlExpressionFactory : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlExpressionFactory extends System.Object implements class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlExpressionFactory&#xA;Implements ISqlExpressionFactory" />
  <TypeSignature Language="F#" Value="type SqlExpressionFactory = class&#xA;    interface ISqlExpressionFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlExpressionFactory (Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource typeMappingSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource typeMappingSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeMappingSource As ITypeMappingSource)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory : Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory typeMappingSource" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="typeMappingSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlExpressionFactory (Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource typeMappingSource, Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource typeMappingSource, class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource,Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeMappingSource As ITypeMappingSource, model As IModel)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory : Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource * Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory (typeMappingSource, model)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0;efcore-9.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0;efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="typeMappingSource">To be added.</param>
        <param name="model">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Add (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Add(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Add(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Add : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.Add : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.Add (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Add (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Add (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Add(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Add : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Add : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Add (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Add(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression And (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression And(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.And(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function And (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member And : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.And : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.And (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression And (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression And (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression And(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function And (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member And : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.And : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.And (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.And(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression AndAlso (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression AndAlso(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.AndAlso(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AndAlso (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member AndAlso : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.AndAlso : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.AndAlso (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression AndAlso (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression AndAlso(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AndAlso (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member AndAlso : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.AndAlso : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.AndAlso (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.AndAlso(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDefaultTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ApplyDefaultTypeMapping (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression sqlExpression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ApplyDefaultTypeMapping(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression sqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.ApplyDefaultTypeMapping(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ApplyDefaultTypeMapping (sqlExpression As SqlExpression) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member ApplyDefaultTypeMapping : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.ApplyDefaultTypeMapping : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.ApplyDefaultTypeMapping sqlExpression" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? ApplyDefaultTypeMapping (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? sqlExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0;efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.ApplyDefaultTypeMapping(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ApplyTypeMapping (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression sqlExpression, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ApplyTypeMapping(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression sqlExpression, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ApplyTypeMapping (sqlExpression As SqlExpression, typeMapping As CoreTypeMapping) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member ApplyTypeMapping : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.ApplyTypeMapping : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.ApplyTypeMapping (sqlExpression, typeMapping)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? ApplyTypeMapping (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? sqlExpression, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0;efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTypeMappingsOnItemAndArray">
      <MemberSignature Language="C#" Value="public (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression) ApplyTypeMappingsOnItemAndArray (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression itemExpression, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression arrayExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; ApplyTypeMappingsOnItemAndArray(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression itemExpression, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression arrayExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.ApplyTypeMappingsOnItemAndArray(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTypeMappingsOnItemAndArray (itemExpression As SqlExpression, arrayExpression As SqlExpression) As ValueTuple(Of SqlExpression, SqlExpression)" />
      <MemberSignature Language="F#" Value="abstract member ApplyTypeMappingsOnItemAndArray : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; ValueTuple&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt;&#xA;override this.ApplyTypeMappingsOnItemAndArray : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; ValueTuple&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt;" Usage="sqlExpressionFactory.ApplyTypeMappingsOnItemAndArray (itemExpression, arrayExpression)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.ApplyTypeMappingsOnItemAndArray(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemExpression" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="arrayExpression" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="itemExpression">To be added.</param>
        <param name="arrayExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ArrayIndex (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Type type, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ArrayIndex(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.ArrayIndex(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ArrayIndex (left As SqlExpression, right As SqlExpression, type As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member ArrayIndex : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.ArrayIndex : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.ArrayIndex (left, right, type, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.ArrayIndex(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="type" Type="System.Type" Index="2" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="type">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Coalesce (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Coalesce(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Coalesce(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Coalesce (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Coalesce : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.Coalesce : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.Coalesce (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Coalesce(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoalesceUndefined">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression CoalesceUndefined (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression CoalesceUndefined(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.CoalesceUndefined(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CoalesceUndefined (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member CoalesceUndefined : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.CoalesceUndefined : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.CoalesceUndefined (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.CoalesceUndefined(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="2" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConditionalExpression Condition (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression test, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifTrue, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifFalse);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConditionalExpression Condition(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression test, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifTrue, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifFalse) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Condition(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Condition (test As SqlExpression, ifTrue As SqlExpression, ifFalse As SqlExpression) As SqlConditionalExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Condition : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConditionalExpression&#xA;override this.Condition : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConditionalExpression" Usage="sqlExpressionFactory.Condition (test, ifTrue, ifFalse)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Condition (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression test, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifTrue, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifFalse);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Condition(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression test, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifTrue, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression ifFalse) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Condition (test As SqlExpression, ifTrue As SqlExpression, ifFalse As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Condition : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Condition : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Condition (test, ifTrue, ifFalse)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Condition(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConditionalExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="ifTrue" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="ifFalse" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="test">To be added.</param>
        <param name="ifTrue">To be added.</param>
        <param name="ifFalse">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression Constant (object value, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression Constant(object value, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Constant(System.Object,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Constant (value As Object, Optional typeMapping As CoreTypeMapping = Nothing) As SqlConstantExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Constant : obj * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression&#xA;override this.Constant : obj * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression" Usage="sqlExpressionFactory.Constant (value, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression Constant (object? value, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Constant (object value, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Constant(object value, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Constant (value As Object, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Constant : obj * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Constant : obj * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Constant (value, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Constant(System.Object,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Constant (object? value, Type type, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Constant(object value, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Constant(System.Object,System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Constant (value As Object, type As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member Constant : obj * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Constant : obj * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Constant (value, type, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Constant(System.Object,System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="2" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="type">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Convert (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand, Type type, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Convert(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Convert(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Convert (operand As SqlExpression, type As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlUnaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Convert : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression&#xA;override this.Convert : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression" Usage="sqlExpressionFactory.Convert (operand, type, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Convert (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand, Type type, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Convert (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand, Type type, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Convert(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Convert (operand As SqlExpression, type As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Convert : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Convert : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Convert (operand, type, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Convert(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <param name="type">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Divide (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Divide(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Divide(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Divide (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Divide : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.Divide : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.Divide (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Divide (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Divide (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Divide(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Divide (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Divide : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Divide : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Divide (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Divide(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Equal (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Equal(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Equal(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equal (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Equal : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.Equal : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.Equal (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Equal (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Equal(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equal (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Equal : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Equal : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Equal (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Equal(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Exists (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression subquery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Exists(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression subquery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Exists(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exists (subquery As SelectExpression) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member Exists : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Exists : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Exists subquery" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Exists(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subquery" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression" Index="0" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="subquery">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.FindMapping(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMapping (type As Type) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Type -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping&#xA;override this.FindMapping : Type -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="sqlExpressionFactory.FindMapping type" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.FindMapping(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression Function (string functionName, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; arguments, Type returnType, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression Function(string functionName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; arguments, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Function (functionName As String, arguments As IEnumerable(Of SqlExpression), returnType As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member Function : string * seq&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression&#xA;override this.Function : string * seq&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression" Usage="sqlExpressionFactory.Function (functionName, arguments, returnType, typeMapping)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression Function (string functionName, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; arguments, Type returnType, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="returnType" Type="System.Type" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="functionName">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Function (string functionName, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, Type returnType, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Function(string functionName, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Function (functionName As String, arguments As IEnumerable(Of Expression), returnType As Type, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member Function : string * seq&lt;System.Linq.Expressions.Expression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Function : string * seq&lt;System.Linq.Expressions.Expression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Function (functionName, arguments, returnType, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="returnType" Type="System.Type" Index="2" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="functionName">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression GreaterThan (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression GreaterThan(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.GreaterThan(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GreaterThan (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member GreaterThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.GreaterThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.GreaterThan (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression GreaterThan (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression GreaterThan(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GreaterThan (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member GreaterThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.GreaterThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.GreaterThan (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.GreaterThan(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression GreaterThanOrEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression GreaterThanOrEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.GreaterThanOrEqual(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GreaterThanOrEqual (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member GreaterThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.GreaterThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.GreaterThanOrEqual (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression GreaterThanOrEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression GreaterThanOrEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GreaterThanOrEqual (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member GreaterThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.GreaterThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.GreaterThanOrEqual (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.GreaterThanOrEqual(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression valuesParameter);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression valuesParameter) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function In (item As SqlExpression, valuesParameter As SqlParameterExpression) As InExpression" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression&#xA;override this.In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression" Usage="sqlExpressionFactory.In (item, valuesParameter)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression In (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression valuesParameter);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression In(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression valuesParameter) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function In (item As SqlExpression, valuesParameter As SqlParameterExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.In (item, valuesParameter)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0;efcore-9.0" />
        <Parameter Name="valuesParameter" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression" Index="1" FrameworkAlternate="efcore-8.0;efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="valuesParameter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; values);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; values) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function In (item As SqlExpression, values As IReadOnlyList(Of SqlExpression)) As InExpression" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression&#xA;override this.In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression" Usage="sqlExpressionFactory.In (item, values)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression In (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; values);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression In(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; values) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function In (item As SqlExpression, values As IReadOnlyList(Of SqlExpression)) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.In (item, values)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0;efcore-9.0" />
        <Parameter Name="values" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&gt;" Index="1" FrameworkAlternate="efcore-8.0;efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="values">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression values, bool negated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression In(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression item, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression values, bool negated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function In (item As SqlExpression, values As SqlExpression, negated As Boolean) As InExpression" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * bool -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression&#xA;override this.In : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * bool -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression" Usage="sqlExpressionFactory.In (item, values, negated)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="values" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="negated" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="values">To be added.</param>
        <param name="negated">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression IsNotNull (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression IsNotNull(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.IsNotNull(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsNotNull (operand As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member IsNotNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.IsNotNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.IsNotNull operand" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression IsNotNull (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression IsNotNull(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsNotNull (operand As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member IsNotNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.IsNotNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.IsNotNull operand" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.IsNotNull(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression IsNull (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression IsNull(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.IsNull(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsNull (operand As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member IsNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.IsNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.IsNull operand" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression IsNull (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression IsNull(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsNull (operand As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member IsNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.IsNull : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.IsNull operand" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.IsNull(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression LessThan (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression LessThan(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.LessThan(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LessThan (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member LessThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.LessThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.LessThan (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression LessThan (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression LessThan(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LessThan (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member LessThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.LessThan : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.LessThan (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.LessThan(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression LessThanOrEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression LessThanOrEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.LessThanOrEqual(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LessThanOrEqual (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member LessThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.LessThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.LessThanOrEqual (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression LessThanOrEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression LessThanOrEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LessThanOrEqual (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member LessThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.LessThanOrEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.LessThanOrEqual (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.LessThanOrEqual(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType operatorType, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType operatorType, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.MakeBinary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeBinary (operatorType As ExpressionType, left As SqlExpression, right As SqlExpression, typeMapping As CoreTypeMapping) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member MakeBinary : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.MakeBinary : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.MakeBinary (operatorType, left, right, typeMapping)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType operatorType, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.MakeBinary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="System.Linq.Expressions.ExpressionType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? MakeBinary (System.Linq.Expressions.ExpressionType operatorType, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression? existingExpression = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType operatorType, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression existingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.MakeBinary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeBinary (operatorType As ExpressionType, left As SqlExpression, right As SqlExpression, typeMapping As CoreTypeMapping, Optional existingExpression As SqlExpression = Nothing) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member MakeBinary : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.MakeBinary : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.MakeBinary (operatorType, left, right, typeMapping, existingExpression)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.MakeBinary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="System.Linq.Expressions.ExpressionType" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="1" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="2" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="existingExpression" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Index="4" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <param name="existingExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Modulo (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Modulo(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Modulo(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Modulo (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Modulo : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.Modulo : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.Modulo (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Modulo (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Modulo (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Modulo(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Modulo (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Modulo : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Modulo : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Modulo (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Modulo(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Multiply (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Multiply(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Multiply(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Multiply (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Multiply : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.Multiply : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.Multiply (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Multiply (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Multiply (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Multiply(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Multiply (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Multiply : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Multiply : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Multiply (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Multiply(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Negate (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Negate(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Negate(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Negate (operand As SqlExpression) As SqlUnaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Negate : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression&#xA;override this.Negate : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression" Usage="sqlExpressionFactory.Negate operand" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Negate (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Negate(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Negate (operand As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Negate : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Negate : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Negate operand" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Negate(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Not (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression Not(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Not(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Not (operand As SqlExpression) As SqlUnaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Not : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression&#xA;override this.Not : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression" Usage="sqlExpressionFactory.Not operand" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Not (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Not(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression operand) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Not (operand As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Not : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Not : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Not operand" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Not(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression NotEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression NotEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.NotEqual(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NotEqual (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member NotEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.NotEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.NotEqual (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression NotEqual (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression NotEqual(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NotEqual (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member NotEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.NotEqual : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.NotEqual (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.NotEqual(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Or (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Or(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Or(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Or (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Or : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.Or : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.Or (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Or (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Or (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Or(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Or (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Or : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Or : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Or (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Or(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression OrElse (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression OrElse(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.OrElse(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OrElse (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member OrElse : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.OrElse : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.OrElse (left, right)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression OrElse (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression OrElse(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OrElse (left As SqlExpression, right As SqlExpression) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member OrElse : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.OrElse : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.OrElse (left, right)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.OrElse(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression Select (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression Select(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Select (entityType As IEntityType) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member Select : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression&#xA;override this.Select : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression" Usage="sqlExpressionFactory.Select entityType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression Select (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string sql, System.Linq.Expressions.Expression argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression Select(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string sql, class System.Linq.Expressions.Expression argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Select (entityType As IEntityType, sql As String, argument As Expression) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member Select : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression&#xA;override this.Select : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression" Usage="sqlExpressionFactory.Select (entityType, sql, argument)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="argument" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="sql">To be added.</param>
        <param name="argument">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Subtract (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Subtract(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory.Subtract(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subtract (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlBinaryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Subtract : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression&#xA;override this.Subtract : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression" Usage="sqlExpressionFactory.Subtract (left, right, typeMapping)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression Subtract (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Subtract (Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default);" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression Subtract(class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression left, class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subtract (left As SqlExpression, right As SqlExpression, Optional typeMapping As CoreTypeMapping = Nothing) As SqlExpression" FrameworkAlternate="efcore-9.0" />
      <MemberSignature Language="F#" Value="abstract member Subtract : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression&#xA;override this.Subtract : Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" Usage="sqlExpressionFactory.Subtract (left, right, typeMapping)" FrameworkAlternate="efcore-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory.Subtract(Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-9.0">Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
