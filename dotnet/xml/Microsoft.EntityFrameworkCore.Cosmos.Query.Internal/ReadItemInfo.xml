<Type Name="ReadItemInfo" FullName="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ReadItemInfo">
  <TypeSignature Language="C#" Value="public class ReadItemInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReadItemInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ReadItemInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class ReadItemInfo" />
  <TypeSignature Language="F#" Value="type ReadItemInfo = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadItemInfo (System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.Expression&gt; propertyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class System.Linq.Expressions.Expression&gt; propertyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ReadItemInfo.#ctor(System.Collections.Generic.IDictionary{Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyValues As IDictionary(Of IProperty, Expression))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ReadItemInfo : System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, System.Linq.Expressions.Expression&gt; -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ReadItemInfo" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ReadItemInfo propertyValues" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyValues" Type="System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyValues">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.Expression&gt; PropertyValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class System.Linq.Expressions.Expression&gt; PropertyValues" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ReadItemInfo.PropertyValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PropertyValues As IDictionary(Of IProperty, Expression)" />
      <MemberSignature Language="F#" Value="member this.PropertyValues : System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, System.Linq.Expressions.Expression&gt;" Usage="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ReadItemInfo.PropertyValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Linq.Expressions.Expression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
